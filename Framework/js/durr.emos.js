/*!
 * durr.emos.js v1.1.7-4
 * http://durr.com/
 *
 * Copyright 2014 DÃ¼rr Systems AG
 *
 * Date: 2018-04-03T11:19Z
 */

(function (global, factory) {
  if (typeof module === "object" && typeof module.exports === "object") {
    module.exports = global.document
      ? factory(global, true)
      : function (w) {
          if (!w.document) {
            throw new Error("emosWS requires a window with a document");
          }
          return factory(w);
        };
  } else {
    factory(global);
  }

  // Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {
  /**
   * Provide Subscriber Group functionalities
   * @module emosWS/core/SubscriberGroup
   */
  /**
   * Manages subscribers which want to listen for the datachange of a tag (topic)
   *
   * @class
   * @alias SubscriberGroup
   * @memberof core
   * @param {String} itag - tag name
   * @param {Object} iTagType - tag type
   */
  function SubscriberGroup(itag, iTagType) {
    emosWS.topicNumber++;
    /**
     * Name of tag
     * @type {String}
     */
    this.tag = itag;
    /**
     * Id of tag
     * @type {String}
     */
    this.tagId = this.getTagId(itag, iTagType);
    /**
     * Actual value of tag
     * @type {Object}
     */
    this.actualData = null;
    /**
     * Array of subscribers (listeners)
     * @type {Subscriber[]}
     */
    this.subscribers = [];
    /**
     * Type of tag
     * @type {Object}
     */
    this.tagType = iTagType;
    /**
     * Live
     * @type {Boolean}
     */
    this.live = false;
    /**
     * Indicates whether data comes from browser indexed database
     * @type {Boolean}
     */
    this.fromIDB = false;
    /**
     * Callback function
     * @type {Function}
     */
    this.callback = this.callback.bind(this);
    if (
      [emosWS.tagType.Diagnosis, emosWS.tagType.IOObject].indexOf(iTagType) ===
      -1
    ) {
      emosWS.badQualityTags[this.tagId] = this;
    }
    emosWS.dispatchEvent({ type: "HMIplc", message: this });
  }

  /**
   * Get id of tag
   * @param {String} tag - fullname of tag
   * @param {Object} iTagType - type of tag
   * @returns {String} id of tag
   */
  SubscriberGroup.prototype.getTagId = function (tag, iTagType) {
    try {
      return tag + iTagType.id;
    } catch (e) {
      console.error("[SubscriberGroup getTagId] : " + e);
    }
  };

  /**
   * Update tags have bad quality
   * @param {Object} data - value of tag
   */
  SubscriberGroup.prototype.updateBadQualityTags = function (data) {
    var qualityIsGood = false;
    if (data) {
      switch (data.type) {
        case "dataChange":
          if (data.source === "IndexedDB") {
            qualityIsGood = false;
          } else {
            qualityIsGood = data.quality === 192;
          }
          break;

        case "diagnosisWindow":
          qualityIsGood = data.value.OPCVersionID !== "EMOSDEFAULT";
          break;
      }
    }

    if (qualityIsGood) {
      delete emosWS.badQualityTags[this.tagId];
    }

    this.checkBadQualityTags();
  };

  /**
   * Check if there's any tag has bad quality and dispatch "Quality" event
   */
  SubscriberGroup.prototype.checkBadQualityTags = function () {
    var qualityIsGood = Object.keys(emosWS.badQualityTags).length === 0;
    emosWS.dispatchEvent({
      type: "Quality",
      message: {
        good: qualityIsGood,
        list: emosWS.badQualityTags,
      },
    });
  };

  /**
   * Callback function fired when datachange comes
   * @param {Object} msg
   */
  SubscriberGroup.prototype.callback = function (msg) {
    try {
      this.updateBadQualityTags(msg);
      //update IndexedDB if msg comes from server
      if (msg.source !== "IndexedDB") {
        emosWS.idb.updatePLC({ plctag: this.tagId, value: msg });
        this.active = true;
        this.fromIDB = false;
      } else {
        this.onIDB(msg);
        this.fromIDB = true;
      }

      //callback to listeners
      if (this.active ^ this.fromIDB) {
        this.actualData = msg;
        if (typeof msg.classStateRec !== "undefined") {
          msg.classStateRec.ClassStateNew = intToBinary(
            msg.classStateRec.ClassStateNew,
            32
          );
          msg.classStateRec.ClassStateAck = intToBinary(
            msg.classStateRec.ClassStateAck,
            32
          );
          msg.newFault =
            msg.value === "0" &&
            msg.classStateRec.ClassStateNew.charAt(30) === "1";
          msg.newWarning =
            msg.value === "0" &&
            msg.classStateRec.ClassStateNew.charAt(29) === "1";
          msg.newEmergency =
            msg.value === "0" &&
            msg.classStateRec.ClassStateNew.charAt(28) === "1";
          msg.ackFault =
            msg.value === "1" &&
            msg.classStateRec.ClassStateAck.charAt(30) === "1";
          msg.ackWarning =
            msg.value === "1" &&
            msg.classStateRec.ClassStateAck.charAt(29) === "1";
          msg.ackEmergency =
            msg.value === "1" &&
            msg.classStateRec.ClassStateAck.charAt(28) === "1";
          msg.noFault = msg.value === "2";
          if (msg.newFault) {
            msg.classStateRec.state = 0;
          } else if (msg.ackFault) {
            msg.classStateRec.state = 1;
          } else if (msg.newEmergency) {
            msg.classStateRec.state = 2;
          } else if (msg.ackEmergency) {
            msg.classStateRec.state = 3;
          } else if (msg.newWarning) {
            msg.classStateRec.state = 4;
          } else if (msg.ackWarning) {
            msg.classStateRec.state = 5;
          } else if (msg.noFault) {
            msg.classStateRec.state = 6;
          } else {
            //Unknown state
            msg.classStateRec.state = 7;
          }
        }
        this.subscribers.forEach(function (subscriber) {
          if (subscriber.callback)
            try {
              subscriber.callback(msg, subscriber.param);
            } catch (err) {
              console.error(
                "[SubscriberGroup subscribers callback] failed: " + err
              );
            }
        });
      }
    } catch (err) {
      console.error("[SubscriberGroup callback] failed: " + err);
    }
  };
  /**
   * Get type of tag (topic)
   * @returns {String} type of tag (topic)
   */
  SubscriberGroup.prototype.getTagType = function () {
    return this.tagType.id;
  };

  /**
   * Register a subscriber to the group
   * @param {Subscriber} subscriber to register
   */
  SubscriberGroup.prototype.register = function (subscriber) {
    try {
      this.subscribers.forEach(function (subscriberB) {
        if (subscriber.equals(subscriberB)) {
          if (!emosWS.animationData.stillInit) {
            if (this.actualData !== null) {
              if (subscriber.callback)
                subscriber.callback(this.actualData, subscriber.param);
            }
          }
          return;
        }
      });

      this.subscribers.push(subscriber);
      if (!emosWS.animationData.stillInit) {
        if (this.actualData !== null) {
          if (subscriber.callback)
            subscriber.callback(this.actualData, subscriber.param);
        }
      }

      if (this.subscribers.length === 1) {
        this.advise();
      }
    } catch (err) {
      console.error("[SubscriberGroup register] : ", err);
    }
  };

  /**
   * Unregister a callback of a subscriber
   * @param {Function} callback - callback function to unregister
   */
  SubscriberGroup.prototype.unregister = function (callback) {
    this.subscribers.forEach(
      function (subscriber, index) {
        if (subscriber.callback === callback) {
          this.subscribers.splice(index, 1);
          subscriber = null;
          if (this.subscribers.length === 0) {
            this.unadvise();
            delete emosWS.tagDestination[this.tagId];
            delete emosWS.badQualityTags[this.tagId];
            delete this;
          }
          return;
        }
      }.bind(this)
    );
  };

  /**
   * Send advise mesage to the server
   */
  SubscriberGroup.prototype.advise = function () {
    var plctag = emosWS.getPLCTag(this.tag);
    if (plctag) {
      this.adviseData(plctag);
    }

    emosWS.idb.addPLC({ plctag: this.tagId, value: {} });
    emosWS.idb.getPLC(this.tagId, this.callback);
  };

  /**
   * Send unvise message to the server
   */
  SubscriberGroup.prototype.unadvise = function () {};

  /**
   * Handler when dadachange comes from Indexed Database
   * @param {Object} msg - datachange comes
   */
  SubscriberGroup.prototype.onIDB = function (msg) {};

  /**
   * Advise data
   * @abstract
   */
  SubscriberGroup.prototype.adviseData = function () {};

  /**
   * Print tag content to string
   * @returns {String} - tag content
   */
  SubscriberGroup.prototype.toString = function () {
    var value = "";
    var v = this.actualData;
    if (v) {
      value +=
        "type:\t" +
        v.type +
        "\n" +
        "id:\t" +
        v.id +
        "\n" +
        "tag:\t" +
        v.tag +
        "\n" +
        "ts:\t" +
        v.ts +
        "\n" +
        "value:\t" +
        v.value +
        "\n" +
        "quality:\t" +
        v.quality +
        "\n" +
        "source:\t" +
        v.source +
        "\n";
    }
    return (
      "tagid:\t" +
      this.tagId +
      "\n" +
      "listeners:\t" +
      this.subscribers.length +
      "\n\n" +
      "Actual value\n" +
      value
    );
  };

  /**
   * Set value of tag
   * @param {Object} value - value to set
   */
  SubscriberGroup.prototype.setValue = function (value) {};

  /**
   * Manages subscribers for an IO
   *
   * @class
   * @alias SubscriberGroupIO
   * @memberof core.SubscriberGroup
   * @extends core.SubscriberGroup
   * @param {type} itag
   * @returns {SubscriberGroupIO_L5.SubscriberGroupIO}
   */
  function SubscriberGroupIO(itag) {
    SubscriberGroup.call(this, itag, Definition.tagType.IO);
  }

  SubscriberGroupIO.prototype = Object.create(SubscriberGroup.prototype);
  SubscriberGroupIO.prototype.constructor = SubscriberGroupIO;

  /**
   * Advise IO
   * @override
   * @param {type} plctag - fullname of tag
   */
  SubscriberGroupIO.prototype.adviseData = function (plctag) {
    emosWS.sendAdvise(plctag.plc, plctag.tag, this.callback);
  };

  /**
   * Set value to tag
   * @override
   * @param {type} value - value to set
   */
  SubscriberGroupIO.prototype.setValue = function (value) {
    value = String(value);
    if (value !== this.actualData.value) emosWS.poke(this.tag, value);
  };

  /**
   * Manages subscribers for an IO Alarm
   *
   * @class
   * @alias SubscriberGroupIOAlarm
   * @memberof core.SubscriberGroup
   * @extends core.SubscriberGroup
   * @param {type} itag - tag name
   */
  function SubscriberGroupIOAlarm(itag) {
    SubscriberGroup.call(this, itag, Definition.tagType.IOAlarm);
  }

  SubscriberGroupIOAlarm.prototype = Object.create(SubscriberGroup.prototype);
  SubscriberGroupIOAlarm.prototype.constructor = SubscriberGroupIOAlarm;

  /**
   * Advise IO Alarm
   * @override
   * @param {type} plctag - fullname of tag
   */
  SubscriberGroupIOAlarm.prototype.adviseData = function (plctag) {
    emosWS.sendAdvise(plctag.plc, plctag.tag + ".Alarm", this.callback);
  };

  /**
   * Manages subscribers for an alarm
   *
   * @class
   * @alias SubscriberGroupAlarm
   * @memberof core.SubscriberGroup
   * @extends core.SubscriberGroup
   * @param {String} itag - tag name
   */
  function SubscriberGroupAlarm(itag) {
    SubscriberGroup.call(this, itag, Definition.tagType.Alarm);
  }

  SubscriberGroupAlarm.prototype = Object.create(SubscriberGroup.prototype);
  SubscriberGroupAlarm.prototype.constructor = SubscriberGroupAlarm;

  /**
   * Advise alarm
   * @override
   * @param {type} plctag - fullname of tag
   */
  SubscriberGroupAlarm.prototype.adviseData = function (plctag) {
    emosWS.sendAdviseAlarm(plctag.plc, plctag.tag, this.callback);
  };

  /**
   * Manages subscribers for an alarm text
   *
   * @class
   * @alias SubscriberGroupAlarmText
   * @memberof core.SubscriberGroup
   * @extends core.SubscriberGroup
   * @param {String} itag - tag name
   */
  function SubscriberGroupAlarmText(itag) {
    SubscriberGroup.call(this, itag, Definition.tagType.AlarmText);
  }

  SubscriberGroupAlarmText.prototype = Object.create(SubscriberGroup.prototype);
  SubscriberGroupAlarmText.prototype.constructor = SubscriberGroupAlarmText;

  /**
   * Manages subscribers for a diagnosis window
   *
   * @class
   * @alias SubscriberGroupDiagnosis
   * @memberof core.SubscriberGroup
   * @extends core.SubscriberGroup
   * @param {String} itag - tag name
   */
  function SubscriberGroupDiagnosis(itag) {
    SubscriberGroup.call(this, itag, Definition.tagType.Diagnosis);
  }

  SubscriberGroupDiagnosis.prototype = Object.create(SubscriberGroup.prototype);
  SubscriberGroupDiagnosis.prototype.constructor = SubscriberGroupDiagnosis;

  SubscriberGroupDiagnosis.prototype.adviseData = function () {
    this.tag.replace(
      /(.*)::(.*)::(.*)/,
      function (m, lib, wintype, name) {
        emosWS.sendGetDiagnosisWindow(lib, wintype, name, this.callback);
      }.bind(this)
    );
  };

  /**
   * Manages subscribers for a property
   *
   * @class
   * @alias SubscriberGroupProperty
   * @memberof core.SubscriberGroup
   * @extends core.SubscriberGroup
   * @param {String} itag - tag name
   */
  function SubscriberGroupProperty(itag) {
    SubscriberGroup.call(this, itag, Definition.tagType.Property);
  }

  SubscriberGroupProperty.prototype = Object.create(SubscriberGroup.prototype);
  SubscriberGroupProperty.prototype.constructor = SubscriberGroupProperty;

  SubscriberGroupProperty.prototype.adviseData = function (plctag) {
    emosWS.sendAdviseProperty(plctag.plc, plctag.tag, this.callback);
  };

  /**
   * Manages subscribers for an IO Object PLC
   * @class
   * @alias SubscriberGroupIOObjectPLC
   * @memberof core.SubscriberGroup
   * @extends core.SubscriberGroup
   * @param {String} itag - tag name
   */
  function SubscriberGroupIOObjectPLC(itag) {
    this.messages = {
      io: null,
      property: null,
    };

    this.UNKOWN = "???";
    this.UNDEFINED = "UNDEFINED";

    this.Temperature = {
      CELSIUS: {
        symbol: ["C", "\u00BA" + "C", "\u00B0" + "C"],
        convertTo: {
          FAHRENHEIT: this.CtoF.bind(this),
          KELVIN: this.CtoK.bind(this),
          RANKINE: this.CtoR.bind(this),
          UNDEFINED: this.toItSelf,
        },
      },
      FAHRENHEIT: {
        symbol: ["F", "\u00BA" + "F", "\u00B0" + "F"],
        convertTo: {
          CELSIUS: this.FtoC.bind(this),
          KELVIN: this.FtoK.bind(this),
          RANKINE: this.FtoR.bind(this),
          UNDEFINED: this.toItSelf,
        },
      },
      KELVIN: {
        symbol: ["K", "\u00BA" + "K", "\u00B0" + "K"],
        convertTo: {
          CELSIUS: this.KtoC.bind(this),
          FAHRENHEIT: this.KtoF.bind(this),
          RANKINE: this.KtoR.bind(this),
          UNDEFINED: this.toItSelf,
        },
      },
      RANKINE: {
        symbol: ["R", "\u00BA" + "R", "\u00B0" + "R"],
        convertTo: {
          CELSIUS: this.RtoC.bind(this),
          FAHRENHEIT: this.RtoF.bind(this),
          KELVIN: this.RtoK.bind(this),
          UNDEFINED: this.toItSelf,
        },
      },
      UNDEFINED: {
        symbol: [],
        convertTo: {
          CELSIUS: this.toItSelf,
          FAHRENHEIT: this.toItSelf,
          KELVIN: this.toItSelf,
          RANKINE: this.toItSelf,
          UNDEFINED: this.toItSelf,
        },
      },
    };

    var t = this.Temperature;
    this.tempArray = {
      ALL: t.CELSIUS.symbol.concat(t.FAHRENHEIT.symbol, t.KELVIN.symbol),
      METRIC: t.CELSIUS.symbol.concat(t.KELVIN.symbol),
      IMPERIAL: t.FAHRENHEIT.symbol,
    };

    this.value = null;
    this.plcValue = null;
    this.unit = null;
    this.unitSymbol = null;
    this.valueWithSymbol = null;
    this.factor = 1;
    this.precision = null;

    this.data = {
      UnitPLC: null,
      FactorPLC: 1,
      UnitMetric: null,
      FactorMetric: 1,
      UnitImperial: null,
      FactorImperial: 1,
      UnitLocale: null,
      FactorLocale: 1,
      UnitDefault: null,
      Precision: null,
      TextKey: null,
      InputMin: null,
      InputMax: null,
    };

    //determine the tag value is temperature
    //this.isTemperature = this.checkTemperature(UnitMetric, UnitImperial);
    this.isTemperature = false;

    this.setUnit(emosWS.getUnit());
    this.onIO = this.onIO.bind(this);
    this.onUnitChange = this.onUnitChange.bind(this);
    this.onProperty = this.onProperty.bind(this);
    this.isIDB = false;

    emosWS.addEventListener("unit", this.onUnitChange);
    SubscriberGroup.call(this, itag, Definition.tagType.IOObjectPLC);
  }

  SubscriberGroupIOObjectPLC.prototype = Object.create(
    SubscriberGroup.prototype
  );
  SubscriberGroupIOObjectPLC.prototype.constructor = SubscriberGroupIOObjectPLC;

  /**
   * Avise data
   */
  SubscriberGroupIOObjectPLC.prototype.adviseData = function () {
    emosWS.advise(this.tag, this.onIO, "", Definition.tagType.IO);
    emosWS.advise(this.tag, this.onProperty, "", Definition.tagType.Property);
  };

  /**
   * Check if received messages are null
   * @returns {Boolean} - whether received messages are null
   */
  SubscriberGroupIOObjectPLC.prototype.areMessagesNull = function () {
    return this.messages.io === null && this.messages.property === null;
  };

  /**
   * Handler when IO datachange comes
   * @param {type} msg - IO datachange
   */
  SubscriberGroupIOObjectPLC.prototype.onIO = function (msg) {
    this.messages.io = this.copy(msg);
    this.plcValue = parseFloat(
      typeof msg.value === "object" ? msg.value.value : msg.value
    );
    this.onDataChange();
  };

  /**
   * Handler when datachange from indexed database comes
   * @param {type} msg - datachange from indexed database
   */
  SubscriberGroupIOObjectPLC.prototype.onIDB = function (msg) {
    if (this.areMessagesNull()) {
      this.isIDB = true;
      this.onIO(msg);
      this.onProperty({ value: msg.properties });
      this.isIDB = false;
    }
  };

  /**
   * Handler when property datachange comes
   * @param {type} msg - property datachange
   */
  SubscriberGroupIOObjectPLC.prototype.onProperty = function (msg) {
    try {
      if (msg.value) {
        var v = (this.messages.property = msg.value),
          d = this.data;

        d.Precision = this.precision = parseInt(v.disp_prec);
        d.UnitMetric = v.met_baseunit;
        d.UnitImperial = v.imp_baseunit;
        d.UnitLocale = v.loc_baseunit;
        d.UnitPLC = v.plc_baseunit;
        d.FactorMetric = parseFloat(v.met_factor);
        d.FactorImperial = parseFloat(v.imp_factor);
        d.FactorLocale = parseFloat(v.loc_factor);
        d.FactorPLC = parseFloat(v.plc_factor);
        d.TextKey = v.textkey;
        d.InputMin = parseFloat(v.input_min);
        d.InputMax = parseFloat(v.input_max);
        this.isTemperature = this.checkTemperature(
          d.UnitMetric,
          d.UnitImperial
        );
        this.setUnit(this.unit);
        this.onDataChange();
      }
    } catch (err) {
      console.error(
        "[SubscriberGroupIOObjectPLC.prototype.onProperty] : " + err
      );
    }
  };

  /**
   * Handler when unit changes
   * @param {String} unitID - changed unit
   */
  SubscriberGroupIOObjectPLC.prototype.onUnitChange = function (unitID) {
    if (unitID !== this.unit) {
      this.setUnit(unitID);
      this.onDataChange(true);
    }
  };

  /**
   * Copy an object
   * @param {Object} obj - object to copy
   * @returns {Object} - copied object
   */
  SubscriberGroupIOObjectPLC.prototype.copy = function (obj) {
    var obj2 = {};
    for (var k in obj) obj2[k] = obj[k];
    return obj2;
  };

  /**
   * Handler when datachange comes
   */
  SubscriberGroupIOObjectPLC.prototype.onDataChange = function () {
    this.fromIDB = false;
    var msg = this.messages.io;
    if (msg) {
      this.value = this.getValue();
      msg.value = {
        isTemperature: this.isTemperature,
        value: this.value,
        plcValue: this.plcValue,
        unit: this.unit,
        unitSymbol: this.unitSymbol,
        valueWithSymbol: this.value + " " + this.unitSymbol,
        factor: this.factor,
        properties: this.messages.property,
      };

      if (!this.isIDB) {
        this.callback(msg);
      }
    }
  };

  /**
   * Send unadvise
   */
  SubscriberGroupIOObjectPLC.prototype.unadvise = function () {
    emosWS.unadvise(
      emosWS.getTagId(this.tag, Definition.tagType.IO),
      this.onIO
    );
    emosWS.unadvise(
      emosWS.getTagId(this.tag, Definition.tagType.Property),
      this.onProperty
    );
    emosWS.removeEventListener("unit", this.onUnitChange);
  };

  /**
   * Set unit
   * @param {String} unitID - unit to set
   */
  SubscriberGroupIOObjectPLC.prototype.setUnit = function (unitID) {
    var d = this.data;
    this.unit = unitID;
    switch (this.unit) {
      case emosWS.unitID.Metric:
        this.unitSymbol = d.UnitMetric;
        this.factor = d.FactorMetric;
        break;
      case emosWS.unitID.UnitImperial:
        this.unitSymbol = d.UnitImperial;
        this.factor = d.FactorImperial;
        break;
      case emosWS.unitID.UnitLocale:
        this.unitSymbol = d.UnitLocale;
        this.factor = d.FactorLocale;
        break;
      default:
        return "";
    }
  };

  /**
   * Check if tag is temperature
   * @param {String} UnitMetric - unit in metric
   * @param {String} UnitImperial - unit in imperial
   * @returns {Boolean} - whehter tag is temperature
   */
  SubscriberGroupIOObjectPLC.prototype.checkTemperature = function (
    UnitMetric,
    UnitImperial
  ) {
    var t = this.tempArray;
    return (
      (this.data.UnitPLC !== null && t.ALL.indexOf(this.data.UnitPLC) > -1) ||
      (this.data.UnitPLC === null &&
        (t.METRIC.indexOf(UnitMetric) > -1 ||
          t.IMPERIAL.indexOf(UnitImperial) > -1))
    );
  };

  /**
   * Get type of temperature
   * @param {String} Unit - unit
   * @returns {Object} type of temperature
   */
  SubscriberGroupIOObjectPLC.prototype.getTemperatureType = function (Unit) {
    try {
      var keys = Object.keys(this.Temperature);
      for (var i = 0, len = keys.length; i < len; i++) {
        var key = keys[i];
        if (this.Temperature[key].symbol.indexOf(Unit) > -1) return key;
      }
      return this.UNDEFINED;
    } catch (e) {
      console.error(
        "[SubscriberGroupIOObjectPLC.prototype.getTemperatureType] : " + e
      );
      return this.UNDEFINED;
    }
  };

  /**
   * Get value of tag
   * @returns {Object} value of tag
   */
  SubscriberGroupIOObjectPLC.prototype.getValue = function () {
    try {
      var d = this.data,
        v = null;
      if (this.isTemperature) {
        v = this.convertTemperature(this.plcValue, d.UnitPLC, this.unitSymbol);
      } else {
        v = this.plcValue * d.FactorPLC * this.factor;
      }
      if (!isNaN(d.Precision) && d.Precision !== null)
        v = v.toFixed(d.Precision);
      return v;
    } catch (e) {
      console.error("[SubscriberGroupIOObjectPLC.prototype.getValue] : " + e);
    }
  };

  /**
   * Get PLC value of a value to write
   * @param {Number} value - number to get
   * @returns {Number} PLC value
   */
  SubscriberGroupIOObjectPLC.prototype.getWriteValue = function (value) {
    var d = this.data;
    if (this.isTemperature) {
      return this.convertTemperature(value, this.unitSymbol, d.UnitPLC);
    } else {
      return value / (d.FactorPLC * this.factor);
    }
  };

  /**
   * Set value to tag
   * @param {Number} value to set
   */
  SubscriberGroupIOObjectPLC.prototype.setValue = function (value) {
    var writeValue = String(this.getWriteValue(value));

    if (writeValue !== this.plcValue) emosWS.poke(this.tag, writeValue);
  };

  /**
   * Convert a temparature value
   * @param {Number} value - value to convert
   * @param {String} fromUnit - origin unit
   * @param {type} toUnit - destination unit
   * @returns {Number} converted value
   */
  SubscriberGroupIOObjectPLC.prototype.convertTemperature = function (
    value,
    fromUnit,
    toUnit
  ) {
    try {
      var from = this.getTemperatureType(fromUnit),
        to = this.getTemperatureType(toUnit);
      return from === to ? value : this.Temperature[from].convertTo[to](value);
    } catch (e) {
      console.error(
        "[SubscriberGroupIOObjectPLC.prototype.convertTemperature] : " + e
      );
      return value;
    }
  };

  /**
   * Convert Celsius to Fahrenheit
   * @param {Number} - Celsius number
   * @returns {Number} - Fahrenheit number
   */
  SubscriberGroupIOObjectPLC.prototype.CtoF = function (c) {
    return c * 1.8 + 32;
  };

  /**
   * Convert Celsius to Kelvin
   * @param {Number} - Celsius number
   * @returns {Number} - Kelvin number
   */
  SubscriberGroupIOObjectPLC.prototype.CtoK = function (c) {
    return c + 273.15;
  };

  /**
   * Convert Celsius to R
   * @param {Number} - Celsius number
   * @returns {Number} - R number
   */
  SubscriberGroupIOObjectPLC.prototype.CtoR = function (c) {
    return this.KtoR(this.CtoK(c));
  };

  /**
   * Convert Fahrenheit to Celsius
   * @param {Number} - Fahrenheit number
   * @returns {Number} - Celsius number
   */
  SubscriberGroupIOObjectPLC.prototype.FtoC = function (f) {
    return (f - 32) / 1.8;
  };

  /**
   * Convert Fahrenheit to Kelvin
   * @param {Number} - Fahrenheit number
   * @returns {Number} - Kelvin number
   */
  SubscriberGroupIOObjectPLC.prototype.FtoK = function (f) {
    return (f - 32) / 1.8 + 273.15;
  };

  /**
   * Convert Fahrenheit to R
   * @param {Number} - Fahrenheit number
   * @returns {Number} - R number
   */
  SubscriberGroupIOObjectPLC.prototype.FtoR = function (f) {
    return this.KtoR(this.FtoK(f));
  };

  /**
   * Convert Kelvin to Celsius
   * @param {Number} - Kelvin number
   * @returns {Number} - Celsius number
   */
  SubscriberGroupIOObjectPLC.prototype.KtoC = function (k) {
    return k - 273.15;
  };

  /**
   * Convert Kelvin to Fahrenheit
   * @param {Number} - Kelvin number
   * @returns {Number} - Celsius number
   */
  SubscriberGroupIOObjectPLC.prototype.KtoF = function (k) {
    return (k - 273.15) * 1.8 + 32;
  };

  /**
   * Convert Kelvin to R
   * @param {Number} - Kelvin number
   * @returns {Number} - R number
   */
  SubscriberGroupIOObjectPLC.prototype.KtoR = function (k) {
    return (k * 9) / 5;
  };

  /**
   * Convert R to Kelvin
   * @param {Number} - R number
   * @returns {Number} - Kelvin number
   */
  SubscriberGroupIOObjectPLC.prototype.RtoK = function (r) {
    return (r * 5) / 9;
  };

  /**
   * Convert R to Celsius
   * @param {Number} - R number
   * @returns {Number} - Celsius number
   */
  SubscriberGroupIOObjectPLC.prototype.RtoC = function (r) {
    return this.KtoC(this.RtoK(r));
  };

  /**
   * Convert R to Fahrenheit
   * @param {Number} - R number
   * @returns {Number} - Fahrenheit number
   */
  SubscriberGroupIOObjectPLC.prototype.RtoF = function (r) {
    return this.KtoF(this.RtoK(r));
  };

  /**
   * Convert to itself
   * @param {Number} -  a number
   * @returns {Number} - a number
   */
  SubscriberGroupIOObjectPLC.prototype.toItSelf = function (v) {
    return v;
  };

  /**
   * Manages subscribers for an IO Object
   *
   * @class
   * @alias SubscriberGroupIOObject
   * @memberof core.SubscriberGroup
   * @extends core.SubscriberGroup
   * @param {String} itag - tag name
   * @param {Object} iTagType=emosWS.tagType.IO - type of the topic, either of predefined options: <br>
   *                  emosWS.tagType.IO<br>
   *                  emosWS.tagType.IOAlarm<br>
   *                  emosWS.tagType.Alarm<br>
   *                  emosWS.tagType.AlarmText<br>
   *                  emosWS.tagType.Diagnosis<br>
   *                  emosWS.tagType.Property<br>
   *                  emosWS.tagType.IOObject<br>
   *                  emosWS.tagType.Text<br>
   *                  emosWS.tagType.IOObjectPLC
   * @param {String} UnitMetric - unit of tag in metric
   * @param {Number} FactorMetric - the factor of tag in metric
   * @param {String} UnitImperial - unit of tag in imperial
   * @param {Number} FactorImperial - the factor of tag in imperial
   * @param {String} UnitLocale - unit of tag in locale
   * @param {Number} FactorLocale - the factor of tag in locale
   * @param {String} UnitDefault - default unit of tag
   * @param {Number} Precision - the precision of tag value (how many digit after comma)
   * @param {Number} Stretch - the stretch of tag value
   * @param {Number} Offset - the offset of tag value
   */
  function SubscriberGroupIOObject(
    itag,
    iTagType,
    UnitMetric,
    FactorMetric,
    UnitImperial,
    FactorImperial,
    UnitLocale,
    FactorLocale,
    UnitDefault,
    Precision,
    Stretch,
    Offset
  ) {
    this.tag = itag;
    this.value = null;
    this.oValue = null;
    this.unit = null;
    this.unitSymbol = null;
    this.properties = null;
    this.IOObjectPLC = null;

    if (typeof Offset === "undefined") {
      this.offset = 0;
      this.factor = 1;
    } else {
      this.offset = Offset;
      this.factor = FactorMetric;
    }

    this.data = {
      UnitPLC: null,
      UnitMetric: UnitMetric,
      FactorMetric: parseFloat(FactorMetric),
      UnitImperial: UnitImperial,
      FactorImperial: parseFloat(FactorImperial),
      UnitLocale: UnitLocale,
      FactorLocale: parseFloat(FactorLocale),
      UnitDefault: UnitDefault,
      Precision: parseInt(Precision),
      Stretch: parseInt(Stretch),
      TextKey: null,
      InputMin: null,
      InputMax: null,
    };

    this.setUnit(emosWS.getUnit());
    this.onDataChange = this.onDataChange.bind(this);
    SubscriberGroup.call(this, itag, Definition.tagType.IOObject);
    this.tagId = this.getTagId(
      itag,
      iTagType,
      UnitMetric,
      FactorMetric,
      UnitImperial,
      FactorImperial,
      UnitLocale,
      FactorLocale,
      UnitDefault,
      Precision,
      Stretch,
      Offset
    );
    this.onDataChange();
  }

  SubscriberGroupIOObject.prototype = Object.create(SubscriberGroup.prototype);
  SubscriberGroupIOObject.prototype.constructor = SubscriberGroupIOObject;

  /**
   * Get id of tag
   *
   * @param {String} tag - tag name
   * @param {Object} iTagType - type of the topic, either of predefined options: <br>
   * @param {String} UnitMetric - unit of tag in metric
   * @param {Number} FactorMetric - the factor of tag in metric
   * @param {String} UnitImperial - unit of tag in imperial
   * @param {Number} FactorImperial - the factor of tag in imperial
   * @param {String} UnitLocale - unit of tag in locale
   * @param {Number} FactorLocale - the factor of tag in locale
   * @param {String} UnitDefault - default unit of tag
   * @param {Number} Precision - the precision of tag value (how many digit after comma)
   * @param {Number} Stretch - the stretch of tag value
   * @param {Number} Offset - the offset of tag value
   * @returns {String} id of tag
   */
  SubscriberGroupIOObject.prototype.getTagId = function (
    tag,
    iTagType,
    UnitMetric,
    FactorMetric,
    UnitImperial,
    FactorImperial,
    UnitLocale,
    FactorLocale,
    UnitDefault,
    Precision,
    Stretch,
    Offset
  ) {
    var id = "";
    [
      tag,
      UnitMetric,
      FactorMetric,
      UnitImperial,
      FactorImperial,
      UnitLocale,
      FactorLocale,
      UnitDefault,
      Precision,
      Stretch,
      Offset,
    ].forEach(function (item) {
      id += typeof item === "undefined" ? "" : item + "_";
    });
    return id + iTagType.id;
  };

  /**
   * Avise data
   */
  SubscriberGroupIOObject.prototype.adviseData = function () {
    this.IOObjectPLC = emosWS.advise(
      this.tag,
      this.onDataChange,
      "",
      Definition.tagType.IOObjectPLC
    );
  };

  /**
   * set unit
   */
  SubscriberGroupIOObject.prototype.setUnit =
    SubscriberGroupIOObjectPLC.prototype.setUnit;

  /**
   * copy
   */
  SubscriberGroupIOObject.prototype.copy =
    SubscriberGroupIOObjectPLC.prototype.copy;

  /**
   * Handler when datachange comes
   * @param {Object} msg - datachange
   */
  SubscriberGroupIOObject.prototype.onDataChange = function (msg) {
    try {
      var callbackMessage = null;
      if (msg) {
        var mv = msg.value;
        this.properties = mv.properties;
        this.oValue = mv.value;
        callbackMessage = this.copy(msg);
        if (this.properties) {
          callbackMessage.value = this.copy(msg.value);
          var d = this.data;
          this.value =
            isNaN(d.Stretch) || d.Stretch === null
              ? this.oValue
              : this.toStretch(parseFloat(this.oValue), d.Stretch);
          callbackMessage.value.value = this.value;
        } else {
          this.setUnit(mv.unit);
          this.value = this.getValue();
          callbackMessage = this.copy(msg);
          callbackMessage.value = {
            isTemperature: false,
            value: this.value,
            plcValue: mv.plcValue,
            unit: this.unit,
            unitSymbol: this.unitSymbol,
            valueWithSymbol: this.value + " " + this.unitSymbol,
            factor: this.factor,
            properties: null,
          };
        }
      } else {
        this.value = null;
        callbackMessage = {
          quality: 0,
          value: {
            isTemperature: false,
            value: this.value,
            plcValue: null,
            unit: this.unit,
            unitSymbol: this.unitSymbol,
            valueWithSymbol: this.value + " " + this.unitSymbol,
            factor: this.factor,
            properties: null,
          },
        };
      }

      try {
        this.callback(callbackMessage);
      } catch (e) {
        console.error("[SubscriberGroupIOObject onDataChange callback] : " + e);
      }
    } catch (e) {
      console.error("[SubscriberGroupIOObject onDataChange] : " + e);
    }
  };

  /**
   * Get current value of tag
   * @returns {Object} value of tag
   */
  SubscriberGroupIOObject.prototype.getValue = function () {
    try {
      var d = this.data,
        v = this.oValue * this.factor + this.offset;
      if (!isNaN(d.Precision) && d.Precision !== null)
        v = v.toFixed(d.Precision);
      if (!isNaN(d.Stretch) && d.Stretch !== null)
        v = this.toStretch(parseFloat(v), d.Stretch);
      return v;
    } catch (e) {
      console.error("[SubscriberGroupIOObject.getValue] : " + e);
    }
  };

  /**
   * Set value of tag
   * @param {Object} value - value to set
   */
  SubscriberGroupIOObject.prototype.setValue = function (value) {
    if (this.properties) {
      emosWS.pokeExt(this.tag, value);
    } else {
      var d = this.data,
        writeValue = (value - this.offset) / this.factor;

      emosWS.poke(this.tag, writeValue);
    }
  };

  /**
   * Send unvise message to the server
   */
  SubscriberGroupIOObject.prototype.unadvise = function () {
    emosWS.unadvise(
      emosWS.getTagId(this.tag, Definition.tagType.SubscriberGroupIOObject),
      this.onDataChange
    );
  };

  /**
   * Get stretch of anumber
   * @param {Number} number - number to get
   * @param {Number} stretch - length of strech
   * @returns {Number} formatted number
   */
  SubscriberGroupIOObject.prototype.toStretch = function (number, stretch) {
    var isInteger = number % 1 === 0,
      numberString = number.toString(),
      length = numberString.length - (isInteger ? 0 : 1);

    if (length > stretch) {
      var intNum = parseInt(number),
        len = intNum.toString().length;
      if (len >= stretch) {
        return intNum;
      } else {
        return parseFloat(numberString.substr(0, stretch + 1));
      }
    } else {
      return number;
    }
  };

  /**
   * Manages subscribers for a language text
   *
   * @class
   * @alias SubscriberGroupText
   * @memberof core.SubscriberGroup
   * @extends core.SubscriberGroup
   * @param {String} textID - id of text
   */
  function SubscriberGroupText(
    textID,
    iTagType,
    UnitMetric,
    FactorMetric,
    UnitImperial,
    FactorImperial,
    UnitLocale,
    FactorLocale,
    UnitDefault,
    Precision,
    Stretch,
    Offset,
    param
  ) {
    this.param = param;
    var rs = this.resolveTextId(textID);
    this.textID = rs.textID;
    this.type = rs.type;
    SubscriberGroup.call(
      this,
      this.getId(textID, param),
      Definition.tagType.Text
    );
    this.tagId = this.getTagId(
      textID,
      iTagType,
      UnitMetric,
      FactorMetric,
      UnitImperial,
      FactorImperial,
      UnitLocale,
      FactorLocale,
      UnitDefault,
      Precision,
      Stretch,
      Offset,
      param
    );
  }

  SubscriberGroupText.prototype = Object.create(SubscriberGroup.prototype);
  SubscriberGroupText.prototype.constructor = SubscriberGroupText;

  SubscriberGroupText.prototype.resolveTextId = function (textID) {
    var rs = {
      textID: textID,
      type: "name",
    };
    textID.replace(
      /^(.+)\.(name|short|message|description)$/,
      function (match, textID, type) {
        rs.textID = textID;
        rs.type = type;
      }
    );
    return rs;
  };

  SubscriberGroupText.prototype.getId = function (textID, param) {
    var rs = this.resolveTextId(textID);
    var id = rs.textID + "." + rs.type;
    if (param && param.plc) {
      if (param.data) {
        var opcID = param.data.OPCID;
        if (opcID) {
          //e.g. opcID = SS.X7451_SelBit1
          // then find the characterOfOPCLeaf
          opcID.replace(
            /^.*(.)7\d{3}(_.*)?$/,
            function (m, characterOfOPCLeaf) {
              param.characterOfOPCLeaf = characterOfOPCLeaf;
            }
          );
        }
      }
      id +=
        "[" +
        param.plc +
        "]" +
        (param.characterOfOPCLeaf ? "[" + param.characterOfOPCLeaf + "]" : "");
    }

    return id;
  };

  SubscriberGroupText.prototype.getTagId = function (
    textID,
    iTagType,
    UnitMetric,
    FactorMetric,
    UnitImperial,
    FactorImperial,
    UnitLocale,
    FactorLocale,
    UnitDefault,
    Precision,
    Stretch,
    Offset,
    param
  ) {
    return this.getId(textID, param) + iTagType.id;
  };

  SubscriberGroupText.prototype.adviseData = function () {
    emosWS.sendAdviseTextDirect(
      this.textID,
      this.type,
      this.callback,
      this.param
    );
  };

  /**
   * Provides all definitions of emos.js
   *
   * @class
   * @alias Definition
   * @memberof core
   */
  var Definition = {
    /**
     * Enum for language id.
     * @member {Object} languageID
     */
    languageID: {
      DECP_German: { value: 70, caption: "Deutsch", id: "de" },
      DECP_English: { value: 71, caption: "English", id: "en" },
      DECP_Spanish: { value: 72, caption: "EspaÃ±ol", id: "es" },
      DECP_Portuguese: { value: 73, caption: "PortuguÃªs", id: "pt" },
      DECP_French: { value: 74, caption: "FranÃ§ais", id: "fr" },
      DECP_Chinese: { value: 75, caption: "ä¸­å½", id: "cn" },
      DECP_Local1: { value: 76, caption: "Local1", id: "l1" },
      DECP_Local2: { value: 77, caption: "Local2", id: "l2" },
    },
    /**
     * Enum for unit id.
     * @member {Object} unitID
     */
    unitID: {
      Metric: 0,
      UnitImperial: 1,
      UnitLocale: 2,
    },
    /**
     * Enum for language tagType.
     * @member {Object} tagType
     */
    tagType: {
      IO: { value: 0, id: ".IO", subscriberGroup: SubscriberGroupIO },
      IOAlarm: {
        value: 1,
        id: ".IOAlarm",
        subscriberGroup: SubscriberGroupIOAlarm,
      },
      Alarm: { value: 2, id: ".Alarm", subscriberGroup: SubscriberGroupAlarm },
      AlarmText: {
        value: 3,
        id: ".AlarmText",
        subscriberGroup: SubscriberGroupAlarmText,
      },
      Diagnosis: {
        value: 4,
        id: ".Diagnosis",
        subscriberGroup: SubscriberGroupDiagnosis,
      },
      Property: {
        value: 5,
        id: ".Property",
        subscriberGroup: SubscriberGroupProperty,
      },
      IOObject: {
        value: 6,
        id: ".Object",
        subscriberGroup: SubscriberGroupIOObject,
      },
      Text: { value: 7, id: ".Text", subscriberGroup: SubscriberGroupText },
      IOObjectPLC: {
        value: 8,
        id: ".ObjectPLC",
        subscriberGroup: SubscriberGroupIOObjectPLC,
      },
    },
  };

  /**
   * Stores information of a object want to register to an
   * SubScriberGroup to listen for datachange event
   *
   * @class
   * @alias Subscriber
   * @memberof core
   * @param {Function} callback - is fired when new datachange comes
   * @param {Object} param - is extra data want to passed to the callback function
   */
  function Subscriber(callback, param) {
    //console.log("Subscriber: " + callback);
    this.callback = callback;
    this.param = param;
  }

  /* Compare two subscriber if they are equal
   *
   * @param {Subscriber} otherSubscriber
   * @returns {Boolean}
   */
  Subscriber.prototype.equals = function (otherSubscriber) {
    if (this.callback === otherSubscriber.callback) {
      if (this.param === otherSubscriber.param) return true;
    } else return false;
    //return () && (this.param === otherSubscriber.param);
  };
  Subscriber.prototype.checkEqual = function (callback, param) {
    if (this.callback === callback) {
      if (this.param === param) return true;
    } else return false;
    //return () && (this.param === otherSubscriber.param);
  };

  /**
   * Manages a (E-Script) global variable
   *
   * @class
   * @alias GlobalVariable
   * @memberof core
   * @param {type} configuration - value of global variable
   */
  function GlobalVariable(configuration) {
    emosWS.gvNumber++;
    emosWS.globalVariables.push(this);

    this.myValue = configuration;
    this.name = null;
    this.subscribers = [];
    this.previousSubscriber = null;
    this.init();

    emosWS.dispatchEvent({ type: "HMIgv" });
  }

  GlobalVariable.prototype.init = function () {
    Object.defineProperty(this, "value", {
      get: this._getValue.bind(this),
      set: this._setValue.bind(this),
    });
  };

  GlobalVariable.prototype._getValue = function () {
    if (emosWS.animationData.stillInit) {
      var subscriber = new Subscriber(
        emosWS.animationData.callback.initialize,
        emosWS.animationData.param
      );
      this.register(subscriber);
      this.previousSubscriber = subscriber;
    }
    return this.myValue;
  };

  GlobalVariable.prototype._setValue = function (val) {
    this.myValue = val;
    if (emosWS.animationData.globalVariablesSetCallBackAble) {
      if (!emosWS.animationData.stillInit) {
        emosWS.addGlobalVariablesChange(
          this.informListeners.bind(this, emosWS.clickData.event)
        );
      }
    }
  };

  GlobalVariable.prototype.toString = function () {
    return this.myValue;
  };

  GlobalVariable.prototype.toDebugString = function () {
    return (
      "name:\t" +
      this.getName() +
      "\n" +
      "value:\t" +
      this.myValue +
      "\n" +
      "listeners:\t" +
      this.subscribers.length +
      "\n"
    );
  };

  GlobalVariable.prototype.informListeners = function (e) {
    try {
      //prevent recursive call
      if (emosWS.currentGlobalVariable && emosWS.currentGlobalVariable === this)
        return;

      //console.info("[GlobalVariable = ", this.myValue, "] informs listeners = ", this.subscribers.length);
      for (var i = 0, len = this.subscribers.length; i < len; i++) {
        var subscriber = this.subscribers[i];
        try {
          subscriber.callback(this.myValue, subscriber.param, e);
        } catch (er) {
          console.error("[GlobalVariable informListeners] :", er);
        }
      }
      emosWS.currentGlobalVariable = null;
    } catch (err) {
      console.error("[GlobalVariable informListeners] :", err);
    }
  };

  GlobalVariable.prototype.register = function (subscriber) {
    try {
      //console.log(this.myValue + " has " + this.subscribers.length + " subscribers!");
      for (var i = 0, len = this.subscribers.length; i < len; i++) {
        var subscriberB = this.subscribers[i];
        if (subscriber.equals(subscriberB)) return;
      }
      this.subscribers.push(subscriber);
      //this.subscribers.unshift(subscriber);
    } catch (err) {
      console.error("[GlobalVariable register] :", err);
    }
  };

  GlobalVariable.prototype.unregister = function (callback) {
    this.subscribers.forEach(
      function (subscriber, index) {
        if (subscriber.callback === callback) {
          this.subscribers.splice(index, 1);
          subscriber = null;
          return;
        }
      }.bind(this)
    );
  };

  GlobalVariable.prototype.getName = function () {
    if (this.name) return this.name;

    for (var name in window) {
      try {
        if (window[name] === this) {
          this.name = name;
          return name;
        }
      } catch (e) {}
    }
    return null;
  };

  GlobalVariable.prototype.setValue = function (value) {
    value = this.convertValue(value);
    this.setDirectValue(value);
  };

  GlobalVariable.prototype.setDirectValue = function (value) {
    if (value !== this.myValue) {
      emosWS.listenGlobalVariablesChange();
      this.value = value;
      //emosWS.DS_HMI.SetVariable(this.name, value, true);
      emosWS.callbackGlobalVariablesChange();
    }
  };

  GlobalVariable.prototype.convertValue = function (value) {
    var type = typeof this.myValue;
    var type2 = typeof value;
    if (type === type2) {
      return value;
    } else {
      switch (type) {
        case "boolean":
          return type2 === "string" ? GetAsBoolean(value) : Boolean(value);

        case "number":
          return Number(value);

        //as string
        default:
          return value;
      }
    }
  };

  window.GlobalVariable = GlobalVariable; //temp

  /**
   * Manages a (E-Script) global variable
   *
   * @class
   * @alias GlobalVariable
   * @memberof core
   * @param {type} configuration - value of global variable
   */
  function GlobalVariable(configuration) {
    emosWS.gvNumber++;
    emosWS.globalVariables.push(this);

    this.myValue = configuration;
    this.name = null;
    this.subscribers = [];
    this.previousSubscriber = null;
    this.init();

    emosWS.dispatchEvent({ type: "HMIgv" });
  }

  GlobalVariable.prototype.init = function () {
    Object.defineProperty(this, "value", {
      get: this._getValue.bind(this),
      set: this._setValue.bind(this),
    });
  };

  GlobalVariable.prototype._getValue = function () {
    if (emosWS.animationData.stillInit) {
      var subscriber = new Subscriber(
        emosWS.animationData.callback.initialize,
        emosWS.animationData.param
      );
      this.register(subscriber);
      this.previousSubscriber = subscriber;
    }
    return this.myValue;
  };

  GlobalVariable.prototype._setValue = function (val) {
    this.myValue = val;
    if (emosWS.animationData.globalVariablesSetCallBackAble) {
      if (!emosWS.animationData.stillInit) {
        emosWS.addGlobalVariablesChange(
          this.informListeners.bind(this, emosWS.clickData.event)
        );
      }
    }
  };

  GlobalVariable.prototype.toString = function () {
    return this.myValue;
  };

  GlobalVariable.prototype.toDebugString = function () {
    return (
      "name:\t" +
      this.getName() +
      "\n" +
      "value:\t" +
      this.myValue +
      "\n" +
      "listeners:\t" +
      this.subscribers.length +
      "\n"
    );
  };

  GlobalVariable.prototype.informListeners = function (e) {
    try {
      //prevent recursive call
      if (emosWS.currentGlobalVariable && emosWS.currentGlobalVariable === this)
        return;

      //console.info("[GlobalVariable = ", this.myValue, "] informs listeners = ", this.subscribers.length);
      for (var i = 0, len = this.subscribers.length; i < len; i++) {
        var subscriber = this.subscribers[i];
        try {
          subscriber.callback(this.myValue, subscriber.param, e);
        } catch (er) {
          console.error("[GlobalVariable informListeners] :", er);
        }
      }
      emosWS.currentGlobalVariable = null;
    } catch (err) {
      console.error("[GlobalVariable informListeners] :", err);
    }
  };

  GlobalVariable.prototype.register = function (subscriber) {
    try {
      //console.log(this.myValue + " has " + this.subscribers.length + " subscribers!");
      for (var i = 0, len = this.subscribers.length; i < len; i++) {
        var subscriberB = this.subscribers[i];
        if (subscriber.equals(subscriberB)) return;
      }
      this.subscribers.push(subscriber);
      //this.subscribers.unshift(subscriber);
    } catch (err) {
      console.error("[GlobalVariable register] :", err);
    }
  };

  GlobalVariable.prototype.unregister = function (callback) {
    this.subscribers.forEach(
      function (subscriber, index) {
        if (subscriber.callback === callback) {
          this.subscribers.splice(index, 1);
          subscriber = null;
          return;
        }
      }.bind(this)
    );
  };

  GlobalVariable.prototype.getName = function () {
    if (this.name) return this.name;

    for (var name in window) {
      try {
        if (window[name] === this) {
          this.name = name;
          return name;
        }
      } catch (e) {}
    }
    return null;
  };

  GlobalVariable.prototype.setValue = function (value) {
    value = this.convertValue(value);
    this.setDirectValue(value);
  };

  GlobalVariable.prototype.setDirectValue = function (value) {
    if (value !== this.myValue) {
      emosWS.listenGlobalVariablesChange();
      this.value = value;
      //emosWS.DS_HMI.SetVariable(this.name, value, true);
      emosWS.callbackGlobalVariablesChange();
    }
  };

  GlobalVariable.prototype.convertValue = function (value) {
    var type = typeof this.myValue;
    var type2 = typeof value;
    if (type === type2) {
      return value;
    } else {
      switch (type) {
        case "boolean":
          return type2 === "string" ? GetAsBoolean(value) : Boolean(value);

        case "number":
          return Number(value);

        //as string
        default:
          return value;
      }
    }
  };

  window.GlobalVariable = GlobalVariable; //temp

  /**
   * Presents a application global variable.
   * This variable provides a mechanism to retrieve/store the data at server. The data is stored in a specific json file inside key.
   *
   * @class AppVariable
   * @alias AppVariable
   * @memberof core
   * @extends core.GlobalVariable
   * @param {String} topic - name of topic
   * @param {String} key - name of key
   * @param {String|Number|Object} defaultValue - default value of key
   *
   * @example <caption>1. Declare a variable <b>App1PLC</b>, which is stored in <b>App1.json</b> by key <b>PLC</b>, with default value <b>MyPLC</b> </caption>
   * var App1PLC = new AppVariable("App1", "PLC", "MyPLC");
   */
  function AppVariable(topic, key, defaultValue) {
    this.APP_VAR = "$APPVAR";
    this.DATACHANGE_FROM_CODE = 0;
    this.DATACHANGE_FROM_LOCALSTORAGE = 1;
    this.DATACHANGE_FROM_SERVERSTORAGE = 2;

    /**
     * name of json file at server to store the variable data. If this json file, does not exist, the server will create it
     *
     * @name core.AppVariable#topic
     * @type String
     */
    this.topic = topic;

    /**
     * Key of the variable
     *
     * @name core.AppVariable#key
     * @type String
     */
    this.key = key;

    /**
     * Default value of the variable
     *
     * @name core.AppVariable#defaultValue
     * @type String|Number|Object
     */
    this.defaultValue = defaultValue;

    this.keyLS = this.APP_VAR + "." + topic + "." + key;
    this.type = typeof defaultValue;
    this.serverStorage = emosWS.getServerStorage(topic);
    GlobalVariable.call(this, defaultValue);
  }

  AppVariable.prototype = Object.create(GlobalVariable.prototype);
  AppVariable.prototype.constructor = AppVariable;

  AppVariable.prototype.init = function () {
    /**
     * Value of the variable
     *
     * @name core.AppVariable#value
     * @type String|Number|Object
     */
    Object.defineProperty(this, "value", {
      get: this._getValue.bind(this),
      set: this.setMyValue.bind(this),
    });

    //listen to storage event from LocalStorage
    window.addEventListener(
      "storage",
      this.onLocalStorageChange.bind(this),
      false
    );

    //First : set value from local storage, if not available, set by default value
    this.myValue = undefined;
    this.setMyValue(this.getLocalStorageValue() || this.defaultValue);

    //Then set value from server storage
    this.serverStorage.getItem(
      this.key,
      function (value) {
        if (typeof value === "undefined") {
          this.setServerStorageValue(this.myValue);
        } else {
          this.onDataChange(value, this.DATACHANGE_FROM_SERVERSTORAGE);
        }
        this.serverStorageValue = this.myValue;
      }.bind(this)
    );
  };

  AppVariable.prototype.onLocalStorageChange = function (storageEvent) {
    if (storageEvent.key === this.keyLS) {
      this.onDataChange(
        storageEvent.newValue,
        this.DATACHANGE_FROM_LOCALSTORAGE
      );
    }
  };

  AppVariable.prototype.onDataChange = function (newValue, datachangeFROM) {
    console.log("datachangeFROM: " + datachangeFROM);
    console.log(newValue);
    var value =
      datachangeFROM === this.DATACHANGE_FROM_LOCALSTORAGE
        ? this.getValueFromString(newValue)
        : newValue;
    if (!this.valuesEqual(value, this.myValue)) {
      this.setMyValue(value, datachangeFROM);
    }
  };

  AppVariable.prototype.valuesEqual = function (v1, v2) {
    try {
      return this.type === "object"
        ? JSON.stringify(v1) === JSON.stringify(v2)
        : v1 === v2;
    } catch (e) {
      console.log(e);
    }
    return false;
  };

  AppVariable.prototype.setMyValue = function (value, datachangeFROM) {
    if (value !== this.myValue) {
      this.setValue(value);
      if (datachangeFROM !== this.DATACHANGE_FROM_LOCALSTORAGE) {
        this.setLocalStorageValue(value);
        if (
          datachangeFROM !== this.DATACHANGE_FROM_SERVERSTORAGE &&
          typeof this.serverStorageValue !== "undefined"
        ) {
          this.setServerStorageValue(value);
        }
      }
    }
  };

  AppVariable.prototype.setDirectValue = function (value) {
    if (value !== this.myValue) {
      emosWS.listenGlobalVariablesChange();
      this._setValue(value);
      emosWS.callbackGlobalVariablesChange();
    }
  };

  AppVariable.prototype.getValueFromString = function (s) {
    switch (this.type) {
      case "boolean":
        return s === "true";

      case "number":
        return Number(s);

      case "object":
        return JSON.parse(s);

      default:
        return s;
    }
  };

  AppVariable.prototype.getLocalStorageValue = function () {
    return this.getValueFromString(localStorage.getItem(this.keyLS));
  };

  AppVariable.prototype.setLocalStorageValue = function (value) {
    if (this.type === "object") value = JSON.stringify(value);
    localStorage.setItem(this.keyLS, value);
  };

  AppVariable.prototype.setServerStorageValue = function (value) {
    this.serverStorage.setItem(this.key, value);
  };

  AppVariable.prototype.shareFunctionsTo = function (prototype) {
    try {
      [
        "getLocalStorageValue",
        "setLocalStorageValue",
        "setDirectValue",
        "getValueFromString",
        "valuesEqual",
      ].forEach(
        function (functionName) {
          prototype[functionName] = this.constructor.prototype[functionName];
        }.bind(this)
      );
    } catch (e) {
      console.log(e);
    }
  };

  window.AppVariable = AppVariable;

  /**
   * Manages a multiple sessions global variable
   *
   * @class
   * @alias SessionsVariable
   * @memberof core
   * @extends core.GlobalVariable
   * @param {Object} defaultValue - default value of key
   */
  function SessionsVariable(defaultValue) {
    this.SESSIONS_VAR = "$SESSIONSVAR";
    this.defaultValue = defaultValue;
    this.type = typeof defaultValue;
    GlobalVariable.call(this, defaultValue);
  }

  SessionsVariable.prototype = Object.create(GlobalVariable.prototype);
  SessionsVariable.prototype.constructor = SessionsVariable;
  AppVariable.prototype.shareFunctionsTo(SessionsVariable.prototype);

  SessionsVariable.prototype.init = function () {
    Object.defineProperty(this, "value", {
      get: this._getValue.bind(this),
      set: this.setMyValue.bind(this),
    });

    //listen to storage event from LocalStorage
    window.addEventListener(
      "storage",
      this.onLocalStorageChange.bind(this),
      false
    );

    //set value from local storage, if not available, set by default value
    setTimeout(
      function () {
        this.keyLS = this.SESSIONS_VAR + "." + this.getName();
        this.myValue = undefined;
        this.setMyValue(this.getLocalStorageValue() || this.defaultValue);
      }.bind(this),
      1
    );
  };

  SessionsVariable.prototype.onLocalStorageChange = function (storageEvent) {
    if (storageEvent.key === this.keyLS) {
      this.onDataChange(storageEvent.newValue, true);
    }
  };

  SessionsVariable.prototype.onDataChange = function (
    newValue,
    fromLocalStorage
  ) {
    console.log("fromLocalStorage: " + fromLocalStorage);
    console.log(newValue);
    var value = this.getValueFromString(newValue);
    if (!this.valuesEqual(value, this.myValue)) {
      this.setMyValue(value, fromLocalStorage);
    }
  };

  SessionsVariable.prototype.setMyValue = function (value, fromLocalStorage) {
    if (value !== this.myValue) {
      this.setValue(value);
      if (!fromLocalStorage) {
        this.setLocalStorageValue(value);
      }
    }
  };

  window.SessionsVariable = SessionsVariable;

  /**
   * Manages a (E-Script) in-out variable
   *
   * @class
   * @alias varInOut
   * @memberof core
   * @param {type} ivalue - value of in-out variable
   */
  function varInOut(ivalue) {
    var myValue = ivalue;
    this.toString = function () {
      return myValue;
    };
    Object.defineProperty(this, "value", {
      get: function () {
        return myValue;
      },
      set: function (val) {
        myValue = val;
      },
    });
  }

  /**
   * Provides functionalities for testing SVG Render
   *
   * @class
   * @alias testSVGRender
   * @memberof core
   * @param {Object} msg - msg to test
   */
  function ClientTest() {}

  ClientTest.prototype.testSVGRender = function (msg) {
    try {
      console.log("[Received TestSVGRender] : " + msg.value);
      var svgRender = JSON.parse(msg.value),
        id = svgRender.id,
        iWidth = svgRender.width,
        iHeight = svgRender.height,
        iSVG = svgRender.svg;

      console.log(
        "[         TestSVGRender] id=" +
          id +
          " / width=" +
          iWidth +
          " / height=" +
          iHeight +
          " / svg=" +
          iSVG
      );

      var canvas = document.createElement("canvas");
      document.body.appendChild(canvas);
      var context = canvas.getContext("2d");
      var image = new Image();
      image.src = iSVG;

      var sendImage = function (imageContent) {
        var generalMsg = {};
        generalMsg.type = "general";
        generalMsg.key = "SVGRenderResult";
        generalMsg.value = JSON.stringify({ id: id, image: imageContent });
        document.body.removeChild(canvas);
        emosWS.send(generalMsg);
      };

      var onerror = function () {
        try {
          context.canvas.width = 720;
          context.canvas.height = 540;
          context.font = "30px Arial";
          context.strokeText("SVG file has error!", 10, 50);
          var imageContent = "";
          imageContent = canvas.toDataURL("image/jpeg", 1.0);
          sendImage(imageContent);
        } catch (e) {
          console.log("onerror error: " + e);
        }
      };

      image.onload = function () {
        try {
          context.canvas.width = image.naturalWidth || iWidth;
          context.canvas.height = image.naturalHeight || iHeight;
          context.drawImage(image, 0, 0);
          var imageContent = "";
          try {
            imageContent = canvas.toDataURL("image/jpeg", 1.0);
          } catch (e) {
            console.log("canvas.toDataURL error: " + e);
            onerror();
          }
          sendImage(imageContent);
        } catch (e) {
          console.log("Image onload error: " + e);
          onerror();
        }
      };

      image.onerror = function () {
        onerror();
      };
    } catch (e) {
      console.log("testSVGRender error: " + e);
    }
  };

  /**
   * Manages an event in emos.js
   *
   * @class
   * @alias EventDispatcher
   * @memberof core
   */
  function EventDispatcher() {
    this._listeners = {};
  }

  EventDispatcher.prototype.addEventListener = function (type, listener) {
    var listeners = this._listeners;
    if (listeners[type] === undefined) {
      listeners[type] = [];
    }
    if (listeners[type].indexOf(listener) === -1) {
      listeners[type].push(listener);
    }
  };

  EventDispatcher.prototype.hasEventListener = function (type, listener) {
    var listeners = this._listeners;
    return (
      listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1
    );
  };

  EventDispatcher.prototype.removeEventListener = function (type, listener) {
    var listeners = this._listeners;
    var listenerArray = listeners[type];
    if (listenerArray !== undefined) {
      var index = listenerArray.indexOf(listener);
      if (index !== -1) {
        listenerArray.splice(index, 1);
      }
    }
  };

  EventDispatcher.prototype.dispatchEvent = function (event) {
    var listeners = this._listeners;
    var listenerArray = listeners[event.type];
    if (listenerArray !== undefined) {
      //event.target = this;
      var array = [];
      var length = listenerArray.length;
      for (var i = 0; i < length; i++) {
        array[i] = listenerArray[i];
      }
      for (var i = 0; i < length; i++) {
        try {
          array[i].call(this, event.message);
        } catch (e) {
          console.error("[dispatchEvent] :" + e);
        }
      }
    }
  };

  function BINDX(name) {
    this.name = name;
    window[name] = this;
    this.SLastSource = [];
    this.SQuality = 0; //0:bad, 192:good
    this.SSecurityGroupRF = null;
    this.SSecurityPlant = null;
    this.SSecurityUserRF = null;
    this.STextValue = null;
    this.SDataChange = null;

    var _STagname = null;
    Object.defineProperty(this, "STagname", {
      get: function () {
        return _STagname;
      },
      set: function (val) {
        _STagname = val;
        //nyi
      },
    });

    var _STextKey = null;
    Object.defineProperty(this, "STextKey", {
      get: function () {
        return _STextKey;
      },
      set: function (val) {
        _STextKey = val;
        //nyi
      },
    });

    var _SDiagLib = null;
    Object.defineProperty(this, "SDiagLib", {
      get: function () {
        return _SDiagLib;
      },
      set: function (val) {
        _SDiagLib = val;
        var params = val.split(";");
        new emosWS.ESDiagnosisWindow({
          conditionFunction: function () {
            return {
              DiagnosisLibID: parseInt(params[0]),
              PLC: params[1],
              ID: params[2],
              DiagnosisControl: params[3],
              GroupRightIndex: parseInt(params[4]),
              Enabled: true,
            };
          },
          PLACEHOLDER_USEHAND: true,
          PLACEHOLDER_USESTROKE: false,
          PLACEHOLDER_USEHIDE: false,
          STDPLACEHOLDER_SHAPENAME: "DuMmY",
        }).onClick();
        //nyi
      },
    });

    var _SValue = null;
    Object.defineProperty(this, "SValue", {
      get: function () {
        return _SValue;
      },
      set: function (val) {
        _SValue = val;
        //nyi
      },
    });

    var _SCommDiag = null;
    Object.defineProperty(this, "SCommDiag", {
      get: function () {
        return _SCommDiag;
      },
      set: function (val) {
        _SCommDiag = val;
        //nyi
      },
    });
  }

  BINDX.prototype.SAppendTag = function (Tagname) {
    //nyi
  };

  BINDX.prototype.SWriteTag = function (
    Tagname,
    Value,
    GroupRF,
    UserRF,
    Plant
  ) {
    //nyi
  };

  BINDX.prototype.SReadTag = function (Tagname, Value, Quality, LastSource) {
    //nyi
  };

  BINDX.prototype.SAddHost = function (
    Host,
    AlarmServer,
    IOManager,
    TrendServer
  ) {
    //nyi
  };

  BINDX.prototype.SRemoveHost = function (
    Host,
    AlarmServer,
    IOManager,
    TrendServer
  ) {
    //nyi
  };

  /**
   * Provides global blinking service for emos.hs
   *
   * @class
   * @alias BlinkInterval
   * @memberof core
   * @param {Number} intervalLength - blink interval in ms
   */
  function BlinkInterval(intervalLength) {
    this.intervalLength = intervalLength; //in ms
    this.listeners = [];
    this.queueActive = [];
    this.queueInactive = [];
    this.interval = null;
    this.active = true;
  }

  BlinkInterval.prototype.addListener = function (listener, active) {
    if (
      this.listeners.indexOf(listener) === -1 &&
      this.queueActive.indexOf(listener) === -1 &&
      this.queueInactive.indexOf(listener) === -1
    ) {
      if (active) {
        this.queueActive.push(listener);
      } else {
        this.queueInactive.push(listener);
      }
    }
    this.refresh();
  };

  BlinkInterval.prototype.GBS = function () {
    if (emosWS.animationData.stillInit) {
      if (emosWS.animationData.callback)
        this.addListener(
          emosWS.animationData.callback.datachangeListener,
          true
        );
    }
    return this.active;
  };

  BlinkInterval.prototype.sync = function () {
    this.clearInterval();
    this.setInterval();
  };

  BlinkInterval.prototype.setInterval = function () {
    var timeNow = new Date().getTime(),
      msToNextSecond = Math.ceil(timeNow / 1000) * 1000 - timeNow;

    this.interval = timeNow;
    setTimeout(
      function () {
        console.info("[BlinkInterval] started at: " + new Date().getTime());
        this.interval = setInterval(
          function () {
            if (this.active && this.queueActive.length > 0) {
              this.listeners = this.listeners.concat(this.queueActive);
              this.queueActive = [];
            }

            if (!this.active && this.queueInactive.length > 0) {
              this.listeners = this.listeners.concat(this.queueInactive);
              this.queueInactive = [];
            }

            for (var i = 0, len = this.listeners.length; i < len; i++) {
              this.listeners[i]();
            }
            this.active = !this.active;
          }.bind(this),
          this.intervalLength
        );
      }.bind(this),
      msToNextSecond
    );
  };

  BlinkInterval.prototype.clearInterval = function () {
    clearInterval(this.interval);
    this.interval = null;
    this.active = true;
  };

  BlinkInterval.prototype.refresh = function () {
    //console.log("BlinkInterval listeners = " + this.listeners.length);
    if (
      this.listeners.length +
        this.queueActive.length +
        this.queueInactive.length >
      0
    ) {
      if (!this.interval) {
        this.setInterval();
      }
    } else {
      this.clearInterval();
    }
  };

  BlinkInterval.prototype.remove = function (array, listener) {
    var index = array.indexOf(listener);
    if (index !== -1) {
      array.splice(index, 1);
    }
  };

  BlinkInterval.prototype.removeListener = function (listener) {
    this.remove(this.listeners, listener);
    this.remove(this.queueActive, listener);
    this.remove(this.queueInactive, listener);
    this.refresh();
  };

  /**
   * Manages access token
   *
   * @class
   * @alias AccessToken
   * @memberof core
   * @param {String} data - access token data
   */
  function AccessToken(data) {
    this.data = data;
    this.token = data.access_token;
    var expiresAt = null;
    if (data.expires_in) {
      expiresAt = new Date();
      expiresAt.setMinutes(expiresAt.getMinutes() + data.expires_in);
    } else if (data.expires_at) {
      expiresAt = new Date(data.expires_at);
    }

    this.expireAt = expiresAt;
  }

  AccessToken.prototype.getToken = function () {
    return this.token;
  };

  AccessToken.prototype.getExpireIn = function () {
    return this.expireAt - Date.now();
  };

  AccessToken.prototype.getData = function () {
    return this.data;
  };

  AccessToken.prototype.equals = function (otherToken) {
    return this.token === otherToken.getToken();
  };

  AccessToken.prototype.toString = function () {
    return JSON.stringify({
      access_token: this.token,
      expires_at: this.expireAt,
    });
  };

  /**
   * Provide Cookie functionalities
   * @class
   * @alias Cookie
   * @memberof core.Cas
   */
  function Cookie() {}

  Cookie.prototype.getItem = function (sKey) {
    if (!sKey) {
      return null;
    }
    return (
      decodeURIComponent(
        document.cookie.replace(
          new RegExp(
            "(?:(?:^|.*;)\\s*" +
              encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") +
              "\\s*\\=\\s*([^;]*).*$)|^.*$"
          ),
          "$1"
        )
      ) || null
    );
  };

  Cookie.prototype.setItem = function (
    sKey,
    sValue,
    vEnd,
    sPath,
    sDomain,
    bSecure
  ) {
    if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) {
      return false;
    }
    var sExpires = "";
    if (vEnd) {
      switch (vEnd.constructor) {
        case Number:
          sExpires =
            vEnd === Infinity
              ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT"
              : "; max-age=" + vEnd;
          break;
        case String:
          sExpires = "; expires=" + vEnd;
          break;
        case Date:
          sExpires = "; expires=" + vEnd.toUTCString();
          break;
      }
    }
    document.cookie =
      encodeURIComponent(sKey) +
      "=" +
      encodeURIComponent(sValue) +
      sExpires +
      (sDomain ? "; domain=" + sDomain : "") +
      (sPath ? "; path=" + sPath : "") +
      (bSecure ? "; secure" : "");
    return true;
  };

  Cookie.prototype.removeItem = function (sKey, sPath, sDomain) {
    if (!this.hasItem(sKey)) {
      return false;
    }
    document.cookie =
      encodeURIComponent(sKey) +
      "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" +
      (sDomain ? "; domain=" + sDomain : "") +
      (sPath ? "; path=" + sPath : "");
    return true;
  };

  Cookie.prototype.hasItem = function (sKey) {
    if (!sKey) {
      return false;
    }
    return new RegExp(
      "(?:^|;\\s*)" +
        encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") +
        "\\s*\\="
    ).test(document.cookie);
  };

  Cookie.prototype.keys = function () {
    var aKeys = document.cookie
      .replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, "")
      .split(/\s*(?:\=[^;]*)?;\s*/);
    for (var nLen = aKeys.length, nIdx = 0; nIdx < nLen; nIdx++) {
      aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]);
    }
    return aKeys;
  };
  /**
   * Provide CAS client functionalities
   * @module emosWS/core/Cas
   */

  /**
   * Provide CAS client functionalities
   * @class
   * @alias Cas
   * @memberof core
   */
  function Cas() {
    this.WS_AUTH_STATUS_TEXT = "EMOS_AUTH";
    this.WS_SESSION_COOKIE_TEXT = "EMOS_WS_SESSION";
    this.ROUTE_COOKIE_TEXT = "ROUTEID";
    this.CAS_ST_TICKET = "CASSTTICKET";
    this.CAS_USER_LOGGED_IN = "CASUSERLOGGEDIN";
    this.CAS_USER_LOGGED_OFF = "CASUSERLOGGEDOFF";
    this.CAS_LOADED = "CAS_LOADED";
    this.casServerURL = ""; //window.CAS_SERVER_URL;
    this.checkCallbackURL = ""; //window.HMI_CALLBACK_URL;
    this.trustedAppServers = window.trustedAppServers;
    this.cookie = new Cookie();
    this.currentCookie = null;
    this.hiddenIFrame = null;
    this.onCasLoaded = null;
    this.iframes = {};
    this.ticketCallbackIndex = 0;
    this.ticketCallbackMap = {};
    this.TIMEOUT = 4000;
    this.init();
  }

  /**
   * Create mapping of callback and a created Service Ticket
   *
   * @param {Object} config - callback config
   * @param {Function} [config.success] - the callback function fired when service ticket is created
   * @param {Function} [config.error] - the callback function fired when it's failed to create a service ticket
   */
  Cas.prototype.createTicketCallback = function (config) {
    if (config) {
      var self = this,
        ticketCallbackIndex = this.ticketCallbackIndex,
        hiddenIFrame = document.createElement("iframe");

      config.iframe = hiddenIFrame;
      this.ticketCallbackMap[ticketCallbackIndex] = config;
      hiddenIFrame.style.display = "none";
      hiddenIFrame.src =
        this.getCASCallbackURL() + this.getCallbackURL(ticketCallbackIndex);
      document.body.appendChild(hiddenIFrame);
      setTimeout(function () {
        self.onTicketCallback(ticketCallbackIndex);
      }, this.TIMEOUT);
      this.ticketCallbackIndex++;
    }
  };

  /**
   * Check if CAS Server is reachable
   *
   * @param {Object} config - callback config
   * @param {Function} [config.success] - the callback function fired when CAS Server is reachable
   * @param {Function} [config.error] - the callback function fired when CAS Server is unreachable
   */
  Cas.prototype.isReachable = function (config) {
    console.log("cas", config);
    if (config && !($(".emoslogin")[0] === document.activeElement)) {
      var self = this,
        isLoaded = false,
        $insertDiv = $(
          "<iframe style='display:none; pointer-events:none; tabindex:-1' src='" +
            this.getCASCallbackURL() +
            "'></iframe>"
        ),
        removeHiddenIframe = function () {
          self.onCasLoaded = null;
          $insertDiv.remove();
        },
        onSucess = function () {
          isLoaded = true;
          removeHiddenIframe();
          config.success();
        },
        onError = function () {
          removeHiddenIframe();
          config.error();
        };

      this.onCasLoaded = onSucess;
      $("body").append($insertDiv);
      setTimeout(function () {
        if (!isLoaded) onError();
      }, this.TIMEOUT);
    }
  };

  /**
   * Get URL of CAS Callback
   *
   * @param {Number} ticketCallbackId - id of callback ticket
   * @returns {String} - URL of CAS Callback
   */
  Cas.prototype.getCallbackURL = function (ticketCallbackId) {
    return "?callback=" + ticketCallbackId;
  };

  /**
   * Handler for on service ticket event
   *
   * @param {String} ticketCallbackId - the id of callback
   * @param {String} serviceTicket - the created service ticket
   */
  Cas.prototype.onTicketCallback = function (ticketCallbackId, serviceTicket) {
    var config = this.ticketCallbackMap[ticketCallbackId];
    if (config) {
      var hiddenIFrame = config.iframe;
      try {
        if (serviceTicket) {
          if (config.success) {
            config.success(
              serviceTicket,
              this.checkCallbackURL + this.getCallbackURL(ticketCallbackId)
            );
          }
        } else {
          if (config.error) {
            config.error("Could not get CAS Service ticket");
            delete this.ticketCallbackMap[ticketCallbackId];
          }
        }
      } catch (e) {
        console.error(e);
      }
      hiddenIFrame.parentNode.removeChild(hiddenIFrame);
      delete this.ticketCallbackMap[ticketCallbackId];
    }
  };

  /**
   * Initialize CAS
   */
  Cas.prototype.init = function () {
    window.addEventListener(
      "load",
      function () {
        this.addHiddenIFrame();
      }.bind(this),
      false
    );

    //Listen to web message
    window.addEventListener(
      "message",
      function (event) {
        var data = JSON.parse(event.data);
        switch (data.type) {
          case this.CAS_ST_TICKET:
            var ticketCallbackIndex = data.callback;
            if (ticketCallbackIndex) {
              this.onTicketCallback(ticketCallbackIndex, data.ticket);
            } else {
              var informServer = function () {
                emosWS.sendLoginByKey(data.ticket, null, null, "ticket");
              }.bind(this);
              if (emosWS.getWebSocketStatus()) {
                informServer();
              } else {
                emosWS.addEventListener("open", informServer);
              }
            }

            break;

          case this.CAS_USER_LOGGED_IN:
            if (!this.currentCookie) {
              var acookie = this.cookie.getItem(this.WS_SESSION_COOKIE_TEXT);
              if (acookie) {
                //same domain
                this.currentCookie = acookie;
                emosWS.sendLoginByKey(
                  this.cookie.getItem(this.WS_SESSION_COOKIE_TEXT),
                  null,
                  null,
                  "cookie"
                );
              } else {
                //different domain
              }
            }
            break;

          case this.CAS_USER_LOGGED_OFF:
            if (this.currentCookie) {
              emosWS.sendLogoff();
            }
            break;

          case this.CAS_LOADED:
            if (this.onCasLoaded) this.onCasLoaded();
            break;

          default:
            break;
        }
      }.bind(this),
      false
    );

    //Listen to localstorage events
    window.addEventListener(
      "storage",
      this.onLocalStorageChange.bind(this),
      false
    );

    this.monitorSSOCookie();
  };

  /**
   * Get hash array of variable/value from an URL
   *
   * @param {String} url - URL to get
   * @returns {Array} - Hash array of variable
   */
  Cas.prototype.getUrlVars = function (url) {
    var vars = [],
      hash;
    var hashes = url.slice(url.indexOf("?") + 1).split("&");
    for (var i = 0; i < hashes.length; i++) {
      hash = hashes[i].split("=");
      vars.push(hash[0]);
      vars[hash[0]] = hash[1];
    }
    return vars;
  };

  /**
   * Handler when CAS Server is active
   *
   * @param {Object} msg - event message
   */
  Cas.prototype.onActiveCasServer = function (msg) {
    this.casServerURL = msg.host;
    this.checkCallbackURL = msg.service;
    this.casLoginURL = msg.host + "/login?service=" + msg.service;
    if (!this.cookie.getItem(this.WS_SESSION_COOKIE_TEXT)) {
      this.tryToGetCASServiceTicketForLogin();
    }
    console.info(msg);
  };

  /**
   * Validate a CAS Service ticket
   *
   * @param {String} ticket - ticket to validate
   */
  Cas.prototype.validateTicket = function (ticket) {
    var URL =
      this.casServerURL +
      "/serviceValidate?service=" +
      this.checkCallbackURL +
      "&ticket=" +
      ticket;
    $.get(URL, function (data) {
      console.log(
        "*******validateTicket result************\n" +
          new XMLSerializer().serializeToString(data)
      );
    });
  };

  /**
   * Add the hidden frame to communicate with CAS Server
   */
  Cas.prototype.addHiddenIFrame = function () {
    this.hiddenIFrame = document.createElement("iframe");
    this.hiddenIFrame.style.display = "none";
    document.body.appendChild(this.hiddenIFrame);
  };

  /**
   * Set authentication variable for each trusted domain for their inter-comminications of authentication events
   *
   * @param {String} value - value to set
   */
  Cas.prototype.setAuthLocalStorages = function (value) {
    try {
      this.trustedAppServers.forEach(
        function (appServerURI) {
          var iframe = this.iframes[appServerURI];
          if (!iframe) {
            iframe = document.createElement("iframe");
            iframe.style.display = "none";
            document.body.appendChild(iframe);
            this.iframes[appServerURI] = iframe;
          }
          iframe.setAttribute(
            "src",
            appServerURI + "/SetAuthLocalStorage.html?action=" + value
          );
        }.bind(this)
      );
      this.setAuthLocalStorage(value);
    } catch (e) {
      console.log("setAuthLocalStorage failed: " + e);
    }
  };

  /**
   * Set authentication variable of current domain for transmit authentication events
   * @param {String} value - value to set
   */
  Cas.prototype.setAuthLocalStorage = function (value) {
    try {
      if (value === "add") {
        localStorage.setItem(this.WS_AUTH_STATUS_TEXT, 1);
      } else if (value === "delete") {
        localStorage.removeItem(this.WS_AUTH_STATUS_TEXT);
      }
    } catch (e) {
      console.log("setAuthLocalStorage failed: " + e);
    }
  };

  /**
   * Informs trusted domains/apss about authentication events
   */
  Cas.prototype.informTrustedApps = function () {
    this.setAuthLocalStorages(this.currentCookie ? "add" : "delete");
  };

  /**
   * Try to get CAS Service ticket to login
   */
  Cas.prototype.tryToGetCASServiceTicketForLogin = function () {
    var CasCallbackURL = this.getCASCallbackURL();
    if (CasCallbackURL) {
      this.hiddenIFrame.setAttribute("src", CasCallbackURL);
    }
  };

  /**
   * Get CAS Callback URL
   */
  Cas.prototype.getCASCallbackURL = function () {
    if (this.casServerURL && this.checkCallbackURL) {
      return this.casServerURL + "/login?service=" + this.checkCallbackURL;
    }
    return null;
  };

  /**
   * Get value of a parameter from an URL
   *
   * @param {type} url - URL to get
   * @param {type} name - name of the parameter to get value
   * @returns {String} - value of the parameter
   */
  Cas.prototype.getParameterByName = function (url, name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
      results = regex.exec(url);
    return results === null
      ? ""
      : decodeURIComponent(results[1].replace(/\+/g, " "));
  };

  /**
   * Get CAS service ticket
   *
   * @param {Object} config - callback config
   * @param {String} ticketCallbackId - the id of callback
   * @param {String} serviceTicket - the created service ticket
   */
  Cas.prototype.getCASServiceTicket = function (config) {
    try {
      var CasCallbackURL = this.getCASCallbackURL(),
        onError = function (e) {
          if (config.error) config.error(e);
        };
      if (CasCallbackURL) {
        this.createTicketCallback(config);
      } else {
        onError("The authentication service is not available at the moment!");
      }
    } catch (e) {
      console.error(e);
    }
  };

  Cas.prototype.sendCASLogout = function () {
    var URL = this.casServerURL + "/logout";
    this.hiddenIFrame.setAttribute("src", URL);
  };

  Cas.prototype.onWSCookie = function (cookie) {
    this.currentCookie = cookie;
    this.cookie.setItem(this.WS_SESSION_COOKIE_TEXT, cookie, null, "/");
    emosWS.propagateMessage(JSON.stringify({ type: this.CAS_USER_LOGGED_IN }));
  };

  Cas.prototype.onPassed = function (msg) {
    if (msg.wscookie) {
      this.currentCookie = msg.wscookie;
      this.cookie.setItem(this.WS_SESSION_COOKIE_TEXT, msg.wscookie, null, "/");
      this.setCookieForCurrentWSServer(msg.wscookie);
      emosWS.propagateMessage(
        JSON.stringify({ type: this.CAS_USER_LOGGED_IN })
      );
    } else {
      //this.currentCookie = this.cookie.getItem(this.WS_SESSION_COOKIE_TEXT);
      this.currentCookie = "abc";
    }
    this.setAuthLocalStorage("add");
    this.informTrustedApps();
  };

  Cas.prototype.getHTTPURL = function () {
    var wsURI = emosWS.getWSHostname(),
      maps = { ws: "http", wss: "https" },
      httpURL = wsURI.replace(
        /(.*)(:\/\/.*\/).*/,
        function (match, protocol, url) {
          return maps[protocol] + url + "setcookie.html";
        }
      );
    return httpURL;
  };

  Cas.prototype.setCookieForCurrentWSServer = function (cookie) {
    this.setCookieForDomain(this.getHTTPURL(), cookie);
  };

  Cas.prototype.deleteCookieForCurrentWSServer = function () {
    this.setCookieForDomain(
      this.getHTTPURL(),
      "=;expires=Thu, 01 Jan 1970 00:00:01 GMT;"
    );
  };

  Cas.prototype.setCookieForDomain = function (url, cookie) {
    var hiddenIFrame = document.createElement("iframe");
    hiddenIFrame.className = "abc";
    hiddenIFrame.style.display = "none";
    hiddenIFrame.src = url + "?setcookie=" + cookie;
    document.body.appendChild(hiddenIFrame);
    setTimeout(function () {
      hiddenIFrame.parentNode.removeChild(hiddenIFrame);
    }, this.TIMEOUT);
  };

  Cas.prototype.onFailed = function (msg) {
    switch (msg.reason) {
      case "Cookie":
        //if emos-ws-session cookie is not valid, then try to get ticket from the CAS server
        this.logoffSession();
        this.tryToGetCASServiceTicketForLogin();
        break;

      case "ticket":
        break;

      default:
        break;
    }
  };

  Cas.prototype.onLogoff = function () {
    this.logoffSession();
    this.logoffSSO();
    this.informTrustedApps();
  };

  Cas.prototype.logoffSession = function () {
    this.currentCookie = null;
    this.cookie.removeItem(this.WS_SESSION_COOKIE_TEXT, "/");
    this.deleteCookieForCurrentWSServer();
  };

  Cas.prototype.logoffSSO = function () {
    this.sendCASLogout();
    emosWS.propagateMessage(JSON.stringify({ type: this.CAS_USER_LOGGED_OFF }));
  };

  Cas.prototype.onLocalStorageChange = function (storageEvent) {
    /*console.log("storage event: key=" + storageEvent.key
         + "/ old=" + storageEvent.oldValue
         + "/ new=" + storageEvent.newValue
         + "/ area=" + storageEvent.storageArea);*/
    if (storageEvent.key === this.WS_AUTH_STATUS_TEXT) {
      if (!this.currentCookie && storageEvent.newValue) {
        //do login
        setTimeout(
          function () {
            var acookie = this.cookie.getItem(this.WS_SESSION_COOKIE_TEXT);
            if (acookie) {
              //same domain
              this.currentCookie = acookie;
              emosWS.sendLoginByKey(
                this.cookie.getItem(this.WS_SESSION_COOKIE_TEXT),
                null,
                null,
                "cookie"
              );
            } else {
              //different domain
              this.getCASServiceTicket();
            }
          }.bind(this),
          1
        );
      } else if (this.currentCookie && !storageEvent.newValue) {
        emosWS.sendLogoff();
        this.logoffSession();
      }
    }
  };

  /**
   * Monitor the SSO Cookie: when this cookie is not available, do log-out if currently is logged
   */
  Cas.prototype.monitorSSOCookie = function () {
    var SSO_CHECK_INTERVAL = 1000,
      SSO_CHECK_DURATION = 30 * 1000, //30 seconds
      stopMonitorAt = new Date().getTime() + SSO_CHECK_DURATION,
      stop = false,
      ssomonitorInterval = null,
      checkIfSSOAvailable = function () {
        try {
          if (stop || new Date().getTime() > stopMonitorAt) {
            clearInterval(ssomonitorInterval);
            console.log("Stop monitoring SSO cookie !");
          } else {
            if (
              !stop &&
              emosWS.login.au.status === "PASSED" &&
              !($(".emoslogin")[0] === document.activeElement)
            ) {
              emosWS.Cas.getCASServiceTicket({
                success: function () {
                  stop = true;
                },
                error: function () {
                  if (emosWS.login.au.status === "PASSED") {
                    stop = true;
                    emosWS.sendLogoff();
                  }
                },
              });
            }
          }
        } catch (e) {}
      };
    console.log("Monitoring SSO cookie...");
    ssomonitorInterval = setInterval(checkIfSSOAvailable, SSO_CHECK_INTERVAL);
  };

  /**
   * Shape style properties
   *
   * @class
   * @alias Style
   * @memberof core
   */
  function Style() {
    this["fill"] = null;
    this["stroke"] = null;
    this["stroke-width"] = null;
    this["display"] = null;
    this["cursor"] = null;
  }

  /**
   * Manages all activities of a shape
   *
   * @class
   * @alias Shape
   * @memberof core
   */
  function Shape(shapeid) {
    emosWS.shapeNumber++;
    //DOM object of shape
    this.id = shapeid;
    this.shape = null;
    this.shapeText = null;
    this.text = null;
    this.strokeWidth = null;
    this.scaleX = 1;
    this.scaleY = 1;
    this.deltaX = 0;
    this.deltaY = 0;

    //list of animations
    this.animations = [];

    //style of shape
    this.style = new Style();

    this.setShapes(shapeid);
    this.inDebug = false;
    this.ready = false;
    this.JSJobs = [];
    this.ESJobs = [];
    emosWS.dispatchEvent({ type: "HMIshape" });
  }

  /* Compare two subscriber if they are equal
   *
   * @param {Object} animation to add
   * @returns {Boolean}
   */
  Shape.prototype.add = function (animation) {
    return (
      this.animations.push({ animation: animation, style: new Style() }) - 1
    );
  };

  Shape.prototype.executeJobs = function (e) {
    if (this.ready) {
      this.JSJobs.forEach(function (job) {
        try {
          job(e);
        } catch (err) {
          console.log("[Shape execute JSJobs]", err);
        }
      });

      emosWS.listenGlobalVariablesChange();
      /*for (var i = this.ESJobs.length - 1; i >= 0; i--) {
             var job = this.ESJobs[i];
             try {
             job(e);
             } catch (err) {
             console.log("[Shape executeJobs]", err);
             }
             }*/
      this.ESJobs.forEach(function (job) {
        try {
          job(e);
        } catch (err) {
          console.log("[Shape execute ESJobs ]", err);
        }
      });
      emosWS.callbackGlobalVariablesChange();
      emosWS.clickData.event = null;
    }
  };

  Shape.prototype.addJob = function (job, useHand, isJSJob) {
    if (!this.ready) {
      setEvent(
        this.id,
        "click",
        this.executeJobs.bind(this),
        useHand ? "pointer" : "initial"
      );
    }
    this.ready = true;
    (isJSJob ? this.JSJobs : this.ESJobs).push(job);
  };

  Shape.prototype.onContextMenu = function (e) {
    if (emosWS.debug) {
      if (emosWS.debug.ctrlPressed) {
        if (emosWS.debug.animationTab) {
          e.preventDefault();
          emosWS.debug.animationTab.onShapeContextMenu(this);
        }
      }
    }
  };

  Shape.prototype.setStyle = function (style, index) {
    try {
      if (this.shape) {
        var aniStyle = this.animations[index].style;
        for (var i in style) {
          var styleName = i;
          var styleValue = style[i];
          aniStyle[styleName] = styleValue;
          for (var j = 0, len = this.animations.length; j < len; j++) {
            var aStyle = this.animations[j].style;
            styleValue = aStyle[styleName];
            if (styleValue !== null) {
              this.style[styleName] = styleValue;
              this.setStyleDeep(this.shape, styleName, styleValue);
              break;
            }
          }
        }
        if (this.inDebug) {
          emosWS.debug.animationTab.onAnimationChange(index, aniStyle);
          emosWS.debug.animationTab.onAnimationChange(-1, this.style);
        }
      }
    } catch (e) {
      console.error("[Shape setStyle] : ", e);
    }
  };

  Shape.prototype.setStyleDeep = function (target, styleName, styleValue) {
    try {
      if (target.tagName === "g" && styleValue) {
        /*if (styleName === "visibility") {
                 target.style.visibility = styleValue;
                 for (var i = 0, len = target.childNodes.length; i < len; i++) {
                 var node = target.childNodes[i];
                 if (node instanceof SVGForeignObjectElement)
                 this.setVisibility(node, styleValue);
                 }
                 } else {*/
        if (["fill", "cursor"].indexOf(styleName) > -1) {
          for (var i = 0, len = target.childNodes.length; i < len; i++) {
            this.setStyleDeep(target.childNodes[i], styleName, styleValue);
          }
        } else {
          target.style[styleName] = styleValue;
        }
        //}
      } else {
        if (styleValue) {
          if (typeof target.style !== "undefined") {
            switch (styleName) {
              case "fill":
                this.setFillColor(target, styleValue);
                break;

              case "display":
                this.setVisibility(target, styleValue);
                break;

              default:
                target.style[styleName] = styleValue;
                break;
            }
          }
        }
      }
    } catch (e) {
      console.error("[Shape setStyleDeep] : ", e);
    }
  };

  Shape.prototype.setFillColor = function (target, color) {
    if (!target.GradientStopColor) {
      this.searchGradientStopColor(target);
    }

    if (target.GradientStopColor) {
      for (var i = 0, len = target.GradientStopColor.length; i < len; i++) {
        target.GradientStopColor[i].setAttribute("stop-color", color);
      }
    } else {
      target.style.fill = color;
    }
  };

  Shape.prototype.setVisibility = function (target, visibility) {
    target.style.display = visibility;
    if (typeof target.shapeText !== "undefined") {
      target.shapeText.style.display = visibility;
    }
    if (typeof target.shapeSub !== "undefined") {
      target.shapeSub.style.display = visibility;
    }
  };

  Shape.prototype.setShapes = function (target) {
    if (!emosWS.attr.svg) return null;

    this.shape = emosWS.attr.svg.getElementById(target);
    if (this.shape) {
      this.shape.addEventListener(
        "contextmenu",
        this.onContextMenu.bind(this),
        true
      );
      var sw = this.shape.getAttribute("stroke-width");
      this.strokeWidth = sw === null || sw === "" ? 1 : Number(sw);
    }
    this.searchGradientStopColor(this.shape);
    this.shapeText =
      emosWS.attr.svg.getElementById(target + ".Text") || this.shape;
    if (this.shapeText) {
      this.shape.shapeText = this.shapeText;
      this.tspans = this.shapeText.getElementsByTagName("tspan");
      this.shapeTextContent = this.tspans[0] || this.shapeText;
      if (this.shapeTextContent) {
        this.text = this.shapeTextContent.textContent;
      }
    }
    this.shapeSub = emosWS.attr.svg.getElementById(target + ".Sub");
    if (this.shapeSub) {
      if (this.shape) {
        this.shape.shapeSub = this.shapeSub;
      }
    }
  };

  Shape.prototype.setText = function (value) {
    if (this.tspans) {
      for (var i = 0, len = this.tspans.length; i < len; i++) {
        this.tspans[i].textContent = "";
      }
    }
    if (this.shapeTextContent) {
      this.text = this.shapeTextContent.textContent = value;
    }
  };

  Shape.prototype.searchGradientStopColor = function (target) {
    if (target) {
      target.GradientStopColor = null;
      var fill = target.getAttribute("fill");
      if (fill) {
        var matches = fill.match(/url\(#(.*)\)/);
        if (matches) {
          var element = emosWS.attr.svg.getElementById(matches[1]);
          if (element.childNodes[1]) {
            target.GradientStopColor = [];
            target.GradientStopColor.push(element.childNodes[1]);
            if (element.childNodes[5]) {
              target.GradientStopColor.push(element.childNodes[5]);
            }
          }
        }
      }
    }
  };

  /**
   * Manages Indexed Database activities
   *
   * @class
   * @alias IDB
   * @memberof core
   */
  function IDB() {
    this.version = 2;
    this.databaseName = "emos";
    this.db = null;
    this.plcStore = { name: "plc", keyPath: "plctag" };

    this.init();
  }

  IDB.prototype.init = function () {
    try {
      if (!window.indexedDB) {
        console.info(
          "Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available."
        );
      } else {
        var request = window.indexedDB.open(this.databaseName, this.version);
        request.onerror = function (event) {
          console.error("[IDB onerror] : ", event);
        };
        request.onsuccess = function (event) {
          this.db = event.target.result;
        }.bind(this);
        request.onupgradeneeded = function (event) {
          var db = (this.db = event.target.result);

          var objectStore = db.createObjectStore(this.plcStore.name, {
            keyPath: this.plcStore.keyPath,
          });

          /*objectStore.createIndex("value", "value", {unique: false});*/

          objectStore.transaction.oncomplete = function (event) {
            var store = (this.plcStore.store = db
              .transaction(this.plcStore.name, "readwrite")
              .objectStore(this.plcStore.name));
          }.bind(this);
        }.bind(this);
      }
    } catch (e) {
      console.error("[IDB.prototype.init] : ", e);
    }
  };

  IDB.prototype.addPLC = function (plcdata) {
    try {
      if (this.db) {
        plcdata.value.init = true;
        var request = this.db
          .transaction(this.plcStore.name, "readwrite")
          .objectStore(this.plcStore.name)
          .add(plcdata);

        request.onsuccess = function (event) {
          //return event.result;
        };
      }
    } catch (e) {
      console.error("[IDB.prototype.addPLC] : ", e);
    }
  };

  IDB.prototype.updatePLC = function (plcdata) {
    if (this.db) {
      var request = this.db
        .transaction(this.plcStore.name, "readwrite")
        .objectStore(this.plcStore.name)
        .put(plcdata);

      request.onerror = function (event) {
        //console.error("[IDB updatePLC] : ", event);
      };

      request.onsuccess = function (event) {
        //console.info("[IDB updatePLC] successfully: ", plcdata.plc);
      };
    }
  };

  IDB.prototype.getPLC = function (plc, callback) {
    if (this.db) {
      var request = this.db
        .transaction(this.plcStore.name, "readwrite")
        .objectStore(this.plcStore.name)
        .get(plc);

      request.onerror = function (event) {
        //console.error("[IDB getPLC] : ", event);
      };

      request.onsuccess = function (event) {
        var value = request.result.value;
        value.source = "IndexedDB";
        if (typeof value.init === "undefined") callback(request.result.value);
      };
    }
  };

  IDB.prototype.deletePLC = function (plc) {
    if (this.db) {
      var request = this.db
        .transaction(this.plcStore.name, "readwrite")
        .objectStore(this.plcStore.name)
        .delete(plc);
      request.onsuccess = function (event) {
        //console.info("[IDB deletePLC] successfully: ", plc);
      };
    }
  };

  /**
   * Manage a tab in debug window
   * @class
   * @alias Tab
   * @memberof core.Debug
   * @param {Number} tabIndex - index of tab
   */
  function Tab(tabIndex) {
    this.tabIndex = tabIndex;
    this.active = false;
    this.html = "";
    this.init();
  }

  Tab.prototype.init = function () {
    console.info("[", this.constructor.name, "] init");
  };

  Tab.prototype.isActive = function () {
    var debug = emosWS.debug;
    return debug.activeTabId === this.tabIndex && debug.isOpen();
  };

  Tab.prototype.activate = function () {
    this.refresh();
  };

  Tab.prototype.setActive = function () {
    if (!this.isActive()) {
      emosWS.debug.dialog.emos.tabs.tabs({ active: this.tabIndex });
    }
  };

  Tab.prototype.setInactive = function () {};

  Tab.prototype.displayObject = function (object, style, value) {
    if (["fill", "stroke"].indexOf(style) > -1) {
      value = value || "#FFFFFF";
      object.style["background-color"] = value;
      object.style["color"] = this.invertColor(value);
    }
  };

  Tab.prototype.invertColor = function (hexTripletColor) {
    var color = hexTripletColor;
    color = color.substring(1); // remove #
    color = parseInt(color, 16); // convert to integer
    color = 0xffffff ^ color; // invert three bytes
    color = color.toString(16); // convert to hex
    color = ("000000" + color).slice(-6); // pad with leading zeros
    color = "#" + color; // prepend #
    return color;
  };

  Tab.prototype.deactivate = function () {
    //console.info("[", this.constructor.name, "] deactivate");
  };

  Tab.prototype.getHTML = function () {
    return "";
  };

  Tab.prototype.onHTMLReady = function () {};

  Tab.prototype.refresh = function () {};

  Tab.prototype.getId = function () {
    return "EDebug" + this.name + this.index++;
  };

  Tab.prototype.showQR = function (link) {
    var url = link.href;
  };

  Tab.prototype.highlight = function (o) {
    var duration = 250; //ms
    if (!o.inEMOSHighLight) {
      o.inEMOSHighLight = true;
      var bc = o.style["background-color"];
      var c = o.style["color"];
      o.style["background-color"] = "#4d90fe";
      o.style["color"] = "white";
      setTimeout(function () {
        o.style["background-color"] = bc;
        o.style["color"] = c;
        o.inEMOSHighLight = false;
      }, duration);
    }
  };

  /**
   * Manage Animation tab
   * @class
   * @alias AnimationTab
   * @memberof core.Debug
   * @extends core.Debug.Tab
   * @param {Number} tabIndex - index of tab
   */
  function AnimationTab(tabIndex) {
    this.name = "Shape";
    this.index = 0;
    this.shape = null;
    this.elements = {
      gui: { html: null, id: this.getId() },
      div: { html: null, id: this.getId() },
      shapename: { html: null, id: this.getId() },
      animationNo: { html: null, id: this.getId() },
      head: { html: null, id: this.getId() },
      shape: { html: null, id: this.getId() },
      table: { html: null, id: this.getId() },
    };
    Tab.call(this, tabIndex);
  }

  AnimationTab.prototype = Object.create(Tab.prototype);
  AnimationTab.prototype.constructor = AnimationTab;

  AnimationTab.prototype.init = function () {
    this.html = this.getHTML();
  };

  AnimationTab.prototype.getHTML = function () {
    var html =
      '<div id="' +
      this.elements.gui.id +
      '">\
                <div id="' +
      this.elements.div.id +
      '">\
                    <table style="width:100%">\
                        <tr>\
                            <td width="20%">Shape name</td>\
                            <td width="60%"><input type="text" id="' +
      this.elements.shapename.id +
      '"/></td>\
                        </tr>\
                        <tr>\
                            <td width="20%">Animations</td>\
                            <td width="60%" id="' +
      this.elements.animationNo.id +
      '"></td>\
                        </tr>\
                    </table>\
                </div>\
                <div>\
                    <table class="DebugDataTable" style="width:100%">\
                        <thead>\
                            <tr id="' +
      this.elements.head.id +
      '" >\
                                <td>Animation</td>\
                            </tr>\
                            <tr id="' +
      this.elements.shape.id +
      '" >\
                                <td>&sum;</td>\
                            </tr>\
                        </thead>\
                        <tbody id="' +
      this.elements.table.id +
      '" ></tbody>\
                    </table>\
                </div>\n\
            </div>';

    return html;
  };

  AnimationTab.prototype.onHTMLReady = function () {
    for (var key in this.elements) {
      var e = this.elements[key];
      e.html = document.getElementById(e.id);
    }
    this.elements.shapename.html.addEventListener(
      "change",
      function () {
        var shape = emosWS.shapes[this.elements.shapename.html.value];
        if (shape) {
          this.onShapeContextMenu(shape);
        } else {
          this.elements.shapename.html.value = this.shape.id;
        }
      }.bind(this),
      false
    );
    this.update();
  };

  AnimationTab.prototype.update = function () {
    this.updateShape();
  };

  AnimationTab.prototype.refresh = function () {
    this.update();
  };

  AnimationTab.prototype.deactivate = function () {
    if (this.shape) {
      this.shape.inDebug = false;
    }
  };

  AnimationTab.prototype.updateShape = function () {
    if (this.isActive() && this.shape) {
      this.elements.gui.html.style.display = "block";
      this.shape.inDebug = true;

      this.elements.shapename.html.value = this.shape.id;
      this.elements.animationNo.html.textContent = this.shape.animations.length;
      var table = this.elements.table.html;
      while (table.rows.length > 0) {
        table.deleteRow(0);
      }
      var headrow = this.elements.head.html;
      var shape = this.elements.shape.html;
      while (headrow.cells.length > 1) {
        headrow.deleteCell(1);
        shape.deleteCell(1);
      }
      Object.keys(this.shape.style).forEach(
        function (key, index) {
          var cellName = headrow.insertCell(index + 1);
          var cellValue = shape.insertCell(index + 1);
          cellName.textContent = key;
          cellValue.textContent = this.shape.style[key];
          this.displayObject(cellValue, key, cellValue.textContent);
        }.bind(this)
      );
      this.shape.animations.forEach(
        function (animation, index) {
          var row = table.insertRow(index);
          var cellName = row.insertCell(0);
          cellName.textContent = animation.animation.constructor.name;
          cellName.title = animation.animation.getDetail();
          Object.keys(this.shape.style).forEach(
            function (key, index) {
              var cell = row.insertCell(index + 1);
              cell.textContent = animation.style[key];
              this.displayObject(cell, key, cell.textContent);
            }.bind(this)
          );
        }.bind(this)
      );
    } else {
      this.elements.gui.html.style.display = "none";
    }
  };

  AnimationTab.prototype.onShapeContextMenu = function (shape) {
    if (emosWS.debug.isOpen()) {
      this.deactivate();
      this.setActive();
      this.shape = shape;
      this.shape.inDebug = true;
      this.updateShape();
      this.debugShape(shape);
    }
  };

  AnimationTab.prototype.onAnimationChange = function (rowIndex, style) {
    if (this.isActive()) {
      var row =
        rowIndex === -1
          ? this.elements.shape.html
          : this.elements.table.html.rows[rowIndex];
      Object.keys(style).forEach(
        function (key, index) {
          var cell = row.cells[index + 1];
          cell.textContent = style[key];
          this.displayObject(cell, key, cell.textContent);
        }.bind(this)
      );
    }
  };

  AnimationTab.prototype.debugShape = function (shape) {
    console.info("[AnimationTab debugShape]", shape);
  };

  /**
   * Manage Data tab
   * @class
   * @alias DataTab
   * @memberof core.Debug
   * @extends core.Debug.Tab
   * @param {Number} tabIndex - index of tab
   */
  function DataTab(tabIndex) {
    this.name = "Data";
    this.index = 0;
    this.shape = null;
    this.modeAll = false; //mode All or Custom
    this.activated = false;
    this.display = {
      groupInfo: {
        no: "No.",
        tag: "Tag",
        tagType: "Type",
        listeners: "Listeners",
      },
      value: {
        source: "Source",
        value: "Value",
        quality: "Quality",
        ts: "Time",
      },
    };
    this.elements = {
      radioDiv: { html: null, id: this.getId() },
      radioAll: { html: null, id: this.getId() },
      radioCustom: { html: null, id: this.getId() },
      addDiv: { html: null, id: this.getId() },
      addInput: { html: null, id: this.getId() },
      addIO: { html: null, id: this.getId() },
      addAlarm: { html: null, id: this.getId() },
      ioHead: { html: null, id: this.getId() },
      ioTable: { html: null, id: this.getId() },
    };
    this.radioId = this.getId();
    this.datachangeListener = this.datachangeListener.bind(this);
    Tab.call(this, tabIndex);
  }

  DataTab.prototype = Object.create(Tab.prototype);
  DataTab.prototype.constructor = DataTab;

  DataTab.prototype.init = function () {
    this.html = this.getHTML();
  };

  DataTab.prototype.getHTML = function () {
    var html =
      '<div>\
                    <div class="FloatLeft" id="' +
      this.elements.radioDiv.id +
      '">\
                        <input' +
      (this.modeAll ? ' checked="checked"' : "") +
      ' type="radio" id="' +
      this.elements.radioAll.id +
      '" name="' +
      this.radioId +
      '"><label for="' +
      this.elements.radioAll.id +
      '">All</label>\
                        <input' +
      (this.modeAll ? "" : ' checked="checked"') +
      ' type="radio" id="' +
      this.elements.radioCustom.id +
      '" name="' +
      this.radioId +
      '"><label for="' +
      this.elements.radioCustom.id +
      '">Custom</label>\
                    </div>\
                    <div class="FloatRight" id="' +
      this.elements.addDiv.id +
      '">\
                        <input type="text" id="' +
      this.elements.addInput.id +
      '">\
                        <button type="button" id="' +
      this.elements.addIO.id +
      '">+IO</button>\
                        <button type="button" id="' +
      this.elements.addAlarm.id +
      '">+AL</button>\
                    </div>\
                </div>\
                <div>\
                    <div class="debugDataTabFilter">\
                        Filter: \
                        <input class="DebugDataFilter" type="text" placeholder="any text to filter">\
                    </div>\
                    <table class="DebugDataTable DebugData" style="width:100%">\
                        <thead id="' +
      this.elements.ioHead.id +
      '" ></thead>\
                        <tbody id="' +
      this.elements.ioTable.id +
      '" ></tbody>\
                    </table>\
                </div>';
    //<tr id="' + this.elements.ioHead.id + '" ></tr>\
    return html;
  };

  DataTab.prototype.refresh = function () {
    this.setMode(this.modeAll);
  };

  DataTab.prototype.showQualityBadTags = function () {
    $("#" + this.elements.radioAll.id)
      .attr("checked", true)
      .button("refresh");
    this.setMode(true);
    var filterString = "bad";
    $(".DebugDataFilter").val(filterString);
    $.uiTableFilter($(".DebugData"), filterString);
  };

  DataTab.prototype.insertTable = function () {
    this.setMode(this.modeAll);
  };

  DataTab.prototype.update = function () {
    this.activated = true;
    var table = this.elements.ioTable.html;
    //empty table
    while (table.rows.length > 0) {
      table.deleteRow(0);
    }

    if (this.modeAll) {
      //add rows for topics
      Object.keys(emosWS.tagDestination).forEach(
        function (key) {
          var sGroup = emosWS.tagDestination[key];
          this.addRow(sGroup);
        }.bind(this)
      );
    }
  };

  DataTab.prototype.addRow = function (sGroup) {
    var row = this.elements.ioTable.html.insertRow();
    this.updateRow(row, sGroup);
    this.subscribe(row, sGroup);
  };

  DataTab.prototype.updateRow = function (row, sGroup, index) {
    //empty row if it not empty
    if (row.cells.length > 0) {
      while (row.cells.length > 0) {
        row.deleteCell(0);
      }
    }

    //set css
    var css = "debugBad";
    var data = sGroup.actualData;
    if (data) {
      switch (data.type) {
        case "dataChange":
          if (data.source === "IndexedDB") {
            css = "debugCache";
          } else {
            css = data.quality === 192 ? "debugGood" : "debugBad";
          }
          break;

        case "diagnosisWindow":
          css =
            data.value.OPCVersionID === "EMOSDEFAULT"
              ? "debugBad"
              : "debugGood";
          break;

        default:
          break;
      }
    }
    row.className = css;

    //fill data
    Object.keys(this.display.groupInfo).forEach(function (key) {
      var cell = row.insertCell();
      switch (key) {
        case "no":
          cell.textContent = row.rowIndex;
          break;

        case "tagType":
          cell.textContent = sGroup.getTagType();
          break;

        case "listeners":
          cell.textContent = sGroup.subscribers.length;
          break;

        default:
          cell.textContent = sGroup[key];
          break;
      }
    });

    Object.keys(this.display.value).forEach(
      function (key) {
        var cell = row.insertCell();

        switch (key) {
          case "quality":
            cell.textContent = css === "debugGood" ? "good" : "bad";
            break;

          case "value":
            if (data) this.processCell(cell, sGroup);

          default:
            if (data) {
              cell.textContent = data[key];
              break;
            }
        }
      }.bind(this)
    );
    row.title = sGroup.toString();
  };

  DataTab.prototype.processCell = function (cell, sGroup) {
    cell.contentEditable = CheckUserRight("sys_sr", 2);
    cell.addEventListener(
      "blur",
      function () {
        sGroup.setValue(cell.textContent);
      },
      false
    );
  };

  DataTab.prototype.onUserRightChange = function () {
    var hasIOManagerRight = CheckUserRight("sys_sr", 2),
      table = this.elements.ioTable.html;
    for (var i = 0, len = table.rows.length; i < len; i++) {
      var cells = table.rows[i].cells;
      for (var j = 0, len2 = cells.length; j < len2; j++) {
        var cell = cells[j];
        if (typeof cell.contentEditable !== "undefined") {
          cell.contentEditable = hasIOManagerRight;
        }
      }
    }
  };

  DataTab.prototype.subscribe = function (row, sGroup) {
    var subscriber = new Subscriber(this.datachangeListener, {
      row: row,
      sGroup: sGroup,
    });
    sGroup.register(subscriber);
    row.sGroup = sGroup;
  };

  DataTab.prototype.unsubscribeAll = function () {
    var table = this.elements.ioTable.html;
    for (var i = 0, len = table.rows.length; i < len; i++) {
      var row = table.rows[i];
      row.sGroup.unregister(this.datachangeListener);
    }
  };

  DataTab.prototype.datachangeListener = function (msg, param) {
    this.updateRow(param.row, param.sGroup);
    this.highlight(param.row);
  };

  DataTab.prototype.setMode = function (modeAll) {
    if (this.modeAll !== modeAll || !this.activated) {
      this.modeAll = modeAll;
      this.elements.addDiv.html.style.visibility = modeAll
        ? "hidden"
        : "visible";
      this.elements.addInput.html.value = "";
      this.unsubscribeAll();
      this.update();
    }
  };

  DataTab.prototype.onHTMLReady = function () {
    for (var key in this.elements) {
      var e = this.elements[key];
      e.html = document.getElementById(e.id);
    }

    $("#" + this.elements.radioDiv.id).buttonset();

    var header = this.elements.ioHead.html;
    Object.keys(this.display).forEach(
      function (cn) {
        var cat = this.display[cn];
        Object.keys(cat).forEach(function (key, index) {
          var th = header.appendChild(document.createElement("th"));
          th.textContent = th.title = cat[key];
          if (key === "tag") th.className = "debugHalf";
          //var cell = header.insertCell();
          //cell.textContent = cat[key];
        });
      }.bind(this)
    );

    this.elements.radioAll.html.addEventListener(
      "click",
      this.setMode.bind(this, true)
    );
    this.elements.radioCustom.html.addEventListener(
      "click",
      this.setMode.bind(this, false)
    );
    this.elements.addIO.html.addEventListener(
      "click",
      this.onAddButtonClick.bind(this, Definition.tagType.IO)
    );
    this.elements.addAlarm.html.addEventListener(
      "click",
      this.onAddButtonClick.bind(this, Definition.tagType.Alarm)
    );
    emosWS.addEventListener("HMIplc", this.onNewSGroup.bind(this));

    //enable filter
    var theTable = $(".DebugData");
    $(".DebugDataFilter").keyup(function () {
      $.uiTableFilter(theTable, this.value);
    });

    //Enable data table resizable
    $("th")
      .css({
        /* required to allow resizer embedding */
        position: "relative",
      })
      /* check .resizer CSS */
      //.prepend("<div class='resizer'></div>")
      .resizable({
        resizeHeight: false,
        handles: "e, w",
        // we use the column as handle and filter
        // by the contained .resizer element
        handleSelector: "",
        onDragStart: function (e, $el, opt) {
          // only drag resizer
          if (!$(e.target).hasClass("resizer")) return false;
          return true;
        },
      });

    emosWS.addEventListener("UserRight", this.onUserRightChange.bind(this));
  };

  DataTab.prototype.onAddButtonClick = function (type) {
    var tag = this.elements.addInput.html.value.replace(/ /g, "");
    var tagId = tag + type.id;
    var sGroup = emosWS.tagDestination[tagId];
    if (sGroup) {
      var table = this.elements.ioTable.html;
      for (var i = 0, len = table.rows.length; i < len; i++) {
        var row = table.rows[i];
        if (row.sGroup === sGroup) return;
      }

      this.elements.addInput.html.value = "";
    } else {
      sGroup = new type.subscriberGroup(tag, type);
      emosWS.tagDestination[tagId] = sGroup;
    }
    this.addRow(sGroup);
  };

  DataTab.prototype.onNewSGroup = function (sGroup) {
    if (this.isActive() && this.modeAll) {
      this.addRow(sGroup);
    }
  };

  DataTab.prototype.deactivate = function () {
    this.unsubscribeAll();
    this.activated = false;
  };

  /**
   * Manage Link tab
   * @class
   * @alias LinkTab
   * @memberof core.Debug
   * @extends core.Debug.Tab
   * @param {Number} tabIndex - index of tab
   */
  function LinkTab(tabIndex) {
    this.name = "Link";
    this.index = 0;
    this.links = {};
    this.elements = {
      refreshButton: { html: null, id: this.getId() },
      linkTable: { html: null, id: this.getId() },
    };

    Tab.call(this, tabIndex);
  }

  LinkTab.prototype = Object.create(Tab.prototype);
  LinkTab.prototype.constructor = LinkTab;

  LinkTab.prototype.init = function () {
    this.html = this.getHTML();
  };

  LinkTab.prototype.getHTML = function () {
    var html =
      '<div>\
                    <table class="DebugDataTable" style="width:100%">\
                        <thead>\
                            <tr>\
                                <td width="10%"><button id="' +
      this.elements.refreshButton.id +
      '">Refresh</button></td>\
                                <td width="75%">URL</td>\
                                <td width="15%">Status</td>\
                            </tr>\
                        </thead>\
                        <tbody id="' +
      this.elements.linkTable.id +
      '" ></tbody>\
                    </table>\
                </div>';

    return html;
  };

  LinkTab.prototype.onHTMLReady = function () {
    for (var key in this.elements) {
      var e = this.elements[key];
      e.html = document.getElementById(e.id);
    }

    var self = this;
    $("#" + this.elements.refreshButton.id)
      .button({
        icons: {
          primary: "ui-icon-refresh",
        },
        text: false,
      })
      .click(function () {
        self.updateLinkTable();
      });
  };

  LinkTab.prototype.refresh = function () {
    this.updateLinkTable();
  };

  LinkTab.prototype.updateLinkTable = function () {
    var table = this.elements.linkTable.html;

    //empty table
    this.links = {};
    while (table.rows.length > 0) {
      table.deleteRow(0);
    }

    //eliminate duplicate links by using hash array ([] -> {})
    emosWS.links.forEach(
      function (link) {
        this.links[link.page] = null;
      }.bind(this)
    );

    //update table
    Object.keys(this.links).forEach(
      function (url) {
        var row = table.insertRow();
        var cellNo = row.insertCell();

        var cellURL = row.insertCell();
        var a = document.createElement("a");
        a.href = url;
        a.innerHTML = url;
        a.target = "_blank";
        emosWS.debug.QR.setTooltip(a);
        cellURL.appendChild(a);

        var cellStatus = row.insertCell();
        cellNo.textContent = row.rowIndex;
        row.title = url;
        this.updateCasStatus(url, cellStatus);
      }.bind(this)
    );
  };

  LinkTab.prototype.updateCasStatus = function (iurl, cell) {
    var self = this,
      success = function () {
        self.refreshURLStatus(true, cell);
      },
      error = function () {
        self.refreshURLStatus(false, cell);
      };
    $.ajax({
      url: iurl,
      type: "HEAD",
      timeout: 1000,
      cache: false,
      /*statusCode: {
             200: success,
             400: error,
             0: error
             }*/
      success: success,
      error: error,
    });
  };

  LinkTab.prototype.refreshURLStatus = function (reachable, cell) {
    cell.textContent = String.fromCharCode(reachable ? 0x2714 : 0x2718);
    cell.title = reachable ? "reachable" : "unreachable";
    cell.style["color"] = "white";
    cell.style["background-color"] = reachable ? "green" : "red";
    cell.style["text-align"] = "center";
    this.casReachable = reachable;
  };

  /**
   * Manage Overview tab
   * @class
   * @alias OverviewTab
   * @memberof core.Debug
   * @extends core.Debug.Tab
   * @param {Number} tabIndex - index of tab
   */
  function OverviewTab(tabIndex) {
    this.name = "Overview";
    this.index = 0;
    this.casReachable = null;
    this.elements = {
      version: { html: null, id: this.getId() },
      diagnosisMode: {
        html: null,
        name: this.getId(),
        onclick: this.onDiagnosisModeClick,
      },
      unit: { html: null, name: this.getId(), onclick: this.onUnitClick },
      allowPoke: { html: null, id: this.getId() },
      url: { html: null, id: this.getId() },
      urlparent: { html: null, id: this.getId() },
      wsServer: { html: null, id: this.getId() },
      wsStatus: { html: null, id: this.getId() },
      username: { html: null, id: this.getId() },
      login: { html: null, id: this.getId() },
      casCaption: { html: null, id: this.getId() },
      casServer: { html: null, id: this.getId() },
      casStatus: { html: null, id: this.getId() },
      plc: { html: null, id: this.getId() },
      shape: { html: null, id: this.getId() },
      animation: { html: null, id: this.getId() },
      text: { html: null, id: this.getId() },
      link: { html: null, id: this.getId() },
      gv: { html: null, id: this.getId() },
      glc: { html: null, id: this.getId() },
    };
    Tab.call(this, tabIndex);
  }

  OverviewTab.prototype = Object.create(Tab.prototype);
  OverviewTab.prototype.constructor = OverviewTab;

  OverviewTab.prototype.init = function () {
    this.html = this.getHTML();
  };

  OverviewTab.prototype.getHTML = function () {
    var tooltip = "";
    if (serverPool) {
      tooltip += "Server list:\n";
      serverPool.forEach(function (element) {
        tooltip += element + "\n";
      });
    }
    var urlparent =
      window.location !== window.parent.location
        ? document.referrer
        : document.location;
    var html =
      '<div>\n\
                    <p class="debugP"><b>Version</b></p>\n\
                    <table class="DebugDataTable" style="width:100%">\n\
                        <tr>\n\
                            <td width="20%">emos.js</td>\n\
                            <td width="80%" id="' +
      this.elements.version.id +
      '"></td>\n\
                        </tr>\n\
                    </table>\n\
                </div>\n\
                <div>\n\
                    <p class="debugP"><b>URL</b></p>\n\
                    <table class="DebugDataTable" style="width:100%">\n\
                        <tr>\n\
                            <td width="20%">URL</td>\n\
                            <td width="80%"><a target="_blank" href="' +
      window.location.href +
      '" id="' +
      this.elements.url.id +
      '">' +
      window.location.href +
      '</a></td>\n\
                        </tr>\n\
                        <tr>\n\
                            <td width="20%">URL parent</td>\n\
                            <td width="80%"><a target="_blank" href="' +
      urlparent +
      '" id="' +
      this.elements.urlparent.id +
      '">' +
      urlparent +
      '</a></td>\n\
                        </tr>\n\
                    </table>\n\
                </div>\n\
                <div>\n\
                    <p class="debugP"><b>Authentication & User rights</b></p>\n\
                    <table class="DebugDataTable" style="width:100%">\n\
                        <tr>\n\
                            <td width="20%">Username</td>\n\
                            <td width="60%" id="' +
      this.elements.username.id +
      '"></td>\n\
                            <td width="20%"><button class="debugLogin" id="' +
      this.elements.login.id +
      '">Login</button></td>\n\
                        </tr>\n\
                    </table>\n\
                </div>\n\
                <div>\n\
                    <p class="debugP"><b>WebSocket connection</b></p>\n\
                    <table class="DebugDataTable" style="width:100%">\n\
                        <tr>\n\
                            <td width="20%" title="' +
      tooltip +
      '">WS URI</td>\n\
                            <td width="60%" id="' +
      this.elements.wsServer.id +
      '"></td>\n\
                            <td width="20%" id="' +
      this.elements.wsStatus.id +
      '"></td>\n\
                        </tr>\n\
                    </table>\n\
                </div>\n\
                <div>\n\
                    <p class="debugP"><b>CAS Server</b></p>\n\
                    <table class="DebugDataTable" style="width:100%">\n\
                        <tr>\n\
                            <td width="20%" id="' +
      this.elements.casCaption.id +
      '">CAS URI</td>\n\
                            <td width="60%"><a target="_blank" href="" id="' +
      this.elements.casServer.id +
      '"></a></td>\n\
                            <td width="20%" id="' +
      this.elements.casStatus.id +
      '"></td>\n\
                        </tr>\n\
                    </table>\n\
                </div>\n\
                <div>\n\
                    <p class="debugP"><b>DiagnosisWindowMode</b></p>\n\
                    <input type="radio" name="' +
      this.elements.diagnosisMode.name +
      '" value="0"> Built-in\n\
                    <input type="radio" name="' +
      this.elements.diagnosisMode.name +
      '" value="1"> Framework\n\
                    <input type="radio" name="' +
      this.elements.diagnosisMode.name +
      '" value="2"> Both\n\
                </div>\n\
                <div>\n\
                    <p class="debugP"><b>Unit</b></p>\n\
                    <input type="radio" name="' +
      this.elements.unit.name +
      '" value="0"> Metric\n\
                    <input type="radio" name="' +
      this.elements.unit.name +
      '" value="1"> Imperial\n\
                    <input type="radio" name="' +
      this.elements.unit.name +
      '" value="2"> Locale\n\
                </div>\n\
                <div>\n\
                    <p class="debugP">\n\
                        <b>Allow poke</b>\n\
                        <input type="checkbox" id="' +
      this.elements.allowPoke.id +
      '">\n\
                    </p>\n\
                </div>\n\
                <div>\n\
                    <p class="debugP"><b>HMI</b></p>\n\
                    <table class="DebugDataTable" style="width:100%">\n\
                        <tr>\n\
                            <td title="Number of IO/Alarm topics" width="20%">PLC topics</td>\n\
                            <td width="60%" id="' +
      this.elements.plc.id +
      '"></td>\n\
                            <td></td>\n\
                        </tr>\n\
                        <tr>\n\
                            <td title="Number of animated shapes" width="20%">Shapes</td>\n\
                            <td width="60%" id="' +
      this.elements.shape.id +
      '"></td>\n\
                            <td></td>\n\
                        </tr>\n\
                        <tr>\n\
                            <td title="Number of Global animations" width="20%">Animations</td>\n\
                            <td width="60%" id="' +
      this.elements.animation.id +
      '"></td>\n\
                            <td></td>\n\
                        </tr>\n\
                        <tr>\n\
                            <td title="Number of language texts" width="20%">Texts</td>\n\
                            <td width="60%" id="' +
      this.elements.text.id +
      '"></td>\n\
                            <td></td>\n\
                        </tr>\n\
                        <tr>\n\
                            <td title="Number of links" width="20%">Links</td>\n\
                            <td width="60%" id="' +
      this.elements.link.id +
      '"></td>\n\
                            <td></td>\n\
                        </tr>\n\
                        <tr>\n\
                            <td title="Number of Global variables" width="20%">GV</td>\n\
                            <td width="60%" id="' +
      this.elements.gv.id +
      '"></td>\n\
                            <td></td>\n\
                        </tr>\n\
                        <tr>\n\
                            <td title="Number of Global line codes" width="20%">GLC</td>\n\
                            <td width="60%" id="' +
      this.elements.glc.id +
      '"></td>\n\
                            <td></td>\n\
                        </tr>\n\
                    </table>\n\
                </div>';

    return html;
  };

  OverviewTab.prototype.onHTMLReady = function () {
    for (var key in this.elements) {
      var el = this.elements[key];
      if (el.id) {
        el.html = document.getElementById(el.id);
      } else if (el.name) {
        el.html = document.getElementsByName(el.name);
        for (var i = 0; i < el.html.length; i++) {
          var radio = el.html[i];
          radio.addEventListener(
            "click",
            function (r) {
              this.onclick(r.value);
            }.bind(el, radio),
            false
          );
        }
      }
    }
    this.update();
    emosWS.addEventListener("connecting", this.updateWSStatus.bind(this));
    emosWS.addEventListener("openWS", this.updateWSStatus.bind(this));
    emosWS.addEventListener("close", this.updateWSStatus.bind(this));
    emosWS.addEventListener("UserRight", this.updateUser.bind(this));
    emosWS.addEventListener("unit", this.updateUnit.bind(this));
    emosWS.addEventListener("HMIplc", this.updateHMIplc.bind(this));
    emosWS.addEventListener("HMIshape", this.updateHMIshape.bind(this));
    emosWS.addEventListener("HMIanimation", this.updateHMIanimation.bind(this));
    emosWS.addEventListener("HMItext", this.updateHMItext.bind(this));
    emosWS.addEventListener("HMIlink", this.updateHMIlink.bind(this));
    emosWS.addEventListener("HMIgv", this.updateHMIgv.bind(this));
    emosWS.addEventListener("HMIglc", this.updateHMIglc.bind(this));
    emosWS.addEventListener(
      "ActiveCasServerReady",
      this.updateCasCaption.bind(this)
    );

    this.elements.login.html.addEventListener(
      "click",
      function () {
        emosWS.login.au.showDialog();
        //emosWS.login.au.show();
      }.bind(this),
      false
    );

    this.elements.allowPoke.html.addEventListener(
      "click",
      function (e) {
        emosWS.attr.allowPoke = e.target.checked;
      }.bind(this),
      false
    );
  };

  OverviewTab.prototype.onDiagnosisModeClick = function (value) {
    emosWS.attr.DiagnosisWindowMode = parseInt(value);
  };

  OverviewTab.prototype.onUnitClick = function (value) {
    emosWS.setUnit(parseInt(value));
  };

  OverviewTab.prototype.update = function () {
    this.updateVersion();
    this.updateDiagnosisWindowMode();
    this.updateUnit();
    this.updateAllowPoke();
    this.updateURL();
    //this.updateAuthentication();
    this.updateWSStatus();
    this.updateCas();
    this.updateCasCaption();
    this.updateHMI();
  };

  OverviewTab.prototype.updateVersion = function () {
    this.elements.version.html.textContent = emosWS.version;
  };

  OverviewTab.prototype.updateDiagnosisWindowMode = function () {
    try {
      this.elements.diagnosisMode.html[
        emosWS.attr.DiagnosisWindowMode
      ].checked = true;
    } catch (e) {
      console.error("[updateDiagnosisWindowMode] : " + e);
    }
  };

  OverviewTab.prototype.updateUnit = function (unitID) {
    try {
      var id = typeof unitID !== "undefined" ? unitID : emosWS.getUnit();
      this.elements.unit.html[id].checked = true;
    } catch (e) {
      console.error("[updateUnit] : " + e);
    }
  };

  OverviewTab.prototype.updateAllowPoke = function () {
    this.elements.allowPoke.html.checked = emosWS.attr.allowPoke;
  };

  OverviewTab.prototype.updateHMI = function () {
    if (emosWS.debug.dialog) {
      this.updateHMIplc();
      this.updateHMIshape();
      this.updateHMIanimation();
      this.updateHMItext();
      this.updateHMIlink();
      this.updateHMIgv();
      this.updateHMIglc();
    }
  };

  OverviewTab.prototype.updateHMIplc = function () {
    if (this.isActive())
      this.elements.plc.html.textContent = emosWS.topicNumber;
  };
  OverviewTab.prototype.updateHMIshape = function () {
    if (this.isActive())
      this.elements.shape.html.textContent = emosWS.shapeNumber;
  };
  OverviewTab.prototype.updateHMIanimation = function () {
    if (this.isActive())
      this.elements.animation.html.textContent = emosWS.animationNumber;
  };
  OverviewTab.prototype.updateHMItext = function () {
    if (this.isActive())
      this.elements.text.html.textContent = emosWS.textNumber;
  };
  OverviewTab.prototype.updateHMIlink = function () {
    if (this.isActive())
      this.elements.link.html.textContent = emosWS.linkNumber;
  };
  OverviewTab.prototype.updateHMIgv = function () {
    if (this.isActive()) this.elements.gv.html.textContent = emosWS.gvNumber;
  };
  OverviewTab.prototype.updateHMIglc = function () {
    if (this.isActive()) this.elements.glc.html.textContent = emosWS.glcNumber;
  };

  OverviewTab.prototype.updateWSStatus = function (msg) {
    this.elements.wsServer.html.textContent = emosWS.getWSHostname();
    var text = (this.elements.wsStatus.html.textContent =
      msg === "connecting"
        ? msg
        : emosWS.getWebSocketStatus()
        ? "connected"
        : "closed");
    this.elements.wsStatus.html.style["background-color"] =
      text === "connected" ? "green" : "red";
    this.elements.wsStatus.html.style["color"] = "white";
  };

  OverviewTab.prototype.updateUser = function (msg) {
    this.elements.username.html.textContent = msg.username;
    var rtext = "";
    if (msg.userright) {
      var rights = msg.userright.rights;
      rtext = "User rights:\n\n";
      for (var key in rights) {
        rtext += key + " : \n" + rights[key] + "\n\n";
      }
    }
    this.elements.username.html.title = rtext;
    this.updateLogin(msg);
  };

  OverviewTab.prototype.updateLogin = function (msg) {
    this.elements.login.html.textContent =
      msg.status === "in" ? "Logout" : "Login";
  };

  OverviewTab.prototype.updateCas = function () {
    this.updateCasStatus();
  };

  OverviewTab.prototype.updateURL = function () {
    emosWS.debug.QR.setTooltip(this.elements.url.html);
    emosWS.debug.QR.setTooltip(this.elements.urlparent.html);
  };

  OverviewTab.prototype.updateCasCaption = function () {
    var cas = emosWS.Cas;
    var rtext = "HMI callback URL : \n" + cas.checkCallbackURL + "\n\n";
    rtext += "Trusted App Servers : \n";
    cas.trustedAppServers.forEach(function (element) {
      rtext += element + "\n";
    });
    this.elements.casCaption.html.title = rtext;

    this.elements.casServer.html.textContent =
      this.elements.casServer.html.href = emosWS.Cas.casServerURL;
    emosWS.debug.QR.setTooltip(this.elements.casServer.html);
  };

  OverviewTab.prototype.refresh = function () {
    this.updateDiagnosisWindowMode();
    this.updateUnit();
    this.updateAllowPoke();
    this.updateCasStatus();
    this.updateHMI();
  };

  OverviewTab.prototype.updateCasStatus = function () {
    if (!this.isActive()) return;

    emosWS.Cas.isReachable({
      success: function () {
        this.refreshCasStatus(true);
      }.bind(this),
      error: function () {
        this.refreshCasStatus(false);
      }.bind(this),
    });
  };

  OverviewTab.prototype.refreshCasStatus = function (reachable) {
    this.elements.casStatus.html.textContent = reachable
      ? "reachable"
      : "unreachable";
    this.elements.casStatus.html.style["color"] = "white";
    this.elements.casStatus.html.style["background-color"] = reachable
      ? "green"
      : "red";
    this.casReachable = reachable;
    setTimeout(this.updateCasStatus.bind(this), 3000);
  };

  /**
   * Manage Variable tab
   * @class
   * @alias VariableTab
   * @memberof core.Debug
   * @extends core.Debug.Tab
   * @param {Number} tabIndex - index of tab
   */
  function VariableTab(tabIndex) {
    this.name = "Variable";
    this.index = 0;
    this.modeAll = false; //mode All or Custom
    this.activated = false;
    this.elements = {
      radioDiv: { html: null, id: this.getId() },
      radioAll: { html: null, id: this.getId() },
      radioCustom: { html: null, id: this.getId() },
      addDiv: { html: null, id: this.getId() },
      addInput: { html: null, id: this.getId() },
      add: { html: null, id: this.getId() },
      varTable: { html: null, id: this.getId() },
    };
    this.radioId = this.getId();
    this.initialize = this.initialize.bind(this);

    Tab.call(this, tabIndex);
  }

  VariableTab.prototype = Object.create(Tab.prototype);
  VariableTab.prototype.constructor = VariableTab;

  VariableTab.prototype.init = function () {
    this.html = this.getHTML();
  };

  VariableTab.prototype.getHTML = function () {
    var html =
      '<div>\
                    <div class="FloatLeft" id="' +
      this.elements.radioDiv.id +
      '">\
                        <input' +
      (this.modeAll ? ' checked="checked"' : "") +
      ' type="radio" id="' +
      this.elements.radioAll.id +
      '" name="' +
      this.radioId +
      '"><label for="' +
      this.elements.radioAll.id +
      '">All</label>\
                        <input' +
      (this.modeAll ? "" : ' checked="checked"') +
      ' type="radio" id="' +
      this.elements.radioCustom.id +
      '" name="' +
      this.radioId +
      '"><label for="' +
      this.elements.radioCustom.id +
      '">Custom</label>\
                    </div>\
                    <div class="FloatRight" id="' +
      this.elements.addDiv.id +
      '">\
                        <input type="text" id="' +
      this.elements.addInput.id +
      '">\
                        <button type="button" id="' +
      this.elements.add.id +
      '">Add</button>\
                    </div>\
                </div>\
                <div>\
                    <table class="DebugDataTable" style="width:100%">\
                        <thead>\
                            <tr>\
                                <td width="10%">No.</button></td>\
                                <td width="30%">Name</td>\
                                <td width="45%">Value</td>\
                                <td width="15%">Listeners</td>\
                            </tr>\
                        </thead>\
                        <tbody id="' +
      this.elements.varTable.id +
      '" ></tbody>\
                    </table>\
                </div>';

    return html;
  };

  VariableTab.prototype.onHTMLReady = function () {
    for (var key in this.elements) {
      var e = this.elements[key];
      e.html = document.getElementById(e.id);
    }

    $("#" + this.elements.radioDiv.id).buttonset();
    this.elements.radioAll.html.addEventListener(
      "click",
      this.setMode.bind(this, true)
    );
    this.elements.radioCustom.html.addEventListener(
      "click",
      this.setMode.bind(this, false)
    );
    this.elements.add.html.addEventListener(
      "click",
      this.onAddButtonClick.bind(this)
    );
  };

  VariableTab.prototype.setMode = function (modeAll) {
    if (this.modeAll !== modeAll || !this.activated) {
      this.modeAll = modeAll;
      this.elements.addDiv.html.style.visibility = modeAll
        ? "hidden"
        : "visible";
      this.elements.addInput.html.value = "";
      this.unsubscribeAll();
      this.update();
    }
  };

  VariableTab.prototype.unsubscribeAll = function () {
    var table = this.elements.ioTable.html;
    for (var i = 0, len = table.rows.length; i < len; i++) {
      var row = table.rows[i];
      row.gv.unregister(this.initialize);
    }
  };

  VariableTab.prototype.update = function () {
    this.activated = true;
    var table = this.elements.varTable.html;

    //empty table
    while (table.rows.length > 0) {
      table.deleteRow(0);
    }

    if (this.modeAll) {
      //add rows for global variable
      emosWS.globalVariables.forEach(
        function (gv) {
          this.addRow(gv);
        }.bind(this)
      );
    }
  };

  VariableTab.prototype.addRow = function (gv) {
    var name = gv.getName();
    if (name) {
      var row = this.elements.varTable.html.insertRow();
      this.updateRow(row, gv);
      this.subscribe(row, gv);
    }
  };

  VariableTab.prototype.updateRow = function (row, gv) {
    //empty row if it not empty
    if (row.cells.length > 0) {
      while (row.cells.length > 0) {
        row.deleteCell(0);
      }
    }

    var cellNo = row.insertCell(),
      cellName = row.insertCell(),
      cellValue = row.insertCell(),
      cellListeners = row.insertCell();

    cellNo.textContent = row.rowIndex;
    cellName.textContent = gv.getName();
    cellValue.textContent = gv.myValue;
    cellListeners.textContent = gv.subscribers.length;

    row.title = gv.toDebugString();
    this.processCell(cellValue, gv);
  };

  VariableTab.prototype.processCell = function (cell, gv) {
    cell.contentEditable = true;
    cell.addEventListener(
      "blur",
      function () {
        gv.setValue(cell.textContent);
      },
      false
    );
  };

  VariableTab.prototype.subscribe = function (row, gv) {
    var subscriber = new Subscriber(this.initialize, { row: row, gv: gv });
    gv.register(subscriber);
    row.gv = gv;
  };

  VariableTab.prototype.unsubscribeAll = function () {
    var table = this.elements.varTable.html;
    for (var i = 0, len = table.rows.length; i < len; i++) {
      var row = table.rows[i];
      row.gv.unregister(this.initialize);
    }
  };

  VariableTab.prototype.initialize = function (value, param) {
    this.updateRow(param.row, param.gv);
    this.highlight(param.row);
  };

  VariableTab.prototype.refresh = function () {
    this.setMode(this.modeAll);
  };

  VariableTab.prototype.onAddButtonClick = function () {
    var name = this.elements.addInput.html.value.replace(/ /g, "");
    var gv = window[name];

    if (gv instanceof GlobalVariable) {
      var table = this.elements.varTable.html;
      for (var i = 0, len = table.rows.length; i < len; i++) {
        var row = table.rows[i];
        if (row.gv === gv) return;
      }

      this.elements.addInput.html.value = "";
      this.addRow(gv);
    }
  };

  VariableTab.prototype.deactivate = function () {
    this.unsubscribeAll();
    this.activated = false;
  };

  /**
   * Manage QR functionality
   * @class
   * @alias QR
   * @memberof core.Debug
   */
  function QR() {
    this.size = "150x150";
    this.api = "https://api.qrserver.com/v1/create-qr-code/?";
    this.iframe = null;
    this.init();
  }

  QR.prototype.init = function () {
    var id = "emosQR001";
    window.addEventListener(
      "load",
      function () {
        var div = "<iframe class='QR' src='' id='" + id + "'></iframe>";
        $("body").append($(div));
        this.iframe = document.getElementById(id);
      }.bind(this),
      false
    );
  };

  QR.prototype.showQR = function (url, isize) {
    var size = isize || this.size;
    this.iframe.src = this.api + "size=" + size + "&data=" + url;
    this.iframe.style.visibility = "visible";
  };

  QR.prototype.hideQR = function () {
    this.iframe.style.visibility = "hidden";
  };

  QR.prototype.setTooltip = function (a) {
    a.addEventListener(
      "mouseover",
      this.showQR.bind(this, a.href, null),
      false
    );
    a.addEventListener("mouseout", this.hideQR.bind(this), false);
  };
  /**
   * Provides funtionalities for debugging in browser
   * @module emosWS/core/Debug
   */

  /**
   * Provides funtionalities for debugging in browser
   *
   * @class
   * @alias Debug
   * @memberof core
   */
  function Debug() {
    window.addEventListener(
      "load",
      function () {
        emosWS.require(
          {
            css: [],
            js: ["/lib/js/jquery.uitablefilter.js"],
          },
          function () {
            emosWS.dispatchEvent({ type: "DebugLibLoad" });
          }
        );
      }.bind(this),
      false
    );

    var i = 0;
    this.SHOW_BADQUALITYTAGS = true;
    this.QR = new QR();
    this.overviewTab = new OverviewTab(i++);
    this.dataTab = new DataTab(i++);
    this.variableTab = new VariableTab(i++);
    this.animationTab = new AnimationTab(i++);
    this.linkTab = new LinkTab(i++);
    this.tabs = [
      this.overviewTab,
      this.dataTab,
      this.variableTab,
      this.animationTab,
      this.linkTab,
    ];
    this.activeTabId = null;
    this.dialog = null;
    this.symbol = null;
    this.ctrlPressed = false;
    this.tabsUI = null;
    this.debugSymbolSettingVisibility = true;
    this.init();
  }

  Debug.prototype.init = function () {
    window.addEventListener(
      "load",
      function () {
        document.addEventListener("keydown", this.onkeydown.bind(this), false);
        document.addEventListener("keyup", this.onkeyup.bind(this), false);
        emosWS.addEventListener(
          "ready",
          function () {
            if (emosWS.attr.svg) {
              emosWS.attr.svg.addEventListener(
                "keydown",
                this.onkeydown.bind(this),
                false
              );
              emosWS.attr.svg.addEventListener(
                "keyup",
                this.onkeyup.bind(this),
                false
              );
              this.symbol = this.createSymbol();
            }
            this.allowContextMenu(false);
          }.bind(this)
        );
        this.dialog = this.createWindow();
      }.bind(this),
      false
    );
  };

  Debug.prototype.onkeydown = function (e) {
    this.ctrlPressed = e.ctrlKey;
    if (e.shiftKey && e.ctrlKey) {
      //Ctrl + Shift
      this.show();
    } else if (e.keyCode === 49 && e.ctrlKey) {
      //Ctrl + 1
      emosWS.attr.DiagnosisWindowMode =
        emosWS.attr.DiagnosisWindowMode === 2 ? 1 : 2;
      console.info(
        "[DiagnosisWindowMode] = " + emosWS.attr.DiagnosisWindowMode
      );
    }
  };

  Debug.prototype.onkeyup = function (e) {
    this.ctrlPressed = false;
  };

  Debug.prototype.isOpen = function () {
    if (!this.dialog) return false;

    return this.dialog.dialog("isOpen");
  };

  Debug.prototype.createWindow = function () {
    var self = this;

    var id = "emosdebug" + Math.floor(Math.random() * 1000000 + 1),
      tabsId = id + "-tab",
      index = 0,
      uls = "",
      uldivs = "",
      div = '<div id="' + id + '"><div id="' + tabsId + '"><ul>';

    this.tabs.forEach(function (tab, index) {
      var tabId = tabsId + index;
      uls += '<li><a href="#' + tabId + '">' + tab.name + "</a></li>";
      uldivs += '<div id="' + tabId + '">' + tab.html + "</p></div>";
    });
    div += uls + "</ul>" + uldivs + "</div></div>";

    $("body").append($(div));
    var dialog = $("#" + id)
      .dialog({
        title: "Debug window", //window.location.href,
        width: 480,
        height: 450,
        resizable: true,
        autoOpen: false,
        close: this.onDialogClose.bind(this),
        open: this.onDialogOpen.bind(this),
        resize: function () {
          if (emosWS.attr.svgobject)
            emosWS.attr.svgobject.style["pointer-events"] = "none";
        },
      })
      .mouseleave(function () {
        if (emosWS.attr.svgobject)
          emosWS.attr.svgobject.style["pointer-events"] = "auto";
      });

    dialog.emos = {
      tabs: $("#" + tabsId).tabs({
        activate: function (event, ui) {
          self.onTabActive($(this).tabs("option", "active"));
        },
      }),
    };
    this.tabsUI = dialog.emos.tabs;
    this.activeTabId = dialog.emos.tabs.tabs("option", "active");
    this.tabs.forEach(function (tab) {
      tab.onHTMLReady();
    });
    this.onTabActive(this.activeTabId);
    return dialog;
  };

  Debug.prototype.onDialogClose = function () {
    this.allowContextMenu(false);
    this.tabs.forEach(function (tab) {
      tab.deactivate();
    });
  };

  Debug.prototype.onDialogOpen = function () {
    this.allowContextMenu(true);
  };

  Debug.prototype.allowContextMenu = function (yes) {
    if (yes) {
      document.removeEventListener("contextmenu", this.turnContextMenuOff);
      if (emosWS.attr.svg)
        emosWS.attr.svg.removeEventListener(
          "contextmenu",
          this.turnContextMenuOff
        );
    } else {
      document.addEventListener("contextmenu", this.turnContextMenuOff);
      if (emosWS.attr.svg)
        emosWS.attr.svg.addEventListener(
          "contextmenu",
          this.turnContextMenuOff
        );
    }
  };

  Debug.prototype.turnContextMenuOff = function (e) {
    e.preventDefault();
  };

  Debug.prototype.onTabActive = function (activeTabId) {
    this.activeTabId = activeTabId;
    this.tabs.forEach(function (tab, index) {
      if (index === activeTabId) {
        tab.activate();
      } else {
        tab.deactivate();
      }
    });

    //console.info("[Debug onTabActive] : activeTabId =", activeTabId);
  };

  Debug.prototype.createSymbol = function () {
    var timer = null,
      touchduration = 3000, //keep touching 5 seconds to show the Debug window
      showDebug = function (showBadQualityTags) {
        if (!this.dialog.dialog("isOpen")) {
          this.show(showBadQualityTags);
        }
      }.bind(this),
      ontouchstart = function () {
        console.log("ontouchstart");
        timer = setTimeout(showDebug, touchduration);
      },
      ontouchend = function () {
        //stops short touches from firing the event
        if (timer) clearTimeout(timer);
      },
      id = "emosQualityBadSymbol" + Math.floor(Math.random() * 1000000 + 1),
      div =
        '<div class="debugSymbol" id="' +
        id +
        '">\
                    <span class="dsBackground"></span>\
                    <span class="dsIcon"></span>\
                </div>';

    $("body").append($(div));
    var symbol = document.getElementById(id);
    symbol.addEventListener(
      "click",
      showDebug.bind(undefined, this.SHOW_BADQUALITYTAGS),
      false
    );

    emosWS.attr.svg.addEventListener("touchstart", ontouchstart, false);
    emosWS.attr.svg.addEventListener("touchend", ontouchend, false);
    emosWS.attr.svg.addEventListener("mousedown", ontouchstart, false);
    emosWS.attr.svg.addEventListener("mouseup", ontouchend, false);
    emosWS.addEventListener("Quality", this.setDebugSymbolVisiblity.bind(this));

    return symbol;
  };

  Debug.prototype.show = function (showBadQualityTags) {
    if (!this.isOpen()) {
      this.dialog.dialog("open");
      var openTabId = showBadQualityTags
        ? this.tabs.indexOf(this.dataTab)
        : this.activeTabId;
      if (showBadQualityTags) {
        this.tabsUI.tabs({ active: openTabId });
        this.dataTab.showQualityBadTags();
      }
      this.tabs[openTabId].activate();
    }
  };

  Debug.prototype.setDebugSymbolVisiblity = function (visibility) {
    if (typeof visibility !== "object") {
      this.debugSymbolSettingVisibility = visibility;
    }
    if (this.symbol) {
      var qualityIsGood = Object.keys(emosWS.badQualityTags).length === 0;
      this.symbol.style["display"] = qualityIsGood
        ? "none"
        : this.debugSymbolSettingVisibility
        ? "block"
        : "none";
    }
  };

  /**
   * Provides REST API for Alarm
   *
   * @class
   * @alias RestAlarm
   * @memberof core.Rest
   */
  function RestAlarm() {
    this.path = "alarms";
    this.pathTop = "top";
    this.pathTopX = "topX";
    this.pathChronology = "history";
    this.pathFilter = "filter";
    this.SYSTEM = "$System";
    this.TYPE_ANY = "any";
  }

  /**
   * Get history of one or multiple alarm groups. The results are sorted by the alarm occured date.
   *
   * @deprecated since 1.0.8-9, please use {@link core.Rest.RestAlarm#topOfType} instead.
   *
   * @param {(String|Array)} - name of an alarm group or array of alarm group name
   * @param {Number} max - the maximum entries of alarm history to get
   * @param {type} success - the callback function fired when alarm history (in Array of Alarm) comming
   *
   * @example <caption>1. Get top of 100 alarm history entries of the alarm group "PT_PTP_311213"</caption>
   * emosWS.rest.alarm.top("PT_PTP_311213", 100, function(alarmArray){
   *      console.log(alarmArray);
   * });
   *
   * @example <caption><br>2. Get top of 200 alarm history entries of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.top(["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"], 200, function(alarmArray){
   *      console.log(alarmArray);
   * });
   */
  RestAlarm.prototype.top = function (alarmGroup, max, success) {
    alarmGroup = this.getQuerryAlarmGroup(alarmGroup);

    var language = parseInt(emosWS.getLanguage(), 16),
      url =
        this.getPathTop() +
        "?alg=" +
        alarmGroup +
        "&max=" +
        max +
        "&language=" +
        language;

    $.getJSON(
      url,
      function (data) {
        success(this.classifyAlarms(data));
      }.bind(this)
    );
  };

  /**
   * Get log of one or multiple alarm groups of an alarm type (alarming, operating, any). The results are sorted by the alarm occured date.
   *
   * @param {Object} params - parameters
   * @param {"alarming"|"operating"|"any"} [params.type="any"] - the type of alarm
   * @param {(String|Array)} [params.alarmGroup="$System"] - name of an alarm group or array of alarm group name
   * @param {Number} [params.first=0] - the index of first entry to get
   * @param {Number} [params.max=100] - the maximum entries of alarm history to get
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   *
   * @example <caption>1. ALARMING: Get 100 "alarming" log entries of the alarm group "PT_PTP_311213"</caption>
   * emosWS.rest.alarm.topOfType({
   *      type: "alarming",
   *      alarmGroup: "PT_PTP_311213",
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>2. ALARMING: Get 200 "alarming" log entries of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.topOfType({
   *      type: "alarming",
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>3. ALARMING: Get 200 "alarming" log entries from the started index of 400, of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.topOfType({
   *      type: "alarming",
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      first: 400,
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>4. OPERATING: Get 100 "operating" log entries of the alarm group "PT_PTP_311213"</caption>
   * emosWS.rest.alarm.topOfType({
   *      type: "operating",
   *      alarmGroup: "PT_PTP_311213",
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>5. OPERATING: Get 200 "operating" log entries of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.topOfType({
   *      type: "operating",
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>6. OPERATING: Get 200 "operating" log entries from the started index of 600, of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.topOfType({
   *      type: "operating",
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      first: 600,
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>7. ANY: Get 100 any log entries of the alarm group "PT_PTP_311213"</caption>
   * emosWS.rest.alarm.topOfType({
   *      alarmGroup: "PT_PTP_311213",
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>8. ANY: Get 200 any log entries of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.topOfType({
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>9. ANY: Get 200 "operating" log entries from the started index of 800, of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.topOfType({
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      first: 800,
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   */
  RestAlarm.prototype.topOfType = function (params) {
    this.topType(params, this.getPathTop());
  };

  /**
   * Get tops of one or multiple alarm groups of an alarm type (alarming, operating, any). The results are sorted by alarm's counting number.
   *
   * @param {Object} params - parameters
   * @param {"alarming"|"operating"|"any"} [params.type="any"] - the type of alarm
   * @param {(String|Array)} [params.alarmGroup="$System"] - name of an alarm group or array of alarm group name
   * @param {Number} [params.first=0] - the index of first entry to get
   * @param {Number} [params.max=100] - the maximum entries of alarm history to get
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   *
   * @example <caption>1. ALARMING: Get top of 100 "alarming" entries of the alarm group "PT_PTP_311213"</caption>
   * emosWS.rest.alarm.topXOfType({
   *      type: "alarming",
   *      alarmGroup: "PT_PTP_311213",
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>2. ALARMING: Get top of 200 "alarming" entries of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.topXOfType({
   *      type: "alarming",
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>3. ALARMING: Get top of 200 "alarming" entries from the started index of 400, of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.topXOfType({
   *      type: "alarming",
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      first: 400,
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>4. OPERATING: Get top of 100 "operating" entries of the alarm group "PT_PTP_311213"</caption>
   * emosWS.rest.alarm.topXOfType({
   *      type: "operating",
   *      alarmGroup: "PT_PTP_311213",
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>5. OPERATING: Get top of 200 "operating" entries of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.topXOfType({
   *      type: "operating",
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>6. OPERATING: Get top of 200 "operating" entries from the started index of 600, of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.topXOfType({
   *      type: "operating",
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      first: 600,
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>7. ANY: Get top of 100 any entries of the alarm group "PT_PTP_311213"</caption>
   * emosWS.rest.alarm.topXOfType({
   *      alarmGroup: "PT_PTP_311213",
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>8. ANY: Get top of 200 any entries of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.topXOfType({
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>9. ANY: Get top of 200 "operating" entries from the started index of 800, of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.topXOfType({
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      first: 800,
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   */
  RestAlarm.prototype.topXOfType = function (params) {
    this.topType(params, this.getPathTopX());
  };

  RestAlarm.prototype.topType = function (params, apiPath) {
    var alarmGroup =
        typeof params.alarmGroup === "undefined"
          ? this.SYSTEM
          : this.getQuerryAlarmGroup(params.alarmGroup),
      first = typeof params.first === "undefined" ? 0 : params.first,
      max = typeof params.max === "undefined" ? 100 : params.max,
      success = params.success,
      type = typeof params.type === "undefined" ? this.TYPE_ANY : params.type,
      language = parseInt(emosWS.getLanguage(), 16),
      url =
        apiPath +
        "?alg=" +
        alarmGroup +
        "&first=" +
        first +
        "&max=" +
        max +
        "&language=" +
        language +
        "&type=" +
        type;

    $.ajax({
      url: url,
      type: "GET",
      success: function (data) {
        success(this.classifyAlarms(data));
      }.bind(this),
      error: params.error,
      complete: params.complete,
    });
  };

  /**
   * Get history of one or multiple alarm groups.
   *
   * @param {(String|Array)} - name of an alarm group or array of alarm group name
   * @param {Date} startDate - start date of filter range
   * @param {Date} endDate - end date of filter range
   * @param {Boolean} all - determines if get all alarm history matched.
   * @param {Number} first - the index of first entry to get from the matched entries
   * @param {Number} max - the maximum entries of alarm history to get
   * @param {type} success - the callback function fired when alarm history (in Array of Alarm) comming     *
   */
  RestAlarm.prototype.filter = function (
    alarmGroup,
    startDate,
    endDate,
    all,
    first,
    max,
    success
  ) {
    alarmGroup = this.getQuerryAlarmGroup(alarmGroup);

    var language = parseInt(emosWS.getLanguage(), 16),
      url =
        this.getPathFilter() +
        "?alg=" +
        alarmGroup +
        "&startDate=" +
        startDate +
        "&endDate=" +
        endDate +
        "&all=" +
        (all ? "true" : "false") +
        "&first=" +
        first +
        "&max=" +
        max +
        "&language=" +
        language;

    $.getJSON(
      url,
      function (data) {
        success(this.classifyAlarms(data));
      }.bind(this)
    );
  };

  /**
   * Get chronology historic entries of one or multiple alarm groups.
   *
   * @param {Object} params - parameters
   * @param {(String|Array)} [params.alarmGroup="$System"] - name of an alarm group or array of alarm group name
   * @param {Number} [params.max=20] - the maximum entries to get
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   *
   * @example <caption>1. Get 20 entries of chronology historic of the alarm group "PT_PTP_311213"</caption>
   * emosWS.rest.alarm.chronology({
   *      alarmGroup: "PT_PTP_311213",
   *      success: function(entries){
   *          console.log(entries);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>2. Get 200 entries of chronology historic of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.alarm.chronology({
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      max: 200,
   *      success: function(entries){
   *          console.log(entries);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   */
  RestAlarm.prototype.chronology = function (params) {
    var alarmGroup =
        typeof params.alarmGroup === "undefined"
          ? this.SYSTEM
          : this.getQuerryAlarmGroup(params.alarmGroup),
      max = typeof params.max === "undefined" ? 20 : params.max,
      language = parseInt(emosWS.getLanguage(), 16),
      url =
        this.getPathChronology() +
        "?alg=" +
        alarmGroup +
        "&max=" +
        max +
        "&language=" +
        language;

    $.ajax({
      url: url,
      type: "GET",
      success: params.success,
      error: params.error,
      complete: params.complete,
    });
  };

  RestAlarm.prototype.getQuerryAlarmGroup = function (alarmGroup) {
    //return (alarmGroup === this.SYSTEM) ? alarmGroup : (alarmGroup + "%25");
    return alarmGroup.toString();
  };

  RestAlarm.prototype.getPath = function () {
    return emosWS.rest.getPath() + "/" + this.path;
  };

  RestAlarm.prototype.getPathTop = function () {
    return this.getPath() + "/" + this.pathTop;
  };

  RestAlarm.prototype.getPathTopX = function () {
    return this.getPath() + "/" + this.pathTopX;
  };

  RestAlarm.prototype.getPathFilter = function () {
    return this.getPath() + "/" + this.pathFilter;
  };

  RestAlarm.prototype.getPathChronology = function () {
    return this.getPath() + "/" + this.pathChronology;
  };

  /**
   * Process the received alarm history before passing them to the listener.
   * @param {Array} - received alarm history
   */
  RestAlarm.prototype.classifyAlarms = function (alarms) {
    alarms.forEach(function (alarm) {
      var status = "NEW",
        type = "OTHER";

      //add status
      if (alarm.ackDate) status = "ACK";

      if (alarm.endDate) status = "GONE";

      alarm.status = status;

      //add type
      switch (alarm.messageType) {
        case "02":
          type = "WARNING";
          break;

        case "00":
        case "01":
        case "03":
          type = "ALARM";
          break;
      }
      alarm.type = type;

      //replace messageType by class
      alarm.class = alarm.messageType;
      delete alarm.messageType;
    });

    return alarms;
  };

  /**
   * Provides REST API for Alarm
   *
   * @class
   * @alias RestEventParam
   * @memberof core.Rest
   */
  function RestEventParam() {
    this.path = "events/params";
    this.pathTop = "top";
    this.pathFilter = "filter";
    this.SYSTEM = "$System";
  }

  /**
   * Get event parametrizing history of one or multiple alarm groups.
   *
   * @param {Object} params - parameters
   * @param {(String|Array)} [params.alarmGroup="$System"] - name of an alarm group or array of alarm group name
   * @param {Number} [params.first=0] - the index of first entry to get
   * @param {Number} [params.max=100] - the maximum entries to get
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   *
   * @example <caption>1. Get top of 100 parametrizing history entries of the alarm group "PT_PTP_311213"</caption>
   * emosWS.rest.eventParam.top({
   *      alarmGroup: "PT_PTP_311213",
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>2. Get top of 200 parametrizing history entries of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.eventParam.top({
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption><br>3. Get 200 parametrizing history entries from the started index of 400, of the alarm groups "PT_PTP_311213", "110_02F,CT_PSP" and "Benchmark_PLC1"</caption>
   * emosWS.rest.eventParam.top({
   *      alarmGroup: ["PT_PTP_311213", "110_02F,CT_PSP", "Benchmark_PLC1"],
   *      first: 400,
   *      max: 200,
   *      success: function(alarmArray){
   *          console.log(alarmArray);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   */
  RestEventParam.prototype.top = function (params) {
    var alarmGroup =
        typeof params.alarmGroup === "undefined"
          ? this.SYSTEM
          : this.getQuerryAlarmGroup(params.alarmGroup),
      first = typeof params.first === "undefined" ? 0 : params.first,
      max = typeof params.max === "undefined" ? 100 : params.max,
      url =
        this.getPathTop() +
        "?io=" +
        alarmGroup +
        "&first=" +
        first +
        "&max=" +
        max;

    $.ajax({
      url: url,
      type: "GET",
      success: params.success,
      error: params.error,
      complete: params.complete,
    });
  };

  RestEventParam.prototype.getQuerryAlarmGroup = function (alarmGroup) {
    return alarmGroup.toString();
  };

  RestEventParam.prototype.getPath = function () {
    return emosWS.rest.getPath() + "/" + this.path;
  };

  RestEventParam.prototype.getPathTop = function () {
    return this.getPath() + "/" + this.pathTop;
  };

  /**
   * Provides REST API for Framework
   *
   * @class
   * @alias RestFramework
   * @memberof core.Rest
   */
  function RestFramework() {
    this.MSG_DONT_HAVE_PERMISSION =
      "The current user does not have an administrator right.";
    this.path = "framework";
    this.pathFile = "file";
    this.pathGenerateAppCache = "generateAppCacheFile";
  }

  /**
   * Get {@link https://hmi.durr.com/doc/wss/com/durr/emosweb/framework/file/FrameworkFile.html FrameworkFile} info of a file or directory located at current or remote web server
   *
   * @param {Object} params - parameters
   * @param {Function} params.path - the path of file or directory to get
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Get info for the file "/js/setcookie.js" at the current server</caption>
   * emosWS.rest.framework.getFileInfo({
   *      path: "/js/setcookie.js",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Get info for the directory "/js" at the current server</caption>
   * emosWS.rest.framework.getFileInfo({
   *      path: "/js",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Get info for the file "/js/setcookie.js" at the server "emossetup0"</caption>
   * emosWS.rest.framework.getFileInfo({
   *      path: "/js/setcookie.js",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   *
   * @example <caption>Get info for the directory "/js" at the server "emossetup0"</caption>
   * emosWS.rest.framework.getFileInfo({
   *      path: "/js",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   */
  RestFramework.prototype.getFileInfo = function (params) {
    $.ajax({
      url:
        this.getPathFile(params.server) +
        "?path=" +
        encodeURIComponent(params.path),
      type: "GET",
      success: params.success,
      error: params.error,
      complete: params.complete,
    });
  };

  /**
   * Generate AppCache file for Framework
   * @param {type} params
   */
  RestFramework.prototype.generateAppCacheFile = function (params) {
    $.ajax({
      url: this.getPathGenerateAppCacheFile() + "?" + this.getCookieParam(),
      type: "GET",
      success: params.success,
      error: params.error,
      complete: params.complete,
    });
  };
  /**
   * Delete a file located at current or remote web server. The user must have HMI admin right ("sys_sr", 11) to do this.
   * @since 1.0.7.8
   *
   * @param {Object} params - parameters
   * @param {Function} params.path - the path of file or directory to delete
   * @param {Function} [params.success] - the callback function fired when delete successfully
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>1. Delete the file "/framework/config/app/test.json" at the current server</caption>
   * emosWS.rest.framework.deleteFile({
   *      path: "/framework/config/app/test.json",
   *      success: function(){
   *          console.log("The file is deleted!");
   *      },
   *      error: function(msg){
   *          console.log("Deleted failed due to: " + msg);
   *      }
   * });
   *
   * @example <caption><br>2. Delete the file "/test/config1.js" at the remote server "hmi.durr.com/emostestrd4"</caption>
   * emosWS.rest.framework.deleteFile({
   *      path: "/test/config1.js",
   *      success: function(){
   *          console.log("The file is deleted!");
   *      },
   *      error: function(msg){
   *          console.log("Deleted failed due to: " + msg);
   *      },
   *      server: "hmi.durr.com/emostestrd4"
   * });
   *
   */
  RestFramework.prototype.deleteFile = function (params) {
    this.ajaxAdminRequest(params, function (url) {
      $.ajax({
        url: url,
        type: "DELETE",
        success: function (response) {
          try {
            if (response.success) {
              params.success();
            } else {
              params.error(response.msg);
            }
          } catch (e) {
            console.error(e);
          }
        },
        error: params.error,
        complete: params.complete,
      });
    });
  };

  /**
   * Upload a file (default max size = 10 MB) to the current or remote web server. The user must have HMI admin right ("sys_sr", 11) to do this.
   * @since 1.0.8.0
   *
   * @param {type} params
   * @param {File} params.file - the file to upload. This file object is acquired from an element file-input in HTML.
   * @param {String} [params.path] - the path of file at the server to upload. If missing, the selected file will be uploaded into /upload/{filename}
   * @param {Function} [params.success] - the callback function fired when upload successfully
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>1. Upload a file selected ("logo.jpg") by an input in HTML and save as path "/framework/config/app/images/heinz_logo.jpg" into the current server</caption>
   * // HTML:
   * //       <input type="file" id="upload">
   * //       <a id="submitJquery" href="#" onclick="doUpload();">Upload</a>
   * //
   * // JavaScript:
   * function doUpload(){
   *      var
   *          fileToUpload = $('#upload')[0].files[0],
   *          filePath = "/framework/config/app/images/heinz_logo.jpg";
   *
   *      emosWS.rest.framework.uploadFile({
   *          file: fileToUpload,
   *          path: filePath,
   *          success: function(){
   *              console.log("The file is uploaded!");
   *          },
   *          error: function(msg){
   *              console.log("Upload failed due to: " + msg);
   *          }
   *      });
   * }
   *
   * @example <caption>2. Upload a file selected ("logo2.jpg") by an input in HTML and save as path "/upload/logo2.jpg" into the current server</caption>
   * // HTML:
   * //       <input type="file" id="upload">
   * //       <a id="submitJquery" href="#" onclick="doUpload();">Upload</a>
   * //
   * // JavaScript:
   * function doUpload(){
   *      var fileToUpload = $('#upload')[0].files[0];
   *
   *      emosWS.rest.framework.uploadFile({
   *          file: fileToUpload,
   *          success: function(){
   *              console.log("The file is uploaded!");
   *          },
   *          error: function(msg){
   *              console.log("Upload failed due to: " + msg);
   *          }
   *      });
   * }
   *
   */
  RestFramework.prototype.uploadFile = function (params) {
    this.ajaxAdminRequest(params, function (url) {
      var formData = new FormData();
      formData.append("file", params.file);
      $.ajax({
        url: url,
        type: "POST",
        data: formData,
        success: function (response) {
          try {
            if (response.success) {
              params.success();
            } else {
              params.error(response.msg);
            }
          } catch (e) {
            console.error(e);
          }
        },
        error: params.error,
        complete: params.complete,
        //Options to tell jQuery not to process data or worry about content-type.
        //cache: false,
        contentType: false,
        processData: false,
      });
    });
  };

  /**
   * Send a request (ajax) which requires admin right.
   *
   * @param {Object} params - parameters
   * @param {Function} params.path - the path of file or directory to delete
   * @param {Function} [params.success] - the callback function fired when delete successfully
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   * @param {Function} sendRequest - the callback function to send the request
   */
  RestFramework.prototype.ajaxAdminRequest = function (params, sendRequest) {
    //Check if the current user has admin right
    if (emosWS.isAdmin()) {
      try {
        var getFilePath = function () {
          return params.path ? "&path=" + encodeURIComponent(params.path) : "";
        };
        var url = this.getPathFile(params.server);
        if (params.server && emosWS.getActiveServerName() !== params.server) {
          //if the receiver is a remote server, get the CAS Service ticket then pass it together with the request
          emosWS.Cas.getCASServiceTicket({
            success: function (ticket, serviceURL) {
              url +=
                "?serviceTicket=" +
                ticket +
                getFilePath() +
                "&serviceURL=" +
                serviceURL;
              sendRequest(url);
            },
            error: function (msg) {
              if (params.error) {
                params.error(msg);
              }
            },
          });
        } else {
          //if the receiver is the current server, then don't need a CAS Service ticket. Just send the cookie together
          url += "?" + this.getCookieParam() + getFilePath();
          sendRequest(url);
        }
      } catch (e) {
        params.error(e);
      }
    } else {
      params.error(this.MSG_DONT_HAVE_PERMISSION);
    }
  };

  /**
   * Create a text file in the current or remote web server. The user must have HMI admin right ("sys_sr", 11) to do this.
   * @since 1.0.8.3
   *
   * @param {type} params
   * @param {String} params.text - the string contains the text to write to the file.
   * @param {String} [params.path] - the path of file at the server to upload. If missing, the selected file will be uploaded into /upload/{filename}
   * @param {Function} [params.success] - the callback function fired when upload successfully
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   */
  RestFramework.prototype.createTextFile = function (params) {
    var blob = new Blob([params.text], { type: "text/plain" });
    params.file = new File([blob], params.path);
    this.uploadFile(params);
  };

  /**
   * Get http path of a server
   * @param {String} server - server path
   * @returns {String} the http path of server
   */
  RestFramework.prototype.getPath = function (server) {
    return emosWS.rest.getPath(server) + "/" + this.path;
  };

  /**
   * Get http path of the rest-file api
   * @param {String} server - server path
   * @returns {String} the http path of rest-file api
   */
  RestFramework.prototype.getPathFile = function (server) {
    return this.getPath(server) + "/" + this.pathFile;
  };

  RestFramework.prototype.getPathGenerateAppCacheFile = function (server) {
    return this.getPath(server) + "/" + this.pathGenerateAppCache;
  };
  RestFramework.prototype.getCookieParam = function () {
    var cas = emosWS.Cas;
    return (
      cas.WS_SESSION_COOKIE_TEXT +
      "=" +
      cas.cookie.getItem(cas.WS_SESSION_COOKIE_TEXT)
    );
  };

  /**
   * Provides REST API to get server info
   *
   * @class
   * @alias RestServerInfo
   * @memberof core.Rest
   */
  function RestServerInfo() {
    this.path = "info";
    this.pathVersion = "version";
    this.pathJavaVersion = "javaversion";
    this.pathCommLibVersion = "commlibversion";
    this.pathOSVersion = "osversion";
    this.pathConfiguration = "configuration";
    this.pathPerformance = "performance";
    this.pathCommlibInternalState = "commlibInternalState";
    this.pathSession = "sessions";
  }

  /**
   * Get http path of a server
   *
   * @param {String} server - server path
   * @returns {String} the http path of server
   */
  RestServerInfo.prototype.getPath = function (server) {
    return emosWS.rest.getPath(server) + "/" + this.path;
  };

  /**
   * Get info from a rest api in Web Socket server
   *
   * @param {String} pathAPI - the Rest API path
   * @param {Object} params - parameters
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   */
  RestServerInfo.prototype.get = function (pathAPI, params) {
    $.ajax({
      url: this.getPath(params.server) + "/" + pathAPI,
      type: "GET",
      success: params.success,
      error: params.error,
      complete: params.complete,
    });
  };

  /**
   * Get version of Web Socket server
   *
   * @param {Object} params - parameters
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Get version of current WebSocket server</caption>
   * emosWS.rest.serverInfo.getVersion({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Get version of server "emossetup0"</caption>
   * emosWS.rest.serverInfo.getVersion({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   */
  RestServerInfo.prototype.getVersion = function (params) {
    this.get(this.pathVersion, params);
  };

  /**
   * Get Java version of Web Socket server
   *
   * @param {Object} params - parameters
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Get Java version of current WebSocket server</caption>
   * emosWS.rest.serverInfo.getJavaVersion({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Get Java version of server "emossetup0"</caption>
   * emosWS.rest.serverInfo.getJavaVersion({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   */
  RestServerInfo.prototype.getJavaVersion = function (params) {
    this.get(this.pathJavaVersion, params);
  };

  /**
   * Get CommLib version of Web Socket server
   *
   * @param {Object} params - parameters
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Get CommLib version of current WebSocket server</caption>
   * emosWS.rest.serverInfo.getCommLibVersion({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Get CommLib version of server "emossetup0"</caption>
   * emosWS.rest.serverInfo.getCommLibVersion({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   */
  RestServerInfo.prototype.getCommLibVersion = function (params) {
    this.get(this.pathCommLibVersion, params);
  };

  /**
   * Get OS version of Web Socket server
   *
   * @param {Object} params - parameters
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Get OS version of current WebSocket server</caption>
   * emosWS.rest.serverInfo.getOSVersion({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Get OS version of server "emossetup0"</caption>
   * emosWS.rest.serverInfo.getOSVersion({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   */
  RestServerInfo.prototype.getOSVersion = function (params) {
    this.get(this.pathOSVersion, params);
  };

  /**
   * Get {@link https://hmi.durr.com/doc/wss/com/durr/emosweb/configuration/ServerConfiguration.html ServerConfiguration} of Web Socket server
   *
   * @param {Object} params - parameters
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Get configuration of current WebSocket server</caption>
   * emosWS.rest.serverInfo.getConfiguration({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Get configuration of server "emossetup0"</caption>
   * emosWS.rest.serverInfo.getConfiguration({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   */
  RestServerInfo.prototype.getConfiguration = function (params) {
    this.get(this.pathConfiguration, params);
  };

  /**
   * Get {@link https://hmi.durr.com/doc/wss/com/durr/emosweb/services/Performance.html Performance} of Web Socket server
   *
   * @param {Object} params - parameters
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Get performance info of current WebSocket server</caption>
   * emosWS.rest.serverInfo.getPerformance({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Get performance info of server "emossetup0"</caption>
   * emosWS.rest.serverInfo.getPerformance({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   */
  RestServerInfo.prototype.getPerformance = function (params) {
    this.get(this.pathPerformance, params);
  };

  /**
   * Get {@link https://hmi.durr.com/doc/wss/com/durr/emosweb/services/commlibinternalstate/CommLibInternalState.html CommLibInternalState} of Web Socket server
   *
   * @param {Object} params - parameters
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Get CommLibInternalState of current WebSocket server</caption>
   * emosWS.rest.serverInfo.getCommlibInternalState({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Get CommLibInternalState of server "emossetup0"</caption>
   * emosWS.rest.serverInfo.getCommlibInternalState({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   */
  RestServerInfo.prototype.getCommlibInternalState = function (params) {
    this.get(this.pathCommlibInternalState, params);
  };

  /**
   * Get array of {@link https://hmi.durr.com/doc/wss/com/durr/emosweb/services/WSSession.html WSSession} of Web Socket server
   *
   * @param {Object} params - parameters
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Get client sessions of current WebSocket server</caption>
   * emosWS.rest.serverInfo.getSession({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Get client sessions of server "emossetup0"</caption>
   * emosWS.rest.serverInfo.getSession({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   */
  RestServerInfo.prototype.getSession = function (params) {
    this.get(this.pathSession, params);
  };

  /**
   * Provides REST API to configure WebSocket server
   *
   * @class
   * @alias RestConfiguration
   * @memberof core.Rest
   */
  function RestConfiguration() {
    this.path = "config";
    this.pathUpdate = "update";
  }

  /**
   * Get {@link https://hmi.durr.com/doc/wss/com/durr/emosweb/configuration/ServerConfiguration.html ServerConfiguration} of Web Socket server
   *
   * @param {Object} params - parameters
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Get configuration of current WebSocket server</caption>
   * emosWS.rest.configuration.getConfiguration({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Get configuration of server "emossetup0"</caption>
   * emosWS.rest.configuration.getConfiguration({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   */
  RestConfiguration.prototype.getConfiguration = function (params) {
    $.ajax({
      url: this.getPath(params.server),
      type: "GET",
      success: params.success,
      error: params.error,
      complete: params.complete,
    });
  };

  /**
   * Update {@link https://hmi.durr.com/doc/wss/com/durr/emosweb/configuration/ServerConfiguration.html ServerConfiguration} of Web Socket server
   *
   * @param {Object} params - parameters
   * @param {Object} params.configuration - the modfiled configuration to update
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Update configuration of current WebSocket server</caption>
   * emosWS.rest.configuration.updateConfiguration({
   *      configuration: {
   *				"componentPath":"D:\\EMOS.Web\\WebSocketServer\\Components",
   *				"IOManager":["bie-n4852","EMOSTESTRD10","EMOSTESTRD11"],
   *				"AlarmServer":["bie-n4852","EMOSTESTRD7"],
   *				"TrendServer":["bie-n4852","EMOSTESTRD8"],
   *				"LogServer":["https://bie-n4852","https://EMOSSETUP2"],
   *				"localCAS":{
   *					"FrontEnd":"https://BIE-N4852/cas",
   *					"BackEnd":"https://BIE-N4852/cas",
   *					"Service":"https://BIE-N4852/hmi/CasLogin.html"
   *				},
   *				"centralCAS":{
   *					"FrontEnd":"https://hmi.durr.com/cas",
   *					"BackEnd":"https://BIE-N4852/cas",
   *					"Service":"https://hmi.durr.com/BIE-N48525/hmi/CasLogin.html"
   *				}
   *      },
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Update configuration of remote server "emossetup0"</caption>
   * emosWS.rest.configuration.updateConfiguration({
   *      configuration: {
   *				"componentPath":"D:\\EMOS.Web\\WebSocketServer\\Components",
   *				"IOManager":["bie-n4852","EMOSTESTRD10","EMOSTESTRD11"],
   *				"AlarmServer":["bie-n4852","EMOSTESTRD7"],
   *				"TrendServer":["bie-n4852","EMOSTESTRD8"],
   *				"LogServer":["https://bie-n4852","https://EMOSSETUP2"],
   *				"localCAS":{
   *					"FrontEnd":"https://BIE-N4852/cas",
   *					"BackEnd":"https://BIE-N4852/cas",
   *					"Service":"https://BIE-N4852/hmi/CasLogin.html"
   *				},
   *				"centralCAS":{
   *					"FrontEnd":"https://hmi.durr.com/cas",
   *					"BackEnd":"https://BIE-N4852/cas",
   *					"Service":"https://hmi.durr.com/BIE-N48525/hmi/CasLogin.html"
   *				}
   *      },
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   */
  RestConfiguration.prototype.updateConfiguration = function (params) {
    $.ajax({
      url: this.getPathUpdate(params.server),
      type: "POST",
      data: JSON.stringify(params.configuration),
      contentType: "application/json; charset=utf-8",
      dataType: "json",
      success: params.success,
      error: params.error,
      complete: params.complete,
    });
  };

  /**
   * Add a EMOS.Web server/service to WebSocketServer
   *
   * @param {Object} params - parameters
   * @param {String} params.serverType - type of server/service, either of: <br>
   *                  "io" (IOManager) <br>
   *                  "alarm" (alarmServer) <br>
   *                  "trend" (TrendServer) <br>
   *                  "log" (LogServer)
   * @param {String} params.serverName - server hostname or service URL to add
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Add an IOManager "emostestrd" to the current WebSocket server</caption>
   * emosWS.rest.configuration.addServer({
   *      serverType: "io",
   *      serverName: "emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Add an IOManager "emostestrd" to the remote server "emossetup0"</caption>
   * emosWS.rest.configuration.addServer({
   *      serverType: "io",
   *      serverName: "emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   * @example <caption>Add an AlarmServer "emostestrd" to the current WebSocket server</caption>
   * emosWS.rest.configuration.addServer({
   *      serverType: "alarm",
   *      serverName: "emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Add an AlarmServer "emostestrd" to the remote server "emossetup0"</caption>
   * emosWS.rest.configuration.addServer({
   *      serverType: "alarm",
   *      serverName: "emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   *
   * @example <caption>Add a TrendServer "emostestrd" to the current WebSocket server</caption>
   * emosWS.rest.configuration.addServer({
   *      serverType: "trend",
   *      serverName: "emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Add a TrendServer "emostestrd" to the remote server emossetup0</caption>
   * emosWS.rest.configuration.addServer({
   *      serverType: "trend",
   *      serverName: "emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   *
   * @example <caption>Add a LogServer "https://emostestrd" to the current WebSocket server</caption>
   * emosWS.rest.configuration.addServer({
   *      serverType: "log",
   *      serverName: "https://emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Add a LogServer "https://emostestrd" to the remote server "emossetup0"</caption>
   * emosWS.rest.configuration.addServer({
   *      serverType: "log",
   *      serverName: "https://emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   *
   */
  RestConfiguration.prototype.addServer = function (params) {
    $.ajax({
      url:
        this.getPath(params.server) +
        "?type=" +
        params.serverType +
        "&name=" +
        encodeURIComponent(params.serverName),
      type: "PUT",
      success: params.success,
      error: params.error,
      complete: params.complete,
    });
  };

  /**
   * Remove a EMOS.Web server/service from WebSocketServer
   *
   * @param {Object} params - parameters
   * @param {String} params.serverType - type of server/service, either of: <br>
   *                  "io" (IOManager) <br>
   *                  "alarm" (alarmServer) <br>
   *                  "trend" (TrendServer) <br>
   *                  "log" (LogServer)
   * @param {String} params.serverName - server hostname or service URL to remove
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Remove an IOManager "emostestrd" to the current WebSocket server</caption>
   * emosWS.rest.configuration.removeServer({
   *      serverType: "io",
   *      serverName: "emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Remove an IOManager "emostestrd" to the remote server "emossetup0"</caption>
   * emosWS.rest.configuration.removeServer({
   *      serverType: "io",
   *      serverName: "emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   * @example <caption>Remove an AlarmServer "emostestrd" to the current WebSocket server</caption>
   * emosWS.rest.configuration.removeServer({
   *      serverType: "alarm",
   *      serverName: "emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Remove an AlarmServer "emostestrd" to the remote server "emossetup0"</caption>
   * emosWS.rest.configuration.removeServer({
   *      serverType: "alarm",
   *      serverName: "emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   *
   * @example <caption>Remove a TrendServer "emostestrd" to the current WebSocket server</caption>
   * emosWS.rest.configuration.removeServer({
   *      serverType: "trend",
   *      serverName: "emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Remove a TrendServer "emostestrd" to the remote server emossetup0</caption>
   * emosWS.rest.configuration.removeServer({
   *      serverType: "trend",
   *      serverName: "emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   *
   * @example <caption>Remove a LogServer "https://emostestrd" to the current WebSocket server</caption>
   * emosWS.rest.configuration.removeServer({
   *      serverType: "log",
   *      serverName: "https://emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Remove a LogServer "https://emostestrd" to the remote server "emossetup0"</caption>
   * emosWS.rest.configuration.removeServer({
   *      serverType: "log",
   *      serverName: "https://emostestrd",
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   *
   */
  RestConfiguration.prototype.removeServer = function (params) {
    $.ajax({
      url:
        this.getPath(params.server) +
        "?type=" +
        params.serverType +
        "&name=" +
        encodeURIComponent(params.serverName),
      type: "DELETE",
      success: params.success,
      error: params.error,
      complete: params.complete,
    });
  };

  /**
   * Get http path of a server
   * @param {String} server - server path
   * @returns {String} the http path of server
   */
  RestConfiguration.prototype.getPath = function (server) {
    return emosWS.rest.getPath(server) + "/" + this.path;
  };

  /**
   * Get update path of the rest-file api
   * @param {String} server - server path
   * @returns {String} the update path of rest-file api
   */
  RestConfiguration.prototype.getPathUpdate = function (server) {
    return this.getPath(server) + "/" + this.pathUpdate;
  };

  /**
   * Provides REST API to get traffic info
   *
   * @class
   * @alias RestTac
   * @memberof core.Rest
   */
  function RestTac() {
    this.path = "tac";
    this.pathClientInfo = "getClientInfo";
  }

  /**
   * Get http path of a server
   *
   * @param {String} server - server path
   * @returns {String} the http path of server
   */
  RestTac.prototype.getPath = function (server) {
    return emosWS.rest.getPath(server) + "/" + this.path;
  };

  /**
   * Get client info
   *
   * @param {String} pathAPI - the Rest API path
   * @param {Object} params - parameters
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   */
  RestTac.prototype.get = function (pathAPI, params) {
    $.ajax({
      url: this.getPath(params.server) + "/" + pathAPI,
      type: "GET",
      success: params.success,
      error: params.error,
      complete: params.complete,
    });
  };

  /**
   * Get client info
   *
   * @param {Object} params - parameters
   * @param {Function} [params.success] - the callback function fired when data info comming
   * @param {Function} [params.error] - the callback function fired when request failed
   * @param {Function} [params.complete] - the callback function fired when the request finishes (after success and error callbacks are executed)
   * @param {String} [params.server] - server path
   *
   * @example <caption>Get info of current client</caption>
   * emosWS.rest.tac.getClientInfo({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      }
   * });
   *
   * @example <caption>Get info of current client from server "emossetup0"</caption>
   * emosWS.rest.tac.getClientInfo({
   *      success: function(info){
   *          //print file info to console
   *          console.log(info);
   *      },
   *      error: function(){
   *          console.log("request failed");
   *      },
   *      server: "emossetup0"
   * });
   */
  RestTac.prototype.getClientInfo = function (params) {
    this.get(this.pathClientInfo, params);
  };
  /**
   * Provides REST API Client
   * @module emosWS/core/Rest
   */

  /**
   * Provides REST API Client
   *
   * @class
   * @alias Rest
   * @memberof core
   */
  function Rest() {
    this.path = "ws/admin";
    this.alarm = new RestAlarm();
    this.eventParam = new RestEventParam();
    this.framework = new RestFramework();
    this.serverInfo = new RestServerInfo();
    this.configuration = new RestConfiguration();
    this.tac = new RestTac();
  }

  Rest.prototype.getRootPath = function (server) {
    return server
      ? location.protocol + "//" + server + ":" + location.port
      : emosWS.getHostname() + ":3000";
  };

  Rest.prototype.getPath = function (server) {
    return this.getRootPath(server) + "/" + this.path;
  };
  /**
   * Manages user idle event
   * @module emosWS/core/UserIdle
   */

  /**
   * Manages user idle event
   *
   * @class
   * @alias UserIdle
   * @memberof core
   * @param {core.EventDispatcher} emosEvent - emos.js global event object
   * @param {Numbers} duration - duration in ms to trigger idle event
   * @param {Object} handlers - handlers when the idle event fired
   */
  function UserIdle(emosEvent, duration, handlers) {
    this.emosEvent = emosEvent;
    this.duration = duration; //in miliseconds
    this.handlers = handlers;
    this.recurrent =
      typeof handlers.recurrent === "undefined" ? true : handlers.recurrent;
    this.eventNameList = [
      "mousemove",
      "mousedown",
      "keydown",
      "DOMMouseScroll",
      "mousewheel",
      "touchmove",
      "MSPointerMove",
    ];
    this.timeoutID = null;
    this.resetTimer = this.resetTimer.bind(this);
    this.goInactive = this.goInactive.bind(this);
    this.isReset = false;
    this.init();
  }

  UserIdle.prototype.init = function () {
    this.addEventListener();
    this.startTimer();
  };

  UserIdle.prototype.startTimer = function () {
    this.timeoutID = window.setTimeout(this.goInactive, this.duration);
  };

  UserIdle.prototype.onSVGReady = function () {
    if (emosWS.attr.svg) {
      this.eventNameList.forEach(
        function (eventName) {
          emosWS.attr.svg.addEventListener(eventName, this.resetTimer, false);
        }.bind(this)
      );
    }
  };

  UserIdle.prototype.resetTimer = function () {
    this.clearTimeout();
    this.goActive();
  };

  UserIdle.prototype.goInactive = function () {
    try {
      if (this.handlers.onInactive) {
        this.handlers.onInactive();
      }
    } catch (e) {
      console.error(e);
    }
    if (this.recurrent) {
      this.isReset = true;
      this.resetTimer();
      this.isReset = false;
    } else {
      this.removeEventListener();
    }
  };

  UserIdle.prototype.goActive = function () {
    try {
      if (this.handlers.onActive && !this.isReset) {
        this.handlers.onActive();
      }
    } catch (e) {
      console.error(e);
    }
    this.startTimer();
  };

  UserIdle.prototype.clearTimeout = function () {
    window.clearTimeout(this.timeoutID);
  };

  UserIdle.prototype.terminate = function () {
    this.clearTimeout();
    this.removeEventListener();
  };

  UserIdle.prototype.addEventListener = function () {
    this.eventNameList.forEach(
      function (eventName) {
        document.addEventListener(eventName, this.resetTimer, false);
      }.bind(this)
    );

    if (emosWS && emosWS.attr.svg) {
      this.onSVGReady();
    } else {
      this.emosEvent.addEventListener("ready", this.onSVGReady.bind(this));
    }
  };

  UserIdle.prototype.removeEventListener = function () {
    this.eventNameList.forEach(
      function (eventName) {
        document.removeEventListener(eventName, this.resetTimer, false);
      }.bind(this)
    );
    if (emosWS.attr.svg) {
      this.eventNameList.forEach(
        function (eventName) {
          emosWS.attr.svg.removeEventListener(
            eventName,
            this.resetTimer,
            false
          );
        }.bind(this)
      );
    }
  };

  /**
   * Manages user idle event do action
   *
   * @class
   * @alias UserIdleAction
   * @abstract
   * @memberof core.UserIdle
   * @param {core.EventDispatcher} emosEvent - emos.js global event object
   * @param {Object} attr - Attributes
   */
  function UserIdleAction(emosEvent, attr) {
    this.init(attr);
    this.userIdle = null;
    this.emosEvent = emosEvent;
    this.start();
  }

  /**
   * Initialize
   * @abstract
   * @param {Object} attr - Attributes
   */
  UserIdleAction.prototype.init = function (attr) {};

  /**
   * Get duration in ms
   * @abstract
   */
  UserIdleAction.prototype.getDurationInMS = function () {};

  /**
   * Handlers when inaction event fired
   * @abstract
   */
  UserIdleAction.prototype.onInactive = function () {};

  /**
   * Execute during constructing
   */
  UserIdleAction.prototype.start = function () {
    if (this.config.active) {
      this.initUserIdle();
    }
  };

  /**
   * Set user idle duration
   * @param {Number} duration - duration to set
   */
  UserIdleAction.prototype.setDuration = function (duration) {
    this.config.duration.default = duration;
    if (this.userIdle) {
      this.initUserIdle();
    }
  };

  /**
   * Initialize UserIdle
   */
  UserIdleAction.prototype.initUserIdle = function () {
    this.clearCurrentUserIdle();
    this.userIdle = new UserIdle(this.emosEvent, this.getDurationInMS(), {
      onInactive: this.onInactive.bind(this),
      recurrent: false,
    });
  };

  /**
   * Stop the current actions
   */
  UserIdleAction.prototype.stop = function () {
    this.clearCurrentUserIdle();
  };

  /**
   * Terminate the actions and user idle
   */
  UserIdleAction.prototype.clearCurrentUserIdle = function () {
    if (this.userIdle) {
      this.userIdle.terminate();
      this.userIdle = null;
    }
  };

  /**
   * Manages logout action on user idle
   *
   * @class
   * @alias UserIdleActionLogout
   * @memberof core.UserIdle
   * @extends core.UserIdleAction
   * @param {core.EventDispatcher} emosEvent - emos.js global event object
   * @param {Object} attr - Attributes
   */
  function UserIdleActionLogout(emosEvent, attr) {
    UserIdleAction.call(this, emosEvent, attr);
  }
  UserIdleActionLogout.prototype = Object.create(UserIdleAction.prototype);
  UserIdleActionLogout.prototype.constructor = UserIdleActionLogout;

  /**
   * Initialize
   * @override
   * @param {Object} attr - Attributes
   */
  UserIdleActionLogout.prototype.init = function (attr) {
    this.config = attr.userIdleAction.actionLogoff;
    this.waitingForLogoff = false;
    this.onAuthentication = this.onAuthentication.bind(this);
  };

  /**
   * Get duration in ms
   * @override
   */
  UserIdleActionLogout.prototype.getDurationInMS = function () {
    //this.config.duration.default in MINUTE
    return this.config.duration.default * 60000;
  };

  /**
   * Handlers when inaction event fired
   * @override
   */
  UserIdleActionLogout.prototype.onInactive = function () {
    emosWS.sendLogoff();
    this.waitingForLogoff = true;
  };

  /**
   * Execute during constructing
   * @override
   */
  UserIdleActionLogout.prototype.start = function () {
    if (this.config.active) {
      this.emosEvent.addEventListener(
        "authentication",
        this.onAuthentication,
        false
      );
      if (emosWS) {
        if (emosWS.login.au.userName !== null) this.initUserIdle();
      }
    }
  };

  /**
   * Stop the current actions
   * @override
   */
  UserIdleActionLogout.prototype.stop = function () {
    this.emosEvent.removeEventListener("authentication", this.onAuthentication);
    this.clearCurrentUserIdle();
  };

  /**
   * Handler for authentication event
   */
  UserIdleActionLogout.prototype.onAuthentication = function (e) {
    if (e.status === "PASSED") {
      this.onLogin();
    } else {
      this.onLogoff();
    }
  };

  /**
   * Handler for login event
   */
  UserIdleActionLogout.prototype.onLogin = function () {
    this.initUserIdle();
  };

  /**
   * Handler for logoff event
   */
  UserIdleActionLogout.prototype.onLogoff = function () {
    this.clearCurrentUserIdle();
    if (this.waitingForLogoff) {
      this.waitingForLogoff = false;
      this.emosEvent.dispatchEvent({ type: "Auto_Logoff_Reload" });
    }
  };

  /**
   * Manages reload action on user idle
   *
   * @class
   * @alias UserIdleActionReload
   * @memberof core.UserIdle
   * @extends core.UserIdleAction
   * @param {core.EventDispatcher} emosEvent - emos.js global event object
   * @param {Object} attr - Attributes
   */
  function UserIdleActionReload(emosEvent, attr) {
    UserIdleAction.call(this, emosEvent, attr);
  }
  UserIdleActionReload.prototype = Object.create(UserIdleAction.prototype);
  UserIdleActionReload.prototype.constructor = UserIdleActionReload;

  /**
   * Initialize
   * @override
   * @param {Object} attr - Attributes
   */
  UserIdleActionReload.prototype.init = function (attr) {
    this.config = attr.userIdleAction.actionLogoff;
  };

  /**
   * Get duration in ms
   * @override
   */
  UserIdleActionReload.prototype.getDurationInMS = function () {
    //this.config.duration.default in HOURS
    return this.config.duration.default * 3600000;
  };

  /**
   * Handlers when inaction event fired
   * @override
   */
  UserIdleActionReload.prototype.onInactive = function () {
    this.emosEvent.dispatchEvent({ type: "4h_Reload" });
  };

  /**
   * Monitor server status
   *
   * @class
   * @alias Server
   * @memberof core
   * @param {String} hostname - server hostname
   */
  function Server(hostname) {
    /**
     * server hostname
     * @type {String}
     */
    this.name = hostname;

    /**
     * indicates whether the webserver is reachable or not
     * @type {Boolean}
     */
    this.reachable = false;

    /**
     * indicates whether the webserver is active, it means being selected from the server pool
     * @type {Boolean}
     */
    this.active = false;
  }

  /**
   * Get status of server
   * @param {Function} callback - the function fired when the server status is ready
   *
   * @example <caption>Get status of a socket servers</caption>
   *
   * //get servers list
   * var servers = emosWS.getServers();
   *
   * //get status of each server
   * servers.forEach(function(server){
   *      server.getStatus(function(status){
   *          //print the status of a server
   *          console.log(status)
   *      });
   * });
   */
  Server.prototype.getStatus = function (callback) {
    var self = this;
    self.active = self.name === emosWS.getActiveServerName();
    emosWS.rest.serverInfo.getVersion({
      success: function () {
        self.reachable = true;
      },
      error: function () {
        self.reachable = false;
      },
      complete: function () {
        callback({
          name: self.name,
          reachable: self.reachable,
          active: self.active,
        });
      },
      server: self.name,
    });
  };

  /**
   * Allow you to add, modify or delete stored data items in server
   *
   * @class
   * @alias ServerStorage
   * @memberof core
   * @param {String} [pathname=/config/server_storage.json] - relative path of json file to store the data
   * @param {Object} [Object] - attr object of emos.js
   */
  function ServerStorage(pathname, attr) {
    this.path = this.DEFAULT_PATH = "/config/server_storage.json";
    if (pathname) {
      if (pathname === this.DEFAULT_PATH) {
        return;
      } else {
        this.path = pathname;
      }
    }
    (attr || emosWS.attr).storages[this.path] = this;
    this.data = null;
    this.readyListener = [];
    this.init();
  }

  /**
   * Initialization: connect to server to retrieve storage data.
   */
  ServerStorage.prototype.init = function () {
    var self = this;
    setTimeout(function () {
      self.getStorage(function (data) {
        self.readyListener.forEach(function (listener) {
          try {
            listener(data);
          } catch (e) {
            console.error(e);
          }
        });
      });
    }, 1);
  };

  /**
   * Get storage data from server
   *
   * @param {Function} success - A function is fired when the data is loaded
   */
  ServerStorage.prototype.getStorage = function (success) {
    var self = this,
      url = emosWS.rest.getRootPath() + this.path,
      callback = function () {
        $.ajax({
          url: url,
          dataType: "json",
          cache: false,
          success: function (data) {
            self.data = data;
          },
          error: function () {
            //self.setStorage();
            self.data = {};
          },
          complete: function () {
            success(self.data);
          },
        });
      };
    if (typeof $ !== "undefined") {
      callback();
    } else {
      window.addEventListener("load", callback);
    }
  };

  /**
   * Write data to server storage
   *
   * @param {Function} success - A function is fired when success.
   * @param {type} error - A function is fired when there's error.
   */
  ServerStorage.prototype.setStorage = function (success, error) {
    this.data = this.data || {};
    emosWS.writeData(
      this.path,
      JSON.stringify(this.data, null, "\t"),
      success || error ? { success: success, error: error } : null
    );
  };

  /**
   * Add a listener to the storage ready event
   *
   * @param {Function} callback - A function is fired when storage is ready.
   */
  ServerStorage.prototype.addReadyListener = function (callback) {
    this.readyListener.push(callback);
  };

  /**
   * When passed a key name, will return that key's value.
   *
   * @param {String} keyName - A string containing the name of the key you want to create/update.
   * @param {Function} success - A function is fired when success.
   * @param {Boolean} getAll - determines if want to get all items.
   * @return {String|Array} The value of the key. If the key does not exist, null is returned.
   */
  ServerStorage.prototype.getItem = function (keyName, success, getAll) {
    var callback = function (data) {
      var value = getAll ? data : data[keyName];
      try {
        if (success) success(value);
      } catch (e) {
        console.error(e);
      }
      return value;
    };
    if (this.data) {
      return callback(this.data);
    } else {
      this.addReadyListener(callback);
    }
    return null;
  };

  /**
   * Will return an array contains all items.
   *
   * @param {String} keyName - A string containing the name of the key you want to create/update.
   * @return {Array} A array containing all key/value pairs.
   */
  ServerStorage.prototype.get = function (success) {
    return this.getItem(null, success, true);
  };

  /**
   * When passed a key name and value, will add that key to the storage, or update that key's value if it already exists.
   *
   * @param {String} keyName - A string containing the name of the key you want to retrieve the value of.
   * @param {String} keyValue - A string containing the value you want to give the key you are creating/updating.
   */
  ServerStorage.prototype.setItem = function (
    keyName,
    keyValue,
    success,
    error
  ) {
    var item = {};
    item[keyName] = keyValue;
    this.setItems(item, success, error);
  };

  ServerStorage.prototype.setItems = function (items, success, error) {
    var self = this,
      callback = function (data) {
        try {
          for (var keyName in items) {
            data[keyName] = items[keyName];
          }
          self.setStorage(success, error);
        } catch (e) {
          console.error("setItem failed, due to: " + e);
          for (var keyName in items) {
            delete data[keyName];
          }
          delete data[keyName];
        }
      };
    if (this.data) {
      callback(this.data);
    } else {
      this.addReadyListener(callback);
    }
  };

  /**
   * When passed a key name, will remove that key from the storage.
   *
   * @param {String} keyName - A String containing the name of the key you want to remove.
   */
  ServerStorage.prototype.removeItem = function (keyName, success, error) {
    if (emosWS.isAdmin()) {
      var self = this,
        callback = function (data) {
          delete data[keyName];
          self.setStorage(success, error);
        };
      if (this.data) {
        callback(this.data);
      } else {
        this.addReadyListener(callback);
      }
    } else {
      error("You don't have admin right to remove the server storage item!");
    }
  };

  /**
   * When invoked, will empty all keys out of the storage.
   */
  ServerStorage.prototype.clear = function (success, error) {
    if (emosWS.isAdmin()) {
      var self = this,
        callback = function () {
          self.data = {};
          self.setStorage(success, error);
        };
      if (this.data) {
        callback();
      } else {
        this.addReadyListener(callback);
      }
    } else {
      error("You don't have admin right to clear the server storage!");
    }
  };

  /**
   * Keep VISU page in high availability as much as possible
   *
   * @class
   * @alias HighAvailability
   * @memberof core
   * @param {Object} config - configuration object
   */
  function HighAvailability(config) {
    this.MONITOR_INTERVAL = 5000; //5s
    this.config = config || {};
    this.monitorInterval = this.MONITOR_INTERVAL || this.config.monitorInterval;
    this.idle = true;
    this.monitor = null;
    this.ready = false;
    this.wantToStopMonitor = true;
    this.init();
  }

  HighAvailability.prototype.init = function () {
    if (typeof serverPool !== "undefined") {
      emosWS.addEventListener("connecting", this.onWSClose.bind(this));
      emosWS.addEventListener("openWS", this.onWSOpen.bind(this));
      emosWS.addEventListener("close", this.onWSClose.bind(this));
    }
  };

  HighAvailability.prototype.onWSClose = function () {
    this.wantToStopMonitor = false;
    this.startMonitor();
  };

  HighAvailability.prototype.onWSOpen = function () {
    this.ready = true;
    this.wantToStopMonitor = true;
    this.runCheck();
  };

  HighAvailability.prototype.check = function () {
    var self = this,
      href = location.href;
    if (self.idle) {
      self.idle = false;
      self.checkIfURLIsReachable(href, function (reachable) {
        if (!reachable) {
          self.onUnreachable();
        }
        self.idle = true;
      });
    }
  };

  HighAvailability.prototype.runCheck = function () {
    if (this.wantToStopMonitor) {
      if (
        location.href === this.getURLFromServer(emosWS.getActiveServerName())
      ) {
        this.stopMonitor();
        return;
      }
    }
    this.check();
  };

  HighAvailability.prototype.startMonitor = function () {
    if (this.ready && this.monitor === null) {
      this.runCheck();
      this.monitor = setInterval(
        this.runCheck.bind(this),
        this.monitorInterval
      );
    }
  };

  HighAvailability.prototype.stopMonitor = function () {
    clearInterval(this.monitor);
    this.monitor = null;
    this.idle = true;
    this.wantToStopMonitor = false;
  };

  HighAvailability.prototype.onUnreachable = function () {
    var self = this,
      href = location.href,
      switchedToOtherServer = false;
      console.log
    serverPool.forEach(function (server) {
      var _url = self.getURLFromServer(server);
      if (_url !== href) {
        self.checkIfURLIsReachable(_url, function (reachable, url) {
          if (reachable && !switchedToOtherServer) {
            switchedToOtherServer = true;
            location.href = url;
          }
        });
      }
    });
  };

  HighAvailability.prototype.getURLFromServer = function (targetServer) {
    var url = null,
      href = location.href,
      protocol = location.protocol + "//";
    for (var i = 0, len = serverPool.length; i < len; i++) {
      var server = serverPool[i];
      url = href.replace(protocol + server, protocol + targetServer);
      if (url !== href) break;
    }    
    return url;
  };

  HighAvailability.prototype.checkIfURLIsReachable = function (
    _url,
    _callback
  ) {
    if (typeof _callback === "function") {
      var callback = function (reachable) {
        _callback(reachable, _url);
      };
      $.ajax({
        url: _url,
        type: "HEAD",
        timeout: 1000,
        cache: false,
        statusCode: {
          200: function () {
            callback(true);
          },
          400: function () {
            callback(false);
          },
          0: function () {
            callback(false);
          },
        },
      });
    }
  };
  /**
   * Provides core APIs to communicate with WebSocket server
   */

  /**
   * emosWS has global scope. It is accessed anywhere in the js code.
   * @global
   * @type {core}
   */
  var emosWS =
    /**
     * Provides core APIs to communicate with WebSocket server
     * @class
     * @alias core
     */
    (function core() {
      var /**
         * Version of emos.js
         * @type {String}
         */
        version = "1.1.7-4",
        /**
         * A global "id" variable
         * @type {String}
         */
        globalID = 0,
        /**
         * Active WebSocket connection
         * @type {WebSocket}
         * @private
         */
        wsocket = null,
        /**
         * Indicates whether the current WebSocket connection is open
         * @type {Boolean}
         * @private
         */
        wsocketIsOpen = false,
        /**
         * Indicates whether the current WebSocket connection is reconnecting
         * @type {Boolean}
         * @private
         */
        wsocketReconnect = false,
        /**
         * Endpoint URI of current WebSocket server
         * @type {String}
         * @private
         */
        wsHostname = null,
        /**
         * URL of current Web Server
         * @type {String}
         * @private
         */
        httpHostname = null,
        /**
         * index of current hostname
         * @type {Number}
         * @private
         */
        hostnameIndex = -1,
        /**
         * Interval of send alive message
         * @type {Number}
         * @private
         */
        sendAliveInterval = 3000 /* in ms */,
        /**
         * Id of datachange
         * @type {Number}
         * @private
         */
        dataChangeId = -1,
        /**
         * Map of parameter
         * @type {Object}
         * @private
         */
        parameterMap = {},
        /**
         * Map of tags
         * @type {Object}
         */
        tagDestination = {},
        /**
         * Map of tags in bad quality
         * @type {Object}
         */
        badQualityTags = {},
        /**
         * Map of auto pokes
         * @type {Object}
         * @private
         */
        autoPokeMap = {},
        /**
         * Map of datachange listeners
         * @type {Object}
         * @private
         */
        datachangeListenerMap = {},
        /**
         * Map of loaded css
         * @type {Object}
         * @private
         */
        loadedCSS = {},
        /**
         * Map of loaded js
         * @type {Object}
         * @private
         */
        loadedJS = {},
        /**
         * Definition of languages
         * @type {Object}
         */
        languageID = Definition.languageID,
        /**
         * Definition of units
         * @type {Object}
         */
        unitID = Definition.unitID,
        /**
         * Definition of tag types
         * @type {Object}
         */
        tagType = Definition.tagType,
        /**
         * Indicates whether the connection is good, it means can receive data after the connection is established
         * @type {Boolean}
         * @private
         */
        connectionBad,
        /**
         * Timeout duration to check the connection (in ms)
         * @type {Number}
         * @private
         */
        connectionTimeout = 3000,
        /**
         * Current language
         * @type {Number}
         * @private
         */
        currentLanguage = undefined,
        /**
         * Current token
         * @type {String}
         * @private
         */
        currentToken = null,
        /**
         * Login info
         * @type {String}
         */
        login = { au: null },
        /**
         * Current unit
         * @type {String}
         * @private
         */
        currentUnit = undefined,
        /**
         * current port of WebSocket
         * @type {String}
         */
        wssPort = "",
        clientTest = new ClientTest(),
        emosEvent = new EventDispatcher(),
        emosCas = new Cas(),
        rest = new Rest(),
        sendQueue = [],
        callbacks = [],
        links = [],
        globalVariables = [],
        animationData = {
          stillInit: false, //While an animation is initiated, this flag is true
          callback: null, //callback to an animation
          param: null,
          globalVariablesSetCallBackAble: false,
        },
        clickData = {
          event: null,
          param: null,
        },
        configuration = {
          onopen: [],
          onmessage: [],
          onclose: [],
          onerror: [],
          infoListener: [],
          systemInfoListener: [],
          languageListener: [],
        },
        attr = {
          storages: {},
          svgobject: null,
          svg: null,
          supportForeignObject: document.implementation.hasFeature(
            "www.http://w3.org/TR/SVG11/feature#Extensibility",
            "1.1"
          ),
          ready: false,
          eventQueue: [],
          DiagnosisWindowMode: 0,
          diagnosisMap: {},
          allowPoke:
            typeof emosAllowPoke === "undefined" ? true : emosAllowPoke,
          siteSet: false,
          siteSent: false,
          siteCalledByFramework: false,
          clientInfo: null,
          site: {
            type: "SiteProperties",
            AckALM: [],
            QuitALM: [],
            BreadcrumbLevel: 0,
            Trends: [],
          },
          userIdleAction: {
            actionLogoff: {
              active: true,
              duration: {
                //in minute
                min: 0.5,
                max: 30,
                default: 10,
              },
            },
            actionReload: {
              active: true,
              duration: {
                //in hour
                min: 0.5,
                max: 96,
                default: 4,
              },
            },
          },
          propagatedMessages: {},
          dataFormatter: null,
        },
        serverStorage = new ServerStorage(null, attr),
        globalStack = [],
        blinkInterval = new BlinkInterval(500),
        shapes = {},
        idb = new IDB(),
        debug = new Debug(),
        userIdleActionLogout = new UserIdleActionLogout(emosEvent, attr),
        userIdleActionReload = new UserIdleActionReload(emosEvent, attr),
        servers = [],
        currentDebugSymbolVisibility = undefined;

      init();

      function loadScript(src, callback) {
        var script = document.createElement("script");
        script.onload = function () {
          if (typeof callback === "function") {
            callback();
          }
        };
        script.src = src;

        document.head.appendChild(script);
      }

      /**
       * Initialization
       */
      function init() {
        new BINDX("DS_STATIC_BINDX_READ");
        new BINDX("DS_STATIC_BINDX_WRITE");
        new BINDX("DS_STATIC_BINDX_SUBSCRIPTION");
        window.addEventListener("message", receiveMessage);

        //load libraries
        loadScript("/lib/js/data.format.js", function () {
          attr.dataFormatter = new DataFormatter();
        });
      }

      function getClientInfo(callback) {
        var cb = function (info) {
          try {
            if (callback) callback(info);
          } catch (e) {}
        };
        if (attr.clientInfo) {
          cb(attr.clientInfo);
        } else {
          emosEvent.addEventListener("ClientInfo", cb);
        }
      }

      function requestClientInfo() {
        if (emosWS.clientInfoIsRequested < 10) {
          rest.tac.getClientInfo({
            success: function (info) {
              attr.clientInfo = info;
              console.log(info);
              emosEvent.dispatchEvent({ type: "ClientInfo", message: info });
            },
            error: function () {
              setTimeout(function () {
                requestClientInfo();
              }, 1000);
            },
          });
          emosWS.clientInfoIsRequested++;
        }
      }

      function _getClientInfo() {
        if (typeof emosWS.clientInfoIsRequested === "undefined") {
          emosWS.clientInfoIsRequested = 0;
          requestClientInfo();
        }
      }

      /**
       * Monitor web servers
       */
      function monitorServers() {
        if (serverPool && servers.length === 0) {
          serverPool.forEach(function (hostname) {
            servers.push(new Server(hostname));
          });
        }
      }

      /**
       * Handler when window receiving post message
       * @param {Object} event - post message received
       */
      function receiveMessage(event) {
        var data = JSON.parse(event.data);

        if (isMessageAlreadyPropagated(data)) return;

        switch (data.type) {
          case "setLanguage":
            setLanguage(data.languageID);
            break;
          case "setUnit":
            setUnit(data.unitID);
            break;
          case "setDebugSymbolVisibility":
            setDebugSymbolVisibility(data.visibility, data);
            break;

          case "access_token":
            setAccessToken(data);
            emosEvent.dispatchEvent({ type: "access_token", message: data });
            break;
          case "OpenDiagnosisWindow":
            //console.log(data);
            emosEvent.dispatchEvent({
              type: "OpenDiagnosisWindow",
              message: data,
            });
            break;
          case "SiteProperties":
            emosEvent.dispatchEvent({ type: "SiteProperties", message: data });
            break;
          case "DiagnosisWindowClosed":
            onDiagnosisWindowClosed(data);
            emosEvent.dispatchEvent({
              type: "DiagnosisWindowClosed",
              message: data,
            });
            break;
          case "DiagnosisWindowMode":
            onDiagnosisWindowMode(data);
            emosEvent.dispatchEvent({
              type: "DiagnosisWindowMode",
              message: data,
            });
            break;

          default:
            break;
        }
      }

      /**
       * Handler when diagnosis window (in frameowork) is closed
       * @param {type} data - data related to diagnosis window
       */
      function onDiagnosisWindowClosed(data) {
        var dw = attr.diagnosisMap[data.id];
        if (dw) {
          dw.unhighlight();
        }
      }

      /**
       * Send properties (e.g. links) of current HMI site to franework
       */
      function sendSitePropertiesToFramework(force) {
        if (
          attr.site &&
          attr.siteCalledByFramework &&
          (!attr.siteSent || force)
        ) {
          attr.site["Links"] = getLinkList();
          informParent(attr.site);
          attr.siteSent = true;
        }
      }

      /**
       * Handler to set diagnosis window mode
       * @param {Object} data - data to set
       * @param {Number} data.mode - value of mode to set
       */
      function onDiagnosisWindowMode(data) {
        attr.DiagnosisWindowMode = data.mode;
        attr.userIdleAction.actionLogoff.active = false;
        attr.userIdleAction.actionReload.active = false;
        userIdleActionLogout.stop();
        attr.siteCalledByFramework = true;
        setTimeout(
          function () {
            attr.siteSet = true;
            sendSitePropertiesToFramework();
          },
          attr.siteSet ? 0 : 2000
        );
      }

      /**
       * Send post messages to other frames
       * @param {String} msg - msg to send
       */
      function propagateMessage(msg) {
        try {
          msg = JSON.parse(msg);
          if (
            typeof window.parent.postMessage !== "undefined" &&
            !isMessageAlreadyPropagated(msg)
          ) {
            if (typeof msg.uuid === "undefined") {
              msg.uuid = guid();
            }
            attr.propagatedMessages[msg.uuid] = msg;
            var msgString = JSON.stringify(msg);
            window.parent.postMessage(msgString, location.href);
            for (var i = 0, len = window.parent.frames.length; i < len; i++) {
              window.parent.frames[i].postMessage(msgString, "*");
            }

            //this uuid message is lasting only 5 seconds to detect the recursive propagation, then is deleted.
            var uuid = msg.uuid;
            setTimeout(function () {
              delete attr.propagatedMessages[uuid];
            }, 5000);
          }
        } catch (err) {
          console.error("propagateMessage() failed: " + err);
        }
      }

      /**
       * Check if a message is propagated before by current emos.js
       * @param {object} msg
       * @returns {boolean} whether the messsage is already propagated
       */
      function isMessageAlreadyPropagated(msg) {
        try {
          return msg.uuid ? attr.propagatedMessages[msg.uuid] : false;
        } catch (e) {
          return false;
        }
      }

      /**
       * Send post message to window parent
       * @param {Object} msg - msg to send
       */
      function informParent(msg) {
        try {
          if (typeof window.parent.postMessage !== "undefined") {
            window.parent.postMessage(JSON.stringify(msg), "*");
          }
        } catch (err) {
          console.error("informFramework() failed: " + err);
        }
      }

      /**
       * Handler when emos.js is ready
       */
      function onReady() {
        attr.eventQueue.forEach(function (i) {
          i.o.addEventListener(i.event, i.listener, i.capture);
        });
        attr.ready = true;
        attr.eventQueue = [];
        attr.highAvailability = attr.highAvailability || new HighAvailability();
      }

      /**
       * Initilize language setting
       */
      function languageInit() {
        setLanguage(getLanguage());
      }

      /**
       * Initilize unit setting
       */
      function unitInit() {
        setUnit(getUnit());
      }

      function debugInit() {
        try {
          setDebugSymbolVisibility(getDebugSymbolVisibility());
        } catch (e) {
          console.error(e);
        }
      }

      /**
       * Get current language
       * @returns {Number} - the value of current language
       */
      function getLanguage() {
        if (currentLanguage === undefined) {
          if (typeof defaultLanguage !== "undefined") {
            return defaultLanguage;
          }

          if (typeof localStorage !== "undefined") {
            if (typeof localStorage.emosLanguage !== "undefined") {
              return localStorage.emosLanguage;
            }
          }

          return languageID.DECP_German.value;
        } else {
          return currentLanguage;
        }
      }

      /**
       * Get current unit
       * @returns {Number} the value of current unit: 0 (Metric), 1 (Imperial), 2 (Locale)
       */
      function getUnit() {
        if (currentUnit === undefined) {
          if (typeof defaultUnit !== "undefined") {
            return defaultUnit;
          }

          if (typeof localStorage !== "undefined") {
            if (typeof localStorage.emosUnit !== "undefined") {
              return parseInt(localStorage.emosUnit);
            }
          }

          return unitID.Metric;
        } else {
          return currentUnit;
        }
      }

      /**
       * Get current WebSocket server's endpoint URI
       * @returns {String}
       */
      function getWSHostname() {
        return wsHostname;
      }

      /**
       * Get current Web Server URL
       * @returns {String}
       */
      function getHostname() {
        if (httpHostname) {
          return httpHostname;
        } else {
          try {
            return location.protocol + "//" + serverPool[0];
          } catch (e) {
            console.error(e);
          }
        }
      }

      function getPermanentLanguage() {
        var permanentLanguage;
        try {
          var permanentLanguage = G_Params["language"];
          if (permanentLanguage) {
            for (var langKey in languageID) {
              var langItem = languageID[langKey];
              if (langItem.id === permanentLanguage) {
                permanentLanguage = langItem.value;
                break;
              }
            }
          }
        } catch (e) {}
        return permanentLanguage;
      }

      /**
       * Set language
       * @param {Number} langID - value of language to set
       */
      function setLanguage(langID) {
        var permanentLanguage = getPermanentLanguage();
        if (permanentLanguage) langID = permanentLanguage;

        if (
          typeof langID !== "undefined" &&
          currentLanguage !== langID &&
          wsocketIsOpen
        ) {
          currentLanguage = langID;
          if (typeof localStorage !== "undefined") {
            localStorage.emosLanguage = langID;
          }
          sendSetLanguage(langID);
          emosEvent.dispatchEvent({ type: "language", message: langID });
          var msg = new Object();
          msg.type = "setLanguage";
          msg.languageID = langID;
          propagateMessage(JSON.stringify(msg));
        }
      }

      /**
       * Set measurement system (Metric, Imperial, Locale).
       * It will (1) dispatch the event "unit" to every listeners which are currently listening for this "unit" event
       * and (2) send the web messaging (contained the unit to set) to others frame/iframes.
       *
       * @param {Number} unitID - the id of measurement system to set: 0 (Metric), 1 (Imperial), 2 (Locale)
       *
       * @example <caption>1. Set measurement system to <b>metric</b></caption>
       * emosWS.setUnit(0);
       * @example <caption>2. Set measurement system to <b>imperial</b></caption>
       * emosWS.setUnit(1);
       * @example <caption>3. Set measurement system to <b>locale</b></caption>
       * emosWS.setUnit(2);
       * @example <caption>4. Listening to the unit-change event</caption>
       * emosWS.addEventListener('unit', function(unitID){
       *      //unitID: 0 (Metric), 1 (Imperial), 2 (Locale)
       *      console.log("The unit is changed to: "  + unitID);
       * });
       */
      function setUnit(unitID) {
        if (
          typeof unitID !== "undefined" &&
          currentUnit !== unitID &&
          wsocketIsOpen
        ) {
          currentUnit = unitID;
          if (typeof localStorage !== "undefined") {
            localStorage.emosUnit = unitID;
          }

          emosEvent.dispatchEvent({ type: "unit", message: unitID });
          var msg = new Object();
          msg.type = "setUnit";
          msg.unitID = unitID;
          propagateMessage(JSON.stringify(msg));
        }
      }

      /**
       * Set visibility of VISU debug symbol
       * @param {Boolean} visibility - show or hide the debug symbol in VISU page
       * @param {Boolean} message - message received
       */
      function setDebugSymbolVisibility(visibility, message) {
        if (typeof visibility !== "undefined") {
          if (currentDebugSymbolVisibility !== visibility) {
            currentDebugSymbolVisibility = visibility;
            if (typeof localStorage !== "undefined") {
              localStorage.emosDebugSymbolVisibility = visibility;
            }
            debug.setDebugSymbolVisiblity(visibility);
          }
          propagateMessage(
            JSON.stringify(
              message || {
                type: "setDebugSymbolVisibility",
                visibility: visibility,
              }
            )
          );
        }
      }

      /**
       * Get visibility of VISU debug symbol
       * @returns {Boolean} - visibility of the VISU debug symbol
       */
      function getDebugSymbolVisibility() {
        if (currentDebugSymbolVisibility === undefined) {
          if (typeof localStorage !== "undefined") {
            if (typeof localStorage.emosDebugSymbolVisibility !== "undefined") {
              return localStorage.emosDebugSymbolVisibility === "true";
            }
          }
          return true;
        }
        return currentDebugSymbolVisibility;
      }

      /**
       * Set access token
       * @param {Object} data - data of access token to set
       */
      function setAccessToken(data) {
        if (typeof data === "undefined") return;
        login.au.onAccesToken(data);
      }

      /**
       * Check whether message has good quality
       * @param {Object} msg - message to check
       * @param {Number} msg.quality - value of quality of a message
       * @returns {Boolean} whether has good quality
       */
      function hasQualityGood(msg) {
        if (typeof msg.quality !== "undefined") {
          return msg.quality === 192;
        }
        return false;
      }

      /**
       * Connect to WebSocket endpoint
       * @param {Object} [config] - configuration of connect
       * @param {String} [config.host] - hostname from WebSocker Server URI
       * @param {Function} [config.onopen] - a callback function is called when the websocket connection is opened
       * @param {Function} [config.onmessage] - a callback function is called when a message received
       * @param {Function} [config.onclose] - a callback function is called when the websocket connection is closed
       * @param {Function} [config.onerror] - a callback function is called when the websocket connection has error
       * @param {Function} [config.infoListener] - a callback function is called when a info message received
       * @param {Function} [config.systemInfoListener] - a callback function is called when a system info message received
       * @param {Function} [config.languageListener] - a callback function is called when the language is changed
       *
       * @tutorial data_01
       */
      function connect(config) {
        try {
          emosEvent.addEventListener("openWS", function () {});
          emosEvent.addEventListener("connecting", function () {});
          emosEvent.addEventListener("unit", function () {});
          emosEvent.addEventListener("ready", onReady);
          emosEvent.addEventListener("DiagnosisWindowMode", function () {});
          emosEvent.addEventListener("Auto_Logoff_Reload", function () {});
          emosEvent.addEventListener("4h_Reload", function () {});
          emosEvent.addEventListener(
            "ActiveCasServer",
            emosCas.onActiveCasServer.bind(emosCas)
          );
          emosEvent.addEventListener("Quality", function () {});
          emosEvent.addEventListener("ondatachange", function () {});
          emosEvent.addEventListener("ClientInfo", onClientInfo);
          if (typeof mainsvg !== "undefined") {
            attr.svgobject = document.getElementById(mainsvg);
            if (attr.svgobject) {
              attr.svg = attr.svgobject.getSVGDocument();
              attr.svgobject.style["visibility"] = "visible";
            }
          }
          login.au = window.LoginDialog || new LoginDialog(); //new LoginDialog();
          if (typeof config !== "undefined") {
            if (typeof config.host !== "undefined") {
              configuration.host = config.host;
            }
            if (typeof config.onopen !== "undefined") {
              //emosEvent.addEventListener("open", config.onopen);
              try {
                config.onopen();
                emosEvent.dispatchEvent({ type: "ready" });
              } catch (e) {
                console.error("[config.onopen] : ", e);
              }
            }
            if (typeof config.onmessage !== "undefined") {
              emosEvent.addEventListener("message", config.onmessage);
            }
            if (typeof config.onclose !== "undefined") {
              emosEvent.addEventListener("close", config.onclose);
            }
            if (typeof config.onerror !== "undefined") {
              emosEvent.addEventListener("error", config.onerror);
            }
            if (typeof config.infoListener !== "undefined") {
              emosEvent.addEventListener("info", config.infoListener);
            }
            if (typeof config.systemInfoListener !== "undefined") {
              emosEvent.addEventListener(
                "systemInfo",
                config.systemInfoListener
              );
            }
            if (typeof config.languageListener !== "undefined") {
              emosEvent.addEventListener("language", config.languageListener);
            }
          } else {
            emosEvent.dispatchEvent({ type: "ready" });
          }

          if (
            typeof configuration.host === "undefined" &&
            typeof serverPool !== "undefined"
          ) {
            configuration.host = getNextServer();
          }
          var endPointURI = getEndPointURI(configuration.host);
          console.info(
            "[",
            location.pathname,
            "] connecting to [",
            endPointURI,
            "]"
          );
          if (wsocket === null || wsocket.readyState === 3) {
            // 3: CLOSED
            wsHostname = endPointURI;
            httpHostname = location.protocol + "//" + configuration.host;
            emosEvent.dispatchEvent({
              type: "connecting",
              message: "connecting",
            });
            wsocket = new WebSocket(endPointURI);
            wsocket.onopen = onEmosOpen;
            wsocket.onmessage = onEmosMessage;
            wsocket.onclose = onClose;
            wsocket.onerror = onError;
          } else if (wsocket.readyState === 1) {
            if (typeof config.onopen !== "undefined") {
              config.onopen();
            }
          }
          monitorServers();
          _getClientInfo();
        } catch (err) {
          console.error("[connect() failed] : ", err);
        }
      }

      /**
       * Inject the value of client info to the runtime of VISU page
       * @param {Object} info - client info object
       */
      function onClientInfo(info) {
        var variableMapping = {
          _IP: "ip",
          _HostName: "hostname",
          _CanonicalHostName: "canonicalHostname",
        };
        try {
          for (var variableKey in variableMapping) {
            DS_HMI.SetVariable(
              variableKey,
              info[variableMapping[variableKey]],
              true
            );
          }
        } catch (e) {
          console.log(e);
        }
      }

      /**
       *  Handler when WebSocket connection is open
       *  @private
       */
      function onEmosOpen() {
        try {
          if (!wsocketIsOpen) {
            console.info(
              "[",
              location.pathname,
              "] established a WS connection"
            );
            wsocketIsOpen = true;
            sendUserAgent();
            sendAliveMessage();
            connectionBad = true;
            checkConnection();
            languageInit();
            unitInit();
            debugInit();
            emosEvent.dispatchEvent({ type: "openWS" });
            if (
              wsocketReconnect &&
              Object.keys(datachangeListenerMap).length > 0
            ) {
              readviseHistory();
            } else {
              emosEvent.dispatchEvent({ type: "open" });
            }
            login.au = window.LoginDialog || new LoginDialog(this);
          }
        } catch (err) {
          console.error("onEmosOpen() failed: " + err);
        }
      }

      /**
       * Handler when WebSocket connection get message
       * @param {Object} evt - event object
       */
      function onEmosMessage(evt) {
        try {
          if (connectionBad) {
            connectionBad = false;
          }
          //   console.log(evt.data);
          var msg = JSON.parse(evt.data);
          var param;
          switch (msg.type) {
            case "dataChange":
            case "alarmText":
            case "trendInfo":
            case "trendPlantList":
            case "trendItemList":
            case "trendItemValueList":
            case "diagnosisWindow":
              if (msg.type === "diagnosisWindow") {
                msg.value = JSON.parse(msg.value);
              }

              if (typeof datachangeListenerMap[msg.id] !== "undefined") {
                var callbackData = datachangeListenerMap[msg.id];
                param = callbackData.parameter;
                callbackData.callback(msg, param);
                emosEvent.dispatchEvent({ type: "ondatachange", message: msg });
              }
              break;

            case "systemInfo":
              emosEvent.dispatchEvent({ type: "systemInfo", message: msg });
              break;
            case "info":
              emosEvent.dispatchEvent({ type: "info", message: msg });
              break;
            case "general":
              switch (msg.key) {
                case "TestSVGRender":
                  clientTest.testSVGRender(msg);
                  break;
                case "Authentication":
                  emosEvent.dispatchEvent({
                    type: "authentication",
                    message: JSON.parse(msg.value),
                  });
                  break;

                case "ActiveCasServer":
                  emosEvent.dispatchEvent({
                    type: "ActiveCasServer",
                    message: JSON.parse(msg.value),
                  });
                  emosEvent.dispatchEvent({
                    type: "ActiveCasServerReady",
                    message: JSON.parse(msg.value),
                  });
                  break;

                default:
                  break;
              }
              break;
            default:
              break;
          }

          emosEvent.dispatchEvent({ type: "message", message: msg });
        } catch (err) {
          console.error("onEmosMessage() failed: " + err);
        }
      }

      /**
       * Get id of a tag (topic)
       * @param {String} name of the tag
       * @param {Object} [iTagType=emosWS.tagType.IO] - type of the topic, either of predefined options: <br>
       *                  emosWS.tagType.IO<br>
       *                  emosWS.tagType.IOAlarm<br>
       *                  emosWS.tagType.Alarm<br>
       *                  emosWS.tagType.AlarmText<br>
       *                  emosWS.tagType.Diagnosis<br>
       *                  emosWS.tagType.Property<br>
       *                  emosWS.tagType.IOObject<br>
       *                  emosWS.tagType.Text<br>
       *                  emosWS.tagType.IOObjectPLC
       * @param {String} [UnitMetric] - unit of tag in metric
       * @param {Number} [FactorMetric] - the factor of tag in metric
       * @param {String} [UnitImperial] - unit of tag in imperial
       * @param {Number} [FactorImperial] - the factor of tag in imperial
       * @param {String} [UnitLocale] - unit of tag in locale
       * @param {Number} [FactorLocale] - the factor of tag in locale
       * @param {String} [UnitDefault] - default unit of tag
       * @param {Number} [Precision] - the precision of tag value (how many digit after comma)
       * @param {Number} [Stretch] - the stretch of tag value
       * @param {Number} [Offset] - the offset of tag value
       * @returns {String} id of the tag (topic)
       */
      function getTagId(
        tag,
        iTagType,
        UnitMetric,
        FactorMetric,
        UnitImperial,
        FactorImperial,
        UnitLocale,
        FactorLocale,
        UnitDefault,
        Precision,
        Stretch,
        Offset,
        param
      ) {
        iTagType = iTagType ? iTagType : tagType.IO.id;
        return iTagType.subscriberGroup.prototype.getTagId(
          tag,
          iTagType,
          UnitMetric,
          FactorMetric,
          UnitImperial,
          FactorImperial,
          UnitLocale,
          FactorLocale,
          UnitDefault,
          Precision,
          Stretch,
          Offset,
          param
        );
      }

      /**
       * Subscribe to get the value of a topic (e.g. a PLC IO, IO Alarm, Alarm, Property...)
       * @param {String} tag - tag name
       * @param {Function} callback - a callback function which is fired when datachange message comes
       * @param {Object} [param] - extra data want to pass to the callback function
       * @param {Object} [iTagType=emosWS.tagType.IO] - type of the topic, either of predefined options: <br>
       *                  emosWS.tagType.IO<br>
       *                  emosWS.tagType.IOAlarm<br>
       *                  emosWS.tagType.Alarm<br>
       *                  emosWS.tagType.AlarmText<br>
       *                  emosWS.tagType.Diagnosis<br>
       *                  emosWS.tagType.Property<br>
       *                  emosWS.tagType.IOObject<br>
       *                  emosWS.tagType.Text<br>
       *                  emosWS.tagType.IOObjectPLC
       * @param {String} [UnitMetric] - unit of tag in metric
       * @param {Number} [FactorMetric] - the factor of tag in metric
       * @param {String} [UnitImperial] - unit of tag in imperial
       * @param {Number} [FactorImperial] - the factor of tag in imperial
       * @param {String} [UnitLocale] - unit of tag in locale
       * @param {Number} [FactorLocale] - the factor of tag in locale
       * @param {String} [UnitDefault] - default unit of tag
       * @param {Number} [Precision] - the precision of tag value (how many digit after comma)
       * @param {Number} [Stretch] - the stretch of tag value
       * @param {Number} [Offset] - the offset of tag value
       *
       * @tutorial data_02
       */
      function advise(
        tag,
        callback,
        param,
        iTagType,
        UnitMetric,
        FactorMetric,
        UnitImperial,
        FactorImperial,
        UnitLocale,
        FactorLocale,
        UnitDefault,
        Precision,
        Stretch,
        Offset
      ) {
        try {
          if (
            !tag ||
            tag === "" ||
            tag[0] === "." ||
            tag[tag.length - 1] === "." ||
            tag.indexOf("..") > -1 ||
            tag.indexOf("undefined") > -1 ||
            tag.indexOf("#") > -1
          )
            return null;

          iTagType = iTagType || Definition.tagType.IO;
          var tagID = getTagId(
            tag,
            iTagType,
            UnitMetric,
            FactorMetric,
            UnitImperial,
            FactorImperial,
            UnitLocale,
            FactorLocale,
            UnitDefault,
            Precision,
            Stretch,
            Offset,
            param
          );
          var subscriberGroup = tagDestination[tagID];
          if (typeof subscriberGroup === "undefined") {
            subscriberGroup = new iTagType.subscriberGroup(
              tag,
              iTagType,
              UnitMetric,
              FactorMetric,
              UnitImperial,
              FactorImperial,
              UnitLocale,
              FactorLocale,
              UnitDefault,
              Precision,
              Stretch,
              Offset,
              param
            );
            tagDestination[tagID] = subscriberGroup;
          }
          var subscriber = new Subscriber(callback, param);
          subscriberGroup.register(subscriber);
          //return callback;
          return subscriberGroup;
        } catch (err) {
          console.error("advise() error: " + err);
        }
      }

      /**
       * Get type of a tag (topic)
       * @param {String} tag - full name of tag to get type
       * @returns {Object} type of the tag
       */
      function getTagType(tag) {
        var suffix,
          n = tag.lastIndexOf(".");
        if (n > 0) {
          suffix = tag.substring(n + 1, tag.length);
          tag = tag.substring(0, n);
        }
        Object.keys(tagType).forEach(function (key) {
          if (tagType[key].id === suffix) return tagType[key];
        });
        return tagType.IO;
      }

      /**
       * Unsubscribe a callback from a tag (topic)
       * @param {String} tag - fullname of tag to unsubscribe
       * @param {Function} callback - callback function to unsubscribe
       */
      function unadvise(tag, callback) {
        try {
          var subscriberGroup = tagDestination[tag];
          if (subscriberGroup) subscriberGroup.unregister(callback);
        } catch (err) {
          console.error("unAdvise() error: " + err);
        }
      }

      /**
       * Get value of a tag (topic)
       * @param {String} plctag - name of plctag
       * @param {String} [tag] - name of tag
       * @returns {Object} value of tag
       */
      function getTagValue(plctag, tag) {
        //console.log("getTagValue: " + (plctag + (tag ? tag : "")) + " / stillInit = " + animationData.stillInit + (emosWS.animationData.callback ? (" / shape = " + emosWS.animationData.callback.target) : ""));
        var actualData = getTagData(plctag, tag);
        return actualData ? actualData.value : null;
      }

      /**
       * Get object of a tag (topic)
       * @param {String} plctag - name of plctag
       * @param {String} tag - name of tag
       * @param {String} [UnitMetric] - unit of tag in metric
       * @param {Number} [FactorMetric] - the factor of tag in metric
       * @param {String} [UnitImperial] - unit of tag in imperial
       * @param {Number} [FactorImperial] - the factor of tag in imperial
       * @param {String} [UnitLocale] - unit of tag in locale
       * @param {Number} [FactorLocale] - the factor of tag in locale
       * @param {String} [UnitDefault] - default unit of tag
       * @param {Number} [Precision] - the precision of tag value (how many digit after comma)
       * @param {Number} [Stretch] - the stretch of tag value
       * @param {Number} [Offset] - the offset of tag value
       * @returns {Object} object of tag
       */
      function getTagObject(
        plctag,
        tag,
        UnitMetric,
        FactorMetric,
        UnitImperial,
        FactorImperial,
        UnitLocale,
        FactorLocale,
        UnitDefault,
        Precision,
        Stretch,
        Offset
      ) {
        var actualData = getTagDataObject(
          plctag,
          tag,
          UnitMetric,
          FactorMetric,
          UnitImperial,
          FactorImperial,
          UnitLocale,
          FactorLocale,
          UnitDefault,
          Precision,
          Stretch,
          Offset
        );

        return actualData ? actualData.value : null;
      }

      /**
       * Get language text of a textID
       * @param {String} textID - name of textID
       * @param {String} subText - name if subText
       * @param {String} defaultText - the text returned by default when the laguage text not availabe
       * @returns {String} text of the textID
       */
      function getText(textID, subText, defaultText) {
        subText = (subText ? subText : "") + ".name";
        var actualData = getTag(textID, subText, tagType.Text);
        return actualData ? actualData.value : defaultText ? defaultText : "";
      }

      /**
       * [Boolean] = GetAlarmGroupPropertyAsBoolean([String],[String]);<br>
       * [Integer] = GetAlarmGroupPropertyAsInteger([String],[String]);<br>
       * [Double] = GetAlarmGroupPropertyAsDouble([String],[String]);<br>
       * [String] = GetAlarmGroupPropertyAsString([String],[String]);<br><br>
       *
       *  These functions return the property that is specified by a string of
       *  the AlarmGroup as a Boolean, Integer, Double or String.
       *
       *  The following properties are available:<br><br>
       *
       *  PrioMin0 â¦ PrioMin30	Minimum priority of the specified alarm class 0 to 30<br>
       *  PrioMax0 â¦ PrioMax30	Maximum priority of the specified alarm class 0 to 30<br>
       *  State0   â¦ State30          Alarm state of the specified alarm class 0 to 30<br>
       *  StateNew	the alarm new state of all classes as an integer<br>
       *  StateAck	the alarm acknowledged state of all classes as an integer<br>
       *
       * @param {String} alarmGroup
       * @param {String} property
       * @returns {(Number|String)} value of an alarm property
       */
      function getAlarmGroupProperty(alarmGroup, property) {
        try {
          var actualData = getTag(alarmGroup, "", tagType.Alarm);
          if (actualData) {
            property = property.toLowerCase();
            var matched = false,
              value = null;

            //PrioMin0 â¦ PrioMin30
            value = property.replace(/PrioMin(\d+)/i, function (m, id) {
              matched = true;
              id = parseInt(id);
              return actualData.classStateRec.prioFrom[id];
            });

            if (matched) return value;

            //PrioMax0 â¦ PrioMax30
            value = property.replace(/PrioMax(\d+)/i, function (m, id) {
              matched = true;
              id = parseInt(id);
              return actualData.classStateRec.prioTo[id];
            });

            if (matched) return value;

            //State0 â¦ State30
            value = property.replace(/State(\d+)/i, function (m, id) {
              matched = true;

              //New : 0
              var states = intToBinary(
                actualData.classStateRec.ClassStateNew,
                32
              );
              if (states.charAt(31 - id) === "1") return 0;

              //Acknowledge : 1
              states = intToBinary(actualData.classStateRec.ClassStateAck, 32);
              if (states.charAt(31 - id) === "1") return 1;

              //No Fault : 2
              return 2;
            });

            if (matched) return value;

            //StateNew, StateAck
            value = property.replace(/State(New|Ack)/i, function (m, New) {
              matched = true;
              var v =
                New.toLowerCase() === "new"
                  ? actualData.classStateRec.ClassStateNew
                  : actualData.classStateRec.ClassStateAck;
              if (typeof v === "string") v = parseInt(v, 2);
              return v;
            });
            if (matched) return value;
          }
          return null;
        } catch (e) {
          console.error("[getAlarmGroupProperty] failed: " + e);
          return null;
        }
      }

      /**
       * Get value of a property of a tag (topic)
       * @param {String} plctag - fullname of plctag to get
       * @param {type} property - name of property to get
       * @returns {Object} value of the property
       */
      function getTagProperty(plctag, property) {
        try {
          var actualData = getTag(plctag, "", tagType.Property);
          return actualData ? actualData.value[property] : null;
        } catch (e) {
          console.error("[getTagProperty] failed: " + e);
          return null;
        }
      }

      /**
       * Get quality as boolean of an IO tag
       * @param {type} plctag is IO tag name
       * @param {tag} tag is tag name (optinal
       * @returns {Boolean} true if quality is good (=192)
       */
      function getTagQualityAsBoolean(plctag, tag, Default) {
        var actualData = getTagData(plctag, tag);
        return actualData
          ? actualData.quality === 192
            ? true
            : false
          : typeof Default === "undefined"
          ? false
          : Default;
      }

      /**
       * Get actual data of an IO tag
       * @param {type} plctag is IO tag name
       * @param {type} tag is tag name (optinal
       * @returns {object} actual data
       */
      function getTagData(plctag, tag) {
        return getTag(plctag, tag, tagType.IO);
      }

      /**
       * Get object of a tag (topic)
       * @param {String} plctag - name of plctag
       * @param {String} tag - name of tag
       * @param {String} [UnitMetric] - unit of tag in metric
       * @param {Number} [FactorMetric] - the factor of tag in metric
       * @param {String} [UnitImperial] - unit of tag in imperial
       * @param {Number} [FactorImperial] - the factor of tag in imperial
       * @param {String} [UnitLocale] - unit of tag in locale
       * @param {Number} [FactorLocale] - the factor of tag in locale
       * @param {String} [UnitDefault] - default unit of tag
       * @param {Number} [Precision] - the precision of tag value (how many digit after comma)
       * @param {Number} [Stretch] - the stretch of tag value
       * @param {Number} [Offset] - the offset of tag value
       * @returns {Object} object of tag
       */
      function getTagDataObject(
        plctag,
        tag,
        UnitMetric,
        FactorMetric,
        UnitImperial,
        FactorImperial,
        UnitLocale,
        FactorLocale,
        UnitDefault,
        Precision,
        Stretch,
        Offset
      ) {
        return getTag(
          plctag,
          tag,
          tagType.IOObject,
          UnitMetric,
          FactorMetric,
          UnitImperial,
          FactorImperial,
          UnitLocale,
          FactorLocale,
          UnitDefault,
          Precision,
          Stretch,
          Offset
        );
      }

      /**
       * Get value of a tag
       * @param {String} plctag - name of plctag
       * @param {String} tag - name of tag
       * @param {Object} type of the tag
       * @param {String} [UnitMetric] - unit of tag in metric
       * @param {Number} [FactorMetric] - the factor of tag in metric
       * @param {String} [UnitImperial] - unit of tag in imperial
       * @param {Number} [FactorImperial] - the factor of tag in imperial
       * @param {String} [UnitLocale] - unit of tag in locale
       * @param {Number} [FactorLocale] - the factor of tag in locale
       * @param {String} [UnitDefault] - default unit of tag
       * @param {Number} [Precision] - the precision of tag value (how many digit after comma)
       * @param {Number} [Stretch] - the stretch of tag value
       * @param {Number} [Offset] - the offset of tag value
       * @returns {Object} value of tag
       */
      function getTag(
        plctag,
        tag,
        tagType,
        UnitMetric,
        FactorMetric,
        UnitImperial,
        FactorImperial,
        UnitLocale,
        FactorLocale,
        UnitDefault,
        Precision,
        Stretch,
        Offset
      ) {
        try {
          plctag = typeof tag === "undefined" ? plctag : plctag + tag;
          if (
            !plctag ||
            plctag === "" ||
            plctag[0] === "." ||
            plctag[plctag.length - 1] === "."
          )
            return null;

          var subscriberGroup =
            tagDestination[
              getTagId(
                plctag,
                tagType,
                UnitMetric,
                FactorMetric,
                UnitImperial,
                FactorImperial,
                UnitLocale,
                FactorLocale,
                UnitDefault,
                Precision,
                Stretch,
                Offset
              )
            ];

          if (animationData.stillInit) {
            var sg = advise(
              plctag,
              animationData.callback
                ? animationData.callback.datachangeListener
                : null,
              animationData.param,
              tagType,
              UnitMetric,
              FactorMetric,
              UnitImperial,
              FactorImperial,
              UnitLocale,
              FactorLocale,
              UnitDefault,
              Precision,
              Stretch,
              Offset
            );
            return sg ? sg.actualData : null;
          } else if (typeof subscriberGroup === "undefined") {
            var sg = advise(
              plctag,
              emosWS.currentAnimation
                ? emosWS.currentAnimation.datachangeListener
                : null,
              null,
              tagType,
              UnitMetric,
              FactorMetric,
              UnitImperial,
              FactorImperial,
              UnitLocale,
              FactorLocale,
              UnitDefault,
              Precision,
              Stretch,
              Offset
            );
            return sg ? sg.actualData : null;
          } else {
            return subscriberGroup.actualData;
          }
        } catch (err) {
          console.error("getTag() error: " + err);
        }
      }

      /**
       * When passed a key name, will return that key's value.
       *
       * @param {String} keyName - A string containing the name of the key you want to create/update.
       * @param {Boolean} getAll - determines if want to get all items.
       * @return {String|Array} The value of the key. If the key does not exist, null is returned.
       */
      function getServerStorageItem(keyName, getAll) {
        try {
          var callback = null;
          if (animationData.stillInit && animationData.callback) {
            var param = animationData.param;
            callback = function (value) {
              animationData.callback.datachangeListener(value, param);
            };
          }
          return emosWS.serverStorage.getItem(keyName, callback, getAll);
        } catch (e) {
          console.error(e);
          return null;
        }
      }

      function getServerStorage(storageName) {
        storageName = storageName
          ? "storages/" + storageName
          : "server_storage";
        return (
          emosWS.attr.storages[storageName] ||
          new ServerStorage("/config/" + storageName + ".json")
        );
      }

      /**
       * Send message to server
       * @param {type} msgArray is message to send
       * @param {function} callback is fired when new datachange comes
       * @param {type} param is extra data want to pass to the callback function
       */
      function send(msgArray, callback, param) {
        var jsonstr;
        try {
          if (typeof callback === "function") {
            msgArray.id = addDatachangeListener(callback, msgArray, param);
          }

          jsonstr = JSON.stringify(msgArray);
          var sendFunction = function () {
            wsocket.send(jsonstr);
          };

          if (wsocketIsOpen) {
            //wsocket is Open
            sendFunction();
          } else {
            //add to on-open queue
            emosEvent.addEventListener("open", sendFunction);
          }
          return msgArray.id;
        } catch (err) {
          console.log("send failed: " + err);
        }
      }

      /**
       * Add listener for a datachange
       * @param {function} datachangeCallback is fired when new datachange comes
       * @param {type} message will be sent again to the server during re-connecting
       * @param {type} param is extra data want to pass to the callback function
       */
      function addDatachangeListener(datachangeCallback, message, param) {
        try {
          message.id = ++dataChangeId;
          var callbackData = new Object();
          callbackData.callback = datachangeCallback;
          callbackData.parameter = param;
          callbackData.message = message;
          datachangeListenerMap[dataChangeId] = callbackData;
          if (typeof param !== "undefined") {
            parameterMap[param] = dataChangeId;
          }

          return dataChangeId;
        } catch (err) {
          console.error("addDatachangCallback failed: " + err);
        }
      }

      /**
       * Removes listener of a datachange
       * @param {type} id
       */
      function removeDatachangeListener(id) {
        try {
          delete datachangeListenerMap[id];
        } catch (err) {
          console.error("removeDatachangCallback failed: " + err);
        }
      }

      /**
       * When the connection is closed unexpectedly, emosWS will try to reconnect.
       * After this connection is established, all advise requests from previous
       * session are sent again to the server. This function does this job.
       */
      function readviseHistory() {
        console.log("readviseHistory");
        try {
          for (var dataChangeId in datachangeListenerMap) {
            send(datachangeListenerMap[dataChangeId].message);
          }
        } catch (err) {
          console.error("readviseHistory failed: " + err);
        }
      }

      /**
       * Send IO advise message to the server
       * @param {String} plc is PLC name
       * @param {String} tag is tag name
       * @param {function} callback is fired when new datachange comes
       * @param {type} param is extra data want to passed to the callback function
       */
      function sendAdvise(plc, tag, callback, param) {
        //console.info("[sendAdvise] ", plc + tag);
        if (plc && !(plc === "" && tag === "")) {
          var msgArray = {};
          msgArray.id = "";
          msgArray.type = "advise";
          msgArray.plc = plc;
          msgArray.tag = tag;
          send(msgArray, callback, param);
        } else {
          console.error(
            "plc / tag is not valid: plc = " + plc + " / tag = " + tag
          );
        }
      }

      /**
       * Send simple Alarm advise message to the server
       * @param {String} plc is PLC name
       * @param {String} tag is tag name
       * @param {function} callback is fired when new datachange comes
       * @param {type} param is extra data want to passed to the callback function
       */
      function sendAdviseAlarm(plc, tag, callback, param) {
        if (plc && !(plc === "" && tag === "")) {
          var msgArray = {};
          msgArray.id = "";
          msgArray.type = "adviseAlarm";
          msgArray.plc = plc;
          msgArray.tag = tag;
          send(msgArray, callback, param);
        } else {
          console.error(
            "plc / tag is not valid: plc = " + plc + " / tag = " + tag
          );
        }
      }

      /**
       * Send full Alarm advise message to the server
       * @param {String} alarmGroup is alarm group name
       * @param {integer} languageID is id of language
       * @param {function} callback is fired when new datachange comes
       * @param {type} param extra data want to passed to the callback function
       */
      function sendAdviseAlarmText(alarmGroup, languageID, callback, param) {
        if (alarmGroup) {
          var msgArray = {};
          msgArray.id = "";
          msgArray.type = "adviseAlarmText";
          msgArray.alarmGroup = alarmGroup;
          msgArray.languageID = languageID;
          return send(msgArray, callback, param);
        } else {
          console.error("alarmGroup is not valid: alarmGroup = " + alarmGroup);
        }
      }

      /**
       * Convert a property string to object
       * @param {String} s - value of property string
       * @returns {Object} converted Object
       */
      function convertPropertyStringToObject(s) {
        try {
          if (s === "*** tag not found ***" || s === "") return null;
          else {
            var o = {};
            props = s.split(";");
            props.forEach(function (pro) {
              pair = pro.split("=");
              if (pair) {
                o[pair[0]] = pair[1];
              }
            });
            return o;
          }
        } catch (e) {
          console.error("[convertPropertyStringToObject] failed: " + e);
          return null;
        }
      }

      /**
       * Send advise of property to websocket server
       * @param {String} plc - name of plc
       * @param {String} tag - name of tag
       * @param {Funtion} callback - callback function when receiving datachange
       * @param {Object} param - option parameter
       */
      function sendAdviseProperty(plc, tag, callback, param) {
        if (plc && !(plc === "" && tag === "")) {
          var msgArray = {};
          msgArray.id = "";
          msgArray.type = "adviseProperty";
          msgArray.plc = plc;
          msgArray.tag = tag;
          send(
            msgArray,
            function (imsg, iparam) {
              imsg.value = convertPropertyStringToObject(imsg.value);
              callback(imsg, iparam);
            },
            param
          );
        } else {
          console.error(
            "plc / tag is not valid: plc = " + plc + " / tag = " + tag
          );
        }
      }

      /**
       * Send "trend register" request to websocket server
       * @param {Function} callback - callback function when receiving datachange
       * @param {Object} param - option parameter
       */
      function sendTrendRegister(callback, param) {
        var msgArray = {};
        msgArray.id = "";
        msgArray.type = "trendRegister";
        send(msgArray, callback, param);
      }

      /**
       * Send "trend get plant list" request to websocket server
       * @param {String} trendId - the registered id of trend session
       * @param {Function} callback - callback function when receiving datachange
       * @param {Object} param - option parameter
       * @returns {undefined}
       */
      function sendTrendGetPlantList(trendId, callback, param) {
        var msgArray = {};
        msgArray.type = "trendGetPlantList";
        msgArray.trendId = trendId;
        send(msgArray, callback, param);
      }

      /**
       * Send "trend get plant list item" request to websocket server
       * @param {String} trendId - the registered id of trend session
       * @param {String} plc - name of plc to get
       * @param {Function} callback - callback function when receiving datachange
       * @param {Object} param - option parameter
       */
      function sendTrendGetItemList(trendId, plc, callback, param) {
        var msgArray = {};
        //msgArray.id = "";
        msgArray.type = "trendGetItemList";
        msgArray.trendId = trendId;
        msgArray.plc = plc;
        send(msgArray, callback, param);
      }

      /**
       * Send "trend get item value list" request to websocket server
       * @param {String} trendId - the registered id of trend session
       * @param {String} plc - name of plc
       * @param {String} tag - name of tag to get
       * @param {Number} startYear - start year of data
       * @param {Number} startMonth - start month of data
       * @param {Number} startDay - start day of data
       * @param {Number} startHour - start hour of data
       * @param {Number} startMinute - start minute of data
       * @param {Number} startSecond - start second of data
       * @param {Number} endYear - end year of data
       * @param {Number} endMonth - end month of data
       * @param {Number} endDay - end day of data
       * @param {Number} endHour - end hour of data
       * @param {Number} endMinute - end minute of data
       * @param {Number} endSecond - end second of data
       * @param {Number} callback - callback function when receiving datachange
       * @param {Object} param - option parameter
       */
      function sendTrendGetItemValueList(
        trendId,
        plc,
        tag,
        startYear,
        startMonth,
        startDay,
        startHour,
        startMinute,
        startSecond,
        endYear,
        endMonth,
        endDay,
        endHour,
        endMinute,
        endSecond,
        callback,
        param
      ) {
        var msgArray = {};
        //msgArray.id = "";
        msgArray.type = "trendGetItemValueList";
        msgArray.trendId = trendId;
        msgArray.plc = plc;
        msgArray.tag = tag;
        msgArray.startYear = startYear;
        msgArray.startMonth = startMonth;
        msgArray.startDay = startDay;
        msgArray.startHour = startHour;
        msgArray.startMinute = startMinute;
        msgArray.startSecond = startSecond;
        msgArray.endYear = endYear;
        msgArray.endMonth = endMonth;
        msgArray.endDay = endDay;
        msgArray.endHour = endHour;
        msgArray.endMinute = endMinute;
        msgArray.endSecond = endSecond;
        send(msgArray, callback, param);
      }

      /**
       * Send advise text to the server
       * @private
       * @param {String} textID is text ID to get
       * @param {String} subID is text sub ID
       * @param {function} callback is fired when new datachange comes
       * @param {type} param extra data want to passed to the callback function
       */
      function _sendAdviseText(textID, subID, callback, param) {
        var msgArray = {};
        msgArray.id = "";
        msgArray.type = "adviseText";
        msgArray.textID = textID;
        msgArray.subID = subID;
        send(msgArray, callback, param);
      }

      /**
       * Send advise text to the server
       * @param {String} textID is text ID to get
       * @param {String} subID is text sub ID
       * @param {function} callback is fired when new datachange comes
       * @param {type} param extra data want to passed to the callback function
       */
      function sendAdviseTextDirect(textID, subID, callback, param) {
        //Check if there's posibility of dynamic text (DT)
        if (param && param.plc && param.characterOfOPCLeaf) {
          var text = textID;

          /*
           * To force a dynamical text tag getting a definated character:
           * If there is a dynamical tag programmed, e.g. "E7234", the system will call the
           * IOManager via CommLib for the Value of the tag. This value (e.g. 2345) and
           * the character of the leaf, e.g. "SB.S1251_Auto", will be the TextID called form
           * the LanguageManager via CommLib, e.g. "S2345". If you like to force to take
           * a different character, you have to use "&V_" in front of the dynamical text
           * ID, e.g. "&V_E7234" ... Value="2345" ... new Text ID is: "V2345".
           *
           * e.g. T03_&V_.A123.B345.E7311_ILMText1
           *
           * Regular expression:
           * /^(T0[1,3,5]_)(&(.)_)?((\.)?.*\.)?([E,G])(7\d{3,})(_.*)?$/
           *   |           | |     ||          |      |        â
           *   |           | |     ||          |      |        8. dynamicTextSuffix   = '_ILMText1'       (optional)
           *   |           | |     ||          |      â
           *   |           | |     ||          |  7. dynamicText                      = '7311'
           *   |           | |     ||          â
           *   |           | |     ||          6. characterToBeReplaced               = 'E'
           *   |           | |     |â
           *   |           | |     |5. firstCharacterOfSubPath                        = '.'               (optional)
           *   |           | |     â
           *   |           | |     4. subPath                                         = '.A123.B345.'     (optional)
           *   |           | â
           *   |           | 3. characterToReplace                                    = 'V'
           *   |           â
           *   |           2. replaceIdentifier                                       = '&V_'             (optional)
           *   â
           *   1. T0_ID                                                               = 'T03_'
           *
           */
          text.replace(
            /^(T0[1,3,5]_)(&(.)_)?((\.)?.*\.)?([E,G])(7\d{3,})(_.*)?$/,
            function (
              m,
              T0_ID,
              replaceIdentifier,
              characterToReplace,
              subPath,
              firstCharacterOfSubPath,
              characterToBeReplaced,
              dynamicText,
              dynamicTextSuffix
            ) {
              if (subPath) {
                if (!firstCharacterOfSubPath) subPath += "."; //e.g.: '.A123.B345.'
              } else {
                subPath = ".GP."; //e.g.: '.GP.'
              }
              var plctag =
                param.plc +
                subPath +
                characterToBeReplaced +
                dynamicText +
                dynamicTextSuffix; //e.g.: 'PLC123.A123.B345.E7311_ILMText1'
              emosWS.advise(
                plctag,
                function (msg) {
                  //e.g. T03_V1234
                  var identifier = replaceIdentifier
                      ? characterToReplace
                      : param.characterOfOPCLeaf,
                    newTextID = T0_ID + identifier + msg.value;
                  if (["A", "B", "F", "W"].indexOf(identifier) > -1)
                    subID = "message";
                  _sendAdviseText(newTextID, subID, callback, param);
                },
                "",
                emosWS.tagType.IO
              );
              return;
            }
          );
        }
        _sendAdviseText(textID, subID, callback, param);
      }

      function sendAdviseTextCache(textID, subID, callback, param) {
        emosWS.advise(textID + "." + subID, callback, param, tagType.Text);
      }

      /**
       * Send IO unadvise message to the server
       * @param {type} plc is PLC name
       * @param {type} tag is tag name
       * @param {type} param is information to find the mapped listener to remove
       */
      function sendUnadvise(plc, tag, param) {
        var msgArray = {};
        var id = 0;
        if (typeof param !== "undefined") {
          id = parameterMap[param];
          removeDatachangeListener(id);
        }

        msgArray.type = "unadvise";
        msgArray.id = id;
        msgArray.plc = plc;
        msgArray.tag = tag;
        send(msgArray);
      }

      /**
       * Send unadvise request to server
       * @param {Number} id - id of the listener
       */
      function unadviseById(id) {
        if (typeof id !== "undefined") {
          var msgArray = {};
          removeDatachangeListener(id);
          msgArray.type = "unadvise";
          msgArray.id = id;
          msgArray.plc = "";
          msgArray.tag = "";
          send(msgArray);
        }
      }

      /**
       * Send poke message to the server
       * @param {type} id is id of caller
       * @param {String} plc is PLC name
       * @param {String} tag is tag name
       * @param {String} idValue is id of HTML element to get the value to send
       */
      function sendPokeByIdValue(id, plc, tag, idValue) {
        try {
          var value = document.getElementById(idValue).value;
          sendPoke(id, plc, tag, value);
        } catch (err) {
          console.error("sendPokeByIdValue failed: " + err);
        }
      }

      /**
       * Send poke message to the server
       * @param {type} id is id of caller
       * @param {String} plc is PLC name
       * @param {String} tag is tag name
       * @param {type} value to send
       */
      function sendPoke(id, plc, tag, value) {
        if (attr.allowPoke) {
          var msgArray = {};
          msgArray.type = "poke";
          msgArray.id = id;
          msgArray.plc = plc;
          msgArray.tag = tag;
          msgArray.value = value;
          send(msgArray);
        }
      }

      /**
       * Send "Login" request to server
       * @param {type} username - username to login
       * @param {type} password - password
       * @param {type} callback - callback function fired when datachange comes
       * @param {type} param - optional parameter
       */
      function sendLogin(username, password, callback, param) {
        var msgArray = {};
        msgArray.id = "";
        msgArray.type = "login";
        msgArray.username = username;
        msgArray.password = password;
        send(msgArray, callback, param);
      }

      /**
       * Send "Login By Key" request to server
       * @param {type} key - key to login
       * @param {type} callback - callback function fired when datachange comes
       * @param {type} param - optional parameter
       * @param {type} keytype - type of key
       */
      function sendLoginByKey(key, callback, param, keytype) {
        var msgArray = {};
        msgArray.id = "";
        msgArray.type = "loginByKey";
        msgArray.key = key;
        msgArray.keytype = keytype || "ticket";
        send(msgArray, callback, param);
      }

      /**
       * Send "Log Off" request to server
       * @param {type} callback - callback function fired when datachange comes
       * @param {type} param - optional parameter
       * @returns {undefined}
       */
      function sendLogoff(callback, param) {
        var msgArray = {};
        msgArray.id = "";
        msgArray.type = "logoff";
        send(msgArray, callback, param);
      }

      /**
       * Send "get diagnosis window" request to server
       * @param {String} lib - library id, either of "1", "3", "5"
       * @param {String} wintype - type of window, either of "Name", "Code"
       * @param {String} name - name of window, e.g.: "FU270.01"
       * @param {Function} callback - callback function fired when datachange comes
       * @param {type} param - optional parameter
       */
      function sendGetDiagnosisWindow(lib, wintype, name, callback, param) {
        var msgArray = {
          id: "",
          type: "getDiagnosisWindow",
          lib: lib,
          wintype: wintype,
          name: name,
        };
        send(msgArray, callback, param);
      }

      /**
       * @typedef {Object} PlcTagPair
       * @property {String} plc - plc name
       * @property {String} tag - tag name
       */
      /**
       * Convert IO tag String to an object stores PLC and Tag <br>
       * Example: "TestTopic.MyBoolean.abc" -> {plc : "TestTopic", tag : ".Boolean.abc"}
       * @param {String} tag is full IO tag name
       * @returns {PlcTagPair}
       */
      function getPLCTag(tag) {
        try {
          if (tag) {
            var result = new Object();
            result.plc = "";
            result.tag = "";
            var n = tag.indexOf(".");
            //var n = tag.lastIndexOf(".");
            if (n > 0) {
              result.plc = tag.substring(0, n);
              result.tag = tag.substring(n, tag.length);
            } else {
              result.plc = tag;
              result.tag = "";
            }
            return result;
          }
          return null;
        } catch (e) {
          console.error("getPLCTag failed: " + e);
        }
      }

      /**
       * Convert IO tag String to an object stores PLC and Tag <br>
       * Example: "TestTopic.MyBoolean.abc" -> {plc : "TestTopic.MyBoolean", tag : ".abc"}
       * @param {String} tag is full IO tag name
       * @returns {PlcTagPair}
       */
      function getPLCTagLast(tag) {
        try {
          if (tag) {
            var result = new Object();
            result.plc = "";
            result.tag = "";
            //var n = tag.indexOf(".");
            var n = tag.lastIndexOf(".");
            if (n > 0) {
              result.plc = tag.substring(0, n);
              result.tag = tag.substring(n, tag.length);
            } else {
              result.plc = tag;
              result.tag = "";
            }
            return result;
          }
          return null;
        } catch (e) {
          console.error("getPLCTagLast() failed: " + e);
        }
      }

      /**
       * Set a value to a PLC tag
       * @param {String} tag is IO tag name
       * @param {String} value to set
       *
       * @example <caption>Set PLC tag <b>TestTopic.MyBoolean</b> to <b>true</b>:</caption>
       * emosWS.poke("TestTopic.MyBoolean", "true");
       */
      function poke(tag, value) {
        try {
          console.log("poke", tag, value);
          if (typeof tag === "string" && value !== null && tag !== null) {
            var pokeIsSent = false,
              doPoke = function () {
                if (!pokeIsSent) {
                  var plctag = getPLCTag(tag);
                  sendPoke("0", plctag.plc, plctag.tag, String(value));
                  pokeIsSent = true;
                }
              };

            if (tag.indexOf(".Alarm") > -1) {
              //poke right now when tag is Alarm Group
              doPoke();
            } else {
              //here tag is IO. Then check if tag IO is already advised, if not, do advise, then in the callback call the poke only 1 time.
              var tagId = getTagId(tag, tagType.IO),
                subscriberGroup = tagDestination[tagId];
              if (typeof subscriberGroup === "undefined") {
                advise(tag, doPoke, "", tagType.IO);
              } else {
                doPoke();
              }
            }
          }
        } catch (e) {
          console.error("poke() failed: " + e);
        }
      }

      function pokeExt(tag, value) {
        try {
          var subscriberGroup = getSubscriberGroup(tag, tagType.IOObjectPLC);
          if (typeof subscriberGroup !== "undefined") {
            subscriberGroup.setValue(value);
          }
        } catch (e) {
          console.error("[pokeExt()] failed: " + e);
        }
      }

      function getSubscriberGroup(tag, tagType) {
        return tagDestination[getTagId(tag, tagType)];
      }

      /* Send set language message to server when user changes the language
       *
       * @param {integer} languageID is id of language to change
       *
       */
      function sendSetLanguage(languageID) {
        var msgArray = {};
        msgArray.type = "setLanguage";
        msgArray.languageID = languageID;
        send(msgArray);
      }

      /* Send poke message to change value of an IO tag value in given interval
       *
       * @param {type} id is id of this autopoke
       * @param {String} plc is PLC name
       * @param {String} tag is tag name
       *
       */
      function autoPoke(id, plc, tag, duration) {
        try {
          var value = 0;
          var defaultDuration = 500;
          if (typeof duration === "undefined") {
            duration = defaultDuration;
          }

          var autoPoke = setInterval(function () {
            if (wsocketIsOpen) {
              value++;
              sendPoke(0, plc, tag, value);
            } else {
              clearInterval(this);
            }
          }, duration);
          autoPokeMap[id] = autoPoke;
        } catch (err) {
          console.error("autoPoke() failed: " + err);
          stopAutoPoke(id);
        }
      }

      /**
       * Stop an autopoke
       * @param {type} id is id of the autopoke to stop         *
       */
      function stopAutoPoke(id) {
        try {
          clearInterval(autoPokeMap[id]);
          //delete map[id];
        } catch (err) {
          console.error("stopAutoPoke failed: " + err);
        }
      }

      /**
       * Send message to the server to stop its mainthread
       */
      function stopMainThread() {
        if (
          confirm(
            "Be careful! This action will terminate the server service. Do you really want to do this?"
          )
        ) {
          var infoMsg = {};
          infoMsg.type = "info";
          infoMsg.info = "stopMainThread";
          send(infoMsg);
        }
      }

      /**
       * Send message to the server to reload the CommLib
       */
      function reloadCommLib() {
        if (
          confirm("Do you really want to reload the CommLib.dll at server?")
        ) {
          var infoMsg = {};
          infoMsg.type = "info";
          infoMsg.info = "reloadCommLib";
          send(infoMsg);
        }
      }

      /**
       * Handle onclose event of the WebSocket connection
       * @private
       * @param {type} evt is event object
       */
      function onClose(evt) {
        /*if (!wsocketIsOpen && (location.protocol === "https:")) {
                             window.open(getAuthenticateURL(), "_self");
                             } else {*/
        wsocketIsOpen = false;
        console.log("The connection is disconnected!");
        emosEvent.dispatchEvent({ type: "close", message: evt });
        try {
          reconnect();
        } catch (err) {
          console.error("onClose() failed: " + err);
        }
      }

      /**
       * Handle onerror event of the WebSocket connection
       * @private
       * @param {type} evt is event object
       * @param {type} handleError is the error
       */
      function onError(evt, handleError) {
        console.log(
          "The connection gets error: " +
            evt.data +
            " readyState = " +
            wsocket.readyState
        );
        emosEvent.dispatchEvent({ type: "error", message: evt });
      }

      /**
       * Try to reconnect to the server after the connection is unexpectly closed
       * reconnect
       * @private
       */
      function reconnect() {
        try {
          wsocketReconnect = true;
          if (typeof serverPool === "undefined") {
            connect();
          } else {
            connect({ host: getNextServer() });
          }
        } catch (err) {
          console.error("reconnect() failed: " + err);
        }
      }

      /**
       * Get name of the next server from a redundancy servers pool
       * @private
       * @returns {String} URI of next server
       */
      function getNextServer() {
        try {
          if (typeof serverPool !== "undefined") {
            if (hostnameIndex > serverPool.length - 1) {
              hostnameIndex = 0;
            } else {
              hostnameIndex++;
            }
            return serverPool[hostnameIndex];
          }
        } catch (err) {
          console.error("getNextServer() failed: " + err);
        }
      }

      /**
       * Get URI of a server
       * @param {String} hostname is the hostname of server
       * @returns {String} URI string of the server
       */
      function getEndPointURI(hostname) {
        var endPointURI;
        var wsProtocol = location.protocol === "https:" ? "wss://" : "ws://";
        var wsPort =
          document.location.port === "" ? "" : ":" + document.location.port;
        var iEndpointName =
          typeof endpointName === "undefined" ? "/emosweb" : "/" + endpointName;
        if (typeof hostname === "undefined") {
          hostname = document.location.hostname;
          endPointURI =
            wsProtocol +
            (document.location.hostname === ""
              ? "localhost"
              : document.location.hostname) +
            wsPort +
            iEndpointName;
        } else {
          var host1 = hostname,
            host2 = "",
            i = hostname.indexOf("/");
          if (i > 0) {
            host1 = hostname.substring(0, i);
            host2 = hostname.substring(i);
          }
          var sPort = wsProtocol === "ws://" ? serverPort : serverHttpsPort;
          if (typeof sPort !== "undefined") {
            wsPort = ":" + serverPort;
          }
          //endPointURI = wsProtocol + hostname + wsPort + iEndpointName;
          endPointURI = wsProtocol + host1 + wsPort + host2 + iEndpointName;
        }
        wssPort = wsPort;
        return endPointURI;
      }

      /**
       * Get authentication URL
       * @deprecated
       */
      function getAuthenticateURL() {
        var urlString =
          "https://" +
          document.location.hostname +
          wssPort +
          "/authentication.htm?url=" +
          encodeURIComponent(document.location.href) +
          "&id=" +
          Math.floor(Math.random() * 1000000000 + 1);
        //console.log("getAuthenticateURL = " + urlString);
        return urlString;
      }

      /**
       * Close current WebSocket connection
       */
      function closeWebSocket() {
        if (wsocketIsOpen) {
          wsocket.close();
          wsocketIsOpen = false;
        }
      }

      /**
       * Send heartbeat message to the server
       */
      function sendAliveMessage() {
        try {
          setInterval(function () {
            if (wsocketIsOpen) {
              var infoMsg = {};
              infoMsg.type = "info";
              infoMsg.info = "alive";
              send(infoMsg);
            } else {
              clearInterval(this);
            }
          }, sendAliveInterval);
        } catch (err) {
          console.error("sendAliveMessage() failed: " + err);
        }
      }

      /**
       * Check the quality of websocket connection; if bad, close it.
       */
      function checkConnection() {
        try {
          setTimeout(function () {
            if (connectionBad) {
              wsocket.close();
            }
          }, connectionTimeout);
        } catch (err) {
          console.error("checkConnection() failed: " + err);
        }
      }

      /**
       * Register a listener to language change event
       * @param {Function} f - callback function fired when language changed
       */
      function addLanguageChangeListener(f) {
        if (typeof f === "function") {
          emosEvent.addEventListener("language", f);
        }
      }

      /**
       * Loading external CSS files
       * @param {String[]} hrefs - Array of URLs from CSS files
       * @param {Function} callback - callback function fired when the files are loaded
       */
      function getCSS(hrefs, callback) {
        try {
          var i = 0,
            len = hrefs.length;
          var checkAndCallback = function () {
            if (i === len) callback();
          };
          hrefs.forEach(function (href) {
            if (typeof loadedCSS[href] === "undefined") {
              $.when($.get(href)).done(function (data) {
                $("head").append("<style>" + data + "</style>");
                i++;
                checkAndCallback();
              });
            } else {
              len--;
            }
          });
          checkAndCallback();
        } catch (err) {
          console.error("getCSS() failed: " + err);
        }
      }

      /**
       * Loading external JavaScript files
       * @param {String[]} hrefs - Array of URLs from JavaScript files
       * @param {Function} callback - callback function fired when the files are loaded
       */
      function getJS(hrefs, callback) {
        try {
          var i = 0,
            len = hrefs.length;
          $.ajaxSetup({
            cache: true,
          });
          var checkAndCallback = function () {
            if (i === len) callback();
          };
          hrefs.forEach(function (href) {
            if (typeof loadedJS[href] === "undefined") {
              $.getScript(href, function (data, textStatus, jqxhr) {
                i++;
                checkAndCallback();
              });
            } else {
              len--;
            }
          });
          checkAndCallback();
        } catch (err) {
          console.error("getJS() failed: " + err);
        }
      }

      /**
       * Loading external library resources to the current site
       * @param {Object} list - required library resource to loading
       * @param {String[]} list.js - array of URLs of JavaScript files
       * @param {String[]} list.css - array of URLs of CSS files
       * @param {String[]} callback - a callback function fired when all required resources are loaded
       */
      function require(list, callback) {
        try {
          var jsList = list["js"],
            cssList = list["css"],
            cssLoaded = true,
            jsLoaded = true;
          var checkAndCallback = function () {
            if (cssLoaded && jsLoaded) callback();
          };
          if (typeof jsList !== "undefined") {
            jsLoaded = false;
            getJS(jsList, function () {
              jsLoaded = true;
              checkAndCallback();
            });
          }
          if (typeof cssList !== "undefined") {
            cssLoaded = false;
            getCSS(cssList, function () {
              cssLoaded = true;
              checkAndCallback();
            });
          }
        } catch (err) {
          console.error("getJS() failed: " + err);
        }
      }

      /**
       * Send user agent to server
       */
      function sendUserAgent() {
        try {
          var generalMsg = {};
          generalMsg.type = "general";
          generalMsg.key = "UserAgent";
          generalMsg.value = navigator.userAgent;
          send(generalMsg);
        } catch (err) {
          console.error("sendUserAgent() failed: " + err);
        }
      }

      /**
       * Get global stack
       * @param {Number} size - length of global stack to get
       * @returns {Object[]} global stack
       */
      function getGlobalStack(size) {
        if (size) {
          stack = globalStack.slice(-size);
        } else {
          stack = globalStack;
        }

        globalStack = [];
        return stack;
      }

      /**
       * Push a value to a global stack
       * @param {Object} value - value to push
       */
      function pushGlobalStack(value) {
        if (globalStack.length === 100) {
          globalStack = [];
        }
        globalStack.push(value);
      }

      /**
       * Get status of WebSocket connection
       * @returns {Number} status of WebSocket connection
       */
      function getWebSocketStatus() {
        return wsocketIsOpen;
      }

      /**
       * Start listening for "global variable changes"
       */
      function listenGlobalVariablesChange() {
        //console.info("listenGlobalVariablesChange: set animationData.stillInit = false");
        animationData.globalVariablesSetCallBackAble = true;
        animationData.stillInit = false;
        animationData.callback = null;
      }

      /**
       * Add listener for "global variable changes" event
       * @param {Function} f - callback function
       */
      function addGlobalVariablesChange(f) {
        callbacks.push(f);
      }

      /**
       * Execute callback function of listeners wjem global variable changed
       */
      function callbackGlobalVariablesChange() {
        animationData.globalVariablesSetCallBackAble = false;
        while (callbacks.length > 0) {
          try {
            callbacks.shift()();
          } catch (e) {}
        }
        callbacks.length = 0;
      }

      /**
       * Add animation to a shape
       * @animation {String} Animation to add
       * @shapeid {String} id of the shape      *
       * @returns {Shape} The shape object
       */
      function addAnimation(animation, shapeid) {
        var shape = null,
          index = null;
        if (shapeid && animation) {
          var shape = shapes[shapeid];
          if (!shape) {
            shape = new Shape(shapeid);
            shapes[shapeid] = shape;
          }
          index = shape.add(animation);
        }
        return { shape: shape, index: index };
      }

      /**
       * Get list of link in HMI site
       * @returns {String[]}
       */
      function getLinkList() {
        var list = [],
          linkMap = {};

        //eliminate duplicate alinks by using hash array ([] -> {})
        links.forEach(function (link) {
          linkMap[link.page] = null;
        });

        Object.keys(linkMap).forEach(function (url) {
          list.push(url);
        });
        return list;
      }

      /**
       * Set site properties
       * @param {Object} properties - properties to write
       */
      function setSiteProperties(properties) {
        try {
          if (properties) {
            Object.keys(attr.site).forEach(function (key) {
              if (typeof properties[key] === "undefined")
                properties[key] = attr.site[key];
            });
            attr.site = properties;
            setTimeout(function () {
              attr.siteSet = true;
              sendSitePropertiesToFramework(true);
            }, 1);
          }
        } catch (e) {
          console.error("setSiteProperties() failed: " + e);
        }
      }

      /**
       * Create/modify a text file in current or remote server. The user may have HMI admin right ("sys_sr", 11) to do this.
       *
       * @param {String} path - path to write.
       * @param {String} stringData - value of string data to write
       * @param {Object} [config] - callback config
       * @param {Function} [config.success] - the callback function fired when writing successful
       * @param {Function} [config.error] - the callback function fired when writing failed
       * @param {Function} [config.server] - the server to write
       *
       * @example <caption>1. Write the text content (as JSON string) of an object  to the json file "/test/person1.json" at the current server</caption>
       * var person1Object = {
       *      "name": "Peter" ,
       *      "age": 30,
       *      "company": "DÃ¼rr Systems AG"
       * };
       * emosWS.writeData("/test/person1.json", JSON.stringify(person1Object), {
       *      success: function(){
       *          console.log("Succesful!");
       *      },
       *      error: function(msg){
       *          console.log("Failed: " + msg);
       *      }
       * });
       *
       * @example <caption><br>2. Write a text content to the js file "/test/config1.js" at the remote server "hmi.durr.com/emostestrd4"</caption>
       * var text1 = "Here is example text";
       * emosWS.writeData("/test/config1.js", text1, {
       *      success: function(){
       *          console.log("Succesful!");
       *      },
       *      error: function(msg){
       *          console.log("Failed: " + msg);
       *      },
       *      server: "hmi.durr.com/emostestrd4"
       * });
       */
      function writeData(path, stringData, config) {
        if (config) {
          config.text = stringData;
          config.path = path;
          emosWS.rest.framework.createTextFile(config);
        } else {
          var generalMsg = {};
          generalMsg.type = "general";
          generalMsg.key = "WriteFrameworkConfiguration";
          generalMsg.value = JSON.stringify({
            path: path,
            configuration: stringData,
          });
          send(generalMsg);
        }
      }

      /**
       * Get simulation list of alarms
       * @returns {Object[]} simulation alarm list
       */
      function getAlarmList() {
        return [
          { alg: "$System", text: "$System_Text" },
          { alg: "110_02F", text: "110_02F_Text" },
          { alg: "110_02V", text: "110_02V_Text" },
          { alg: "115_06V", text: "115_06V_Text" },
          { alg: "120_03V", text: "120_03V_Text" },
          { alg: "140_05V", text: "140_05V_Text" },
          { alg: "150_06V", text: "150_06V_Text" },
          { alg: "198_01V", text: "198_01V_Text" },
          { alg: "198_02V", text: "198_02V_Text" },
          { alg: "198_03V", text: "198_03V_Text" },
          { alg: "210_01V", text: "210_01V_Text" },
          { alg: "CT_CC01_319101", text: "CT_CC01_319101_Text" },
          { alg: "CT_CC02_319102", text: "CT_CC02_319102_Text" },
          { alg: "CT_CC03_319103", text: "CT_CC03_319103_Text" },
          { alg: "CT_CC04_319104", text: "CT_CC04_319104_Text" },
          { alg: "CT_CC05_319105", text: "CT_CC05_319105_Text" },
          { alg: "CT_DEMO_319101", text: "CT_DEMO_319101_Text" },
          { alg: "CT_PSP", text: "CT_PSP_Text" },
          { alg: "PT_ECO_312241", text: "PT_ECO_312241_Text" },
          { alg: "PT_ECP_312221", text: "PT_ECP_312221_Text" },
          { alg: "PT_ECR_312226", text: "PT_ECR_312226_Text" },
          { alg: "PT_PTP_312213", text: "PT_PTP_312213_Text" },
          { alg: "PT_WWP_310212", text: "PT_WWP_310212_Text" },
          { alg: "PT_DEMO_3316231", text: "PT_DEMO_3316231_Text" },
          { alg: "Benchmark_PLC1", text: "Benchmark_PLC1_Text" },
          { alg: "Benchmark_PLC2", text: "Benchmark_PLC2_Text" },
          { alg: "Benchmark_PLC3", text: "Benchmark_PLC3_Text" },
          { alg: "Benchmark_PLC4", text: "Benchmark_PLC4_Text" },
          { alg: "L1GHB1", text: "L1GHB1_Text" },
          { alg: "L1VFU1", text: "L1VFU1_Text" },
          { alg: "L1VHK1", text: "L1VHK1_Text" },
          { alg: "L1VKT1", text: "L1VKT1_Text" },
          { alg: "L1VTD1", text: "L1VTD1_Text" },
          { alg: "L1VTF1", text: "L1VTF1_Text" },
          { alg: "L1VTK1", text: "L1VTK1_Text" },
          { alg: "L1VVB1", text: "L1VVB1_Text" },
          { alg: "PT_DS1_316233", text: "PT_DS1_316233_Text" },
        ];
      }

      /**
       * Listen for an user idle event
       * @param {Number} idleDuration - duration of user idle (in ms) before the idle event fired
       * @param {Function} handlers - callback function when idle event fired
       * @returns {UserIdle} refers to UserIdle object
       */
      function setUserIdle(idleDuration, handlers) {
        return new UserIdle(emosEvent, idleDuration, handlers);
      }

      /**
       * Get hostname of active web server
       * @returns {String} hostname
       */
      function getActiveServerName() {
        return configuration.host;
      }

      /**
       * Get status of all web servers. It will send REST requests to all servers to check the status. The reponse may take a long time (~10 second) when there's a server unreachable.
       * @param {Function} callback - the function fired when the server status is ready
       *
       * @example <caption>Get status of all web socket servers defined in server pool</caption>
       * emosWS.getServersStatus(function(status){
       *      console.log(status)
       * });
       */
      function getServersStatus(callback) {
        var status = [];
        servers.forEach(function (server) {
          server.getStatus(function (serverInfo) {
            status.push(serverInfo);
            if (status.length === servers.length) {
              callback(status);
            }
          });
        });
      }

      /**
       * Get array of websocket servers
       * @returns {Server[]} array of websocket servers
       */
      function getServers() {
        return servers;
      }

      /**
       * Check if the current user has HMI admin right: "sys_sr" / 11
       * @since 1.0.7.8
       * @returns {boolean} if user has admin right
       */
      function isAdmin() {
        return CheckUserRight("sys_sr", 11);
      }

      /**
       * Check if the current user has WebSocket Server admin right: "sys_sr" / 4
       * @since 1.1.3-8
       * @returns {boolean} if user has admin right
       */
      function isServerAdmin() {
        return CheckUserRight("sys_sr", 4);
      }

      /**
       * Generate a random GUID
       * @returns {String} a random GUID, e.g: "f16086a5-6691-d496-a35a-77d414d0c68f"
       */
      function guid() {
        function s4() {
          return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
        }
        return (
          s4() +
          s4() +
          "-" +
          s4() +
          "-" +
          s4() +
          "-" +
          s4() +
          "-" +
          s4() +
          s4() +
          s4()
        );
      }

      /*
       * Define all public variables and public functions of emosWS
       */
      return {
        version: version,
        Subscriber: Subscriber,
        GlobalVariable: GlobalVariable,
        ServerStorage: ServerStorage,
        InOut: varInOut,
        languageID: languageID,
        unitID: unitID,
        tagType: tagType,
        animationData: animationData,
        globalID: globalID,
        globalStack: globalStack,
        blinkInterval: blinkInterval,
        login: login,
        Cas: emosCas,
        tagDestination: tagDestination,
        badQualityTags: badQualityTags,
        shapes: shapes,
        callbacks: callbacks,
        attr: attr,
        clickData: clickData,
        idb: idb,
        debug: debug,
        gvNumber: 0,
        glcNumber: 0,
        textNumber: 0,
        animationNumber: 0,
        linkNumber: 0,
        topicNumber: 0,
        shapeNumber: 0,
        links: links,
        globalVariables: globalVariables,
        rest: rest,
        serverStorage: serverStorage,
        userIdleActionLogout: userIdleActionLogout,
        userIdleActionReload: userIdleActionReload,
        servers: servers,
        //public functions
        /** connect */
        connect: connect,
        advise: advise,
        unadvise: unadvise,
        unadviseById: unadviseById,
        poke: poke,
        pokeExt: pokeExt,
        getPLCTag: getPLCTag,
        getPLCTagLast: getPLCTagLast,
        getTagValue: getTagValue,
        getTagQualityAsBoolean: getTagQualityAsBoolean,
        getTagData: getTagData,
        getTagObject: getTagObject,
        getTagProperty: getTagProperty,
        getText: getText,
        getAlarmGroupProperty: getAlarmGroupProperty,
        getTagId: getTagId,
        getSubscriberGroup: getSubscriberGroup,
        send: send,
        sendAdvise: sendAdvise,
        sendAdviseText: sendAdviseTextCache,
        sendAdviseTextCache: sendAdviseTextCache,
        sendAdviseTextDirect: sendAdviseTextDirect,
        sendAdviseAlarm: sendAdviseAlarm,
        sendAdviseAlarmText: sendAdviseAlarmText,
        sendAdviseProperty: sendAdviseProperty,
        sendUnadvise: sendUnadvise,
        sendPokeByIdValue: sendPokeByIdValue,
        sendPoke: sendPoke,
        sendSetLanguage: sendSetLanguage,
        sendTrendRegister: sendTrendRegister,
        sendTrendGetPlantList: sendTrendGetPlantList,
        sendTrendGetItemList: sendTrendGetItemList,
        sendTrendGetItemValueList: sendTrendGetItemValueList,
        sendLogin: sendLogin,
        sendLoginByKey: sendLoginByKey,
        sendLogoff: sendLogoff,
        sendGetDiagnosisWindow: sendGetDiagnosisWindow,
        autoPoke: autoPoke,
        stopAutoPoke: stopAutoPoke,
        stopMainThread: stopMainThread,
        reloadCommLib: reloadCommLib,
        getEndPointURI: getEndPointURI,
        closeWebSocket: closeWebSocket,
        getLanguage: getLanguage,
        getUnit: getUnit,
        setLanguage: setLanguage,
        setUnit: setUnit,
        hasQualityGood: hasQualityGood,
        addLanguageChangeListener: addLanguageChangeListener,
        getCSS: getCSS,
        getJS: getJS,
        require: require,
        getGlobalStack: getGlobalStack,
        pushGlobalStack: pushGlobalStack,
        propagateMessage: propagateMessage,
        addEventListener: emosEvent.addEventListener.bind(emosEvent),
        removeEventListener: emosEvent.removeEventListener.bind(emosEvent),
        dispatchEvent: emosEvent.dispatchEvent.bind(emosEvent),
        getWebSocketStatus: getWebSocketStatus,
        listenGlobalVariablesChange: listenGlobalVariablesChange,
        callbackGlobalVariablesChange: callbackGlobalVariablesChange,
        addGlobalVariablesChange: addGlobalVariablesChange,
        addAnimation: addAnimation,
        getWSHostname: getWSHostname,
        getHostname: getHostname,
        informParent: informParent,
        writeData: writeData,
        setSiteProperties: setSiteProperties,
        getAlarmList: getAlarmList,
        setUserIdle: setUserIdle,
        getActiveServerName: getActiveServerName,
        getServersStatus: getServersStatus,
        getServers: getServers,
        getServerStorageItem: getServerStorageItem,
        getServerStorage: getServerStorage,
        isAdmin: isAdmin,
        isServerAdmin: isServerAdmin,
        setDebugSymbolVisibility: setDebugSymbolVisibility,
        getDebugSymbolVisibility: getDebugSymbolVisibility,
        guid: guid,
        isMessageAlreadyPropagated: isMessageAlreadyPropagated,
        getClientInfo: getClientInfo,
      };
    })();
  window.emosWS = emosWS;
  emosWS.EventDispatcher = EventDispatcher;
  /* Is refered to generate an ID for a UI element
   *
   * @type Number
   */

  /**
   * Provide functions can be used in any VISU animation.
   *
   * @class
   * @alias fn
   * @memberof core
   */
  emosWS.fn = {
    getElementGlobalID: function () {
      return "EMOSUI" + emosWS.globalID++;
    },
    formatNumber: function (number) {
      return number < 10
        ? (100 + number).toString().slice(-2)
        : number.toString();
    },
    _openWindow: function (name, specs, replace) {
      privateCallback("window", name, specs, replace);
    },
    _modelessDialog: function (name, specs, arg) {
      privateCallback("modeless", name, specs, arg);
    },
    _modalDialog: function (name, specs, arg) {
      privateCallback("modal", name, specs, arg);
    },
    getSVGElement: function (target) {
      try {
        if (target === null) return;
        if (typeof mainsvg === "undefined") {
          return document.getElementById(target);
        } else {
          var svg = document.getElementById(mainsvg).getSVGDocument();
          return svg.getElementById(target);
        }
      } catch (err) {
        console.log("getSVGElement failed: " + err);
      }
    },
    setStyle: function (target, style) {
      try {
        if (target === null) return;
        if (typeof mainsvg === "undefined") {
          var object = document.getElementById(target);
          for (var i in style) {
            object.style[i] = style[i];
          }
        } else {
          var svg = document.getElementById(mainsvg).getSVGDocument();
          var svgObject = svg.getElementById(target);
          for (var i in style) {
            setStyleDeep(svgObject, i, style[i]);
          }
        }
      } catch (err) {
        console.log("setStyle failed: " + err);
      }
    },
    setStyleDeep: function (target, styleName, styleValue) {
      if (target === null) return;
      if (target.tagName === "g") {
        for (var i = 0, len = target.childNodes.length; i < len; i++) {
          setStyleDeep(target.childNodes[i], styleName, styleValue);
        }
      } else {
        if (typeof target.style !== "undefined") {
          //target.style[styleName] = styleValue;
          switch (styleName) {
            case "fill":
              var fill = target.getAttribute("fill");

              var matches = fill.match(/url\(#(.*)\)/);
              if (matches) {
                var element = document
                  .getElementById(mainsvg)
                  .getSVGDocument()
                  .getElementById(matches[1]);
                var stop = element.childNodes[1];
                stop.setAttribute("stop-color", styleValue);
              } else {
                target.style.fill = styleValue;
              }

              break;

            default:
              target.style[styleName] = styleValue;
          }
        }
      }
    },
    setFillColor: function (target, color) {
      try {
        if (typeof mainsvg === "undefined") {
          document.getElementById(target).style.backgroundColor = color;
        } else {
          var svg = document.getElementById(mainsvg).getSVGDocument();
          var svgObject = svg.getElementById(target);
          svgObject.style.fill = color;

          /*var radientObjectId = svgObject.style.fill.replace(/url\(#(.*)\)/, "$1");
                     if (radientObjectId) {
                     var radientObject = svg.getElementById(radientObjectId);
                     var stops = radientObject.getElementByTagName("stop");
                     if (stops.length > 0) {
                     var stop = stops[0];
                     stop.stopcolor = color;
                     }
                     } else {
                     svgObject.style.fill = color;
                     }*/
        }
      } catch (err) {
        console.log("setFillColor failed: " + err);
      }
    },
    setStrokeColor: function (target, color) {
      try {
        if (typeof mainsvg === "undefined") {
          document.getElementById(target).style.backgroundColor = color;
        } else {
          var svg = document.getElementById(mainsvg).getSVGDocument();
          var svgObject = svg.getElementById(target);
          svgObject.style.stroke = color;
        }
      } catch (err) {
        console.log("setFillColor failed: " + err);
      }
    },
    setSize: function (
      target,
      value,
      valueMin,
      valueMax,
      valueLimitMin,
      valueLimitMax,
      sizeFactorMin,
      sizeFactorMax,
      maxSize,
      x,
      y,
      orientation
    ) {
      try {
        if (typeof mainsvg !== "undefined") {
          var svg = document.getElementById(mainsvg).getSVGDocument();
          var svgObject = svg.getElementById(target);
          var range = valueMax - valueMin;
          if (value < valueMin) {
            value = valueMin;
          } else if (value > valueMax) {
            value = valueMax;
          }
          switch (orientation) {
            case "Top":
              var height = ((value - valueMin) / range) * maxSize;
              y += maxSize - height;
              svgObject.setAttribute("height", height);
              svgObject.setAttribute("y", y);
              break;
            case "Bottom":
              var height = ((value - valueMin) / range) * maxSize;
              svgObject.setAttribute("height", height);
              break;
            case "Right":
              var width = ((value - valueMin) / range) * maxSize;
              svgObject.setAttribute("width", width);
              break;
            case "Left":
              var width = ((value - valueMin) / range) * maxSize;
              x += maxSize - width;
              svgObject.setAttribute("width", width);
              svgObject.setAttribute("x", x);
              break;
          }
        }
      } catch (err) {
        console.log("setFillColor failed: " + err);
      }
    },
    setText: function (target, value) {
      try {
        if (typeof mainsvg !== "undefined") {
          var svg = document.getElementById(mainsvg).getSVGDocument();
          var svgObject = svg.getElementById(target);
          if (svgObject) {
            var tspans = svgObject.getElementsByTagName("tspan");
            if (tspans) {
              for (var i = 0, len = tspans.length; i < len; i++) {
                tspans[i].textContent = "";
              }
              tspans[0].textContent = value;
            } else {
              svgObject.textContent = value;
            }
          }
        }
      } catch (err) {
        console.log("setText failed: " + err);
      }
    },
    setVisibility: function (target, visible) {
      try {
        if (typeof mainsvg === "undefined") {
          document.getElementById(target).style.backgroundColor = color;
        } else {
          var svg = document.getElementById(mainsvg).getSVGDocument();
          var svgObject = svg.getElementById(target);
          svgObject.style.display = visible ? "block" : "none";
        }
      } catch (err) {
        console.log("setFillColor failed: " + err);
      }
    },
    setEvent: function (target, eventName, callback, cursor, svgTarget) {
      try {
        var capture = false;
        if (target === null) return;
        if (
          typeof mainsvg === "undefined" &&
          typeof svgTarget === "undefined"
        ) {
          document
            .getElementById(target)
            .addEventListener(eventName, callback, capture);
        } else {
          var svg = svgTarget
            ? document
            : document.getElementById(mainsvg).getSVGDocument();
          var svgObject = svg.getElementById(target);
          if (svgObject === null) return;
          svgObject.style.cursor = cursor;
          /*if (emosWS.attr.ready) {
                     svgObject.addEventListener(eventName, callback, capture);
                     } else {
                     emosWS.attr.eventQueue.unshift({o: svgObject, event: eventName, listener: callback, capture: capture});
                     }*/
          svgObject.addEventListener(eventName, callback, capture);
        }
      } catch (err) {
        console.log("setEvent failed: " + err);
      }
    },
    /*------------------------------------------------------------------------------
     *  EMOS.Web legacy APIs for the animations
     * -----------------------------------------------------------------------------*/

    /**
     * Return max of two double values
     *
     * @param {Number} a - first double value
     * @param {Number} b - second  double value
     * @returns {Number} - max of them
     */
    MaxDouble: function (a, b) {
      var ret;
      try {
        ret = Math.max(a, b);
      } catch (err) {
        ret = null;
      }

      return ret;
    },
    /**
     * Return min of two double values
     *
     * @param {Number} a - first double value
     * @param {Number} b - second  double value
     * @returns {Number} - min of them
     */
    MinDouble: function (a, b) {
      var ret;
      try {
        ret = Math.min(a, b);
      } catch (err) {
        ret = null;
      }
      return ret;
    },
    /**
     * Return max of two integer values
     *
     * @param {Number} a - first integer value
     * @param {Number} b - second  integer value
     * @returns {Number} - max of them
     */
    MaxInteger: function (a, b) {
      return MaxDouble(a, b);
    },
    /**
     * Return min of two integer values
     *
     * @param {Number} a - first integer value
     * @param {Number} b - second  integer value
     * @returns {Number} - min of them
     */
    MinInteger: function (a, b) {
      return MinDouble(a, b);
    },
    /**
     * This function returns the remainder obtained by dividing its operands. The modulo operation.
     *
     * @param {Number} a
     * @param {Number} b
     * @returns {Number} - Modulo of them
     */
    Modulo: function (a, b) {
      var ret;
      try {
        ret = a % b;
      } catch (err) {
        ret = null;
      }

      return ret;
    },
    modulo: function (a, b) {
      return Modulo(a, b);
    },
    /**
     * This function returns the absolute value of value.
     * @param {Number} value - value to get
     * @returns {Number} absolute value
     */
    AbsDouble: function (value) {
      var ret;
      try {
        ret = Math.abs(value);
      } catch (err) {
        ret = null;
      }
      return ret;
    },
    /**
     * This function returns the absolute value of value.
     * @param {Number} value - value to get
     * @returns {Number} absolute value
     */
    AbsInteger: function (value) {
      return AbsDouble(value);
    },
    /**
     * This function does the same like GetAsString(â¦), but the quality of the variable is not inherited. If the cast fails and the default is defined, the default value is returned. If the cast fails and the default is not defined, the result has quality bad
     * @param {type} value
     * @param {type} defaultValue
     * @returns {unresolved}
     */
    GetAsStringWithoutQuality: function (value, defaultValue) {
      return GetAsString(value, defaultValue);
    },
    /**
     * This function does the same like GetAsDouble(â¦), but the quality of the variable is not inherited. If the cast fails and the default is defined, the default value is returned. If the cast fails and the default is not defined, the result has quality bad.
     * @param {type} value
     * @param {type} defaultValue
     * @returns {unresolved}
     */
    GetAsDoubleWithoutQuality: function (value, defaultValue) {
      return GetAsDouble(value, defaultValue);
    },
    /**
     * This function does the same like GetAsInteger(â¦), but the quality of the variable is not inherited. If the cast fails and the default is defined, the default value is returned. If the cast fails and the default is not defined, the result has quality bad.
     * @param {type} value
     * @param {type} defaultValue
     * @returns {unresolved}
     */
    GetAsIntegerWithoutQuality: function (value, defaultValue) {
      return GetAsInteger(value, defaultValue);
    },
    /**
     * This function does the same like GetAsBoolean(â¦), but the quality of the variable is not inherited. If the cast fails and the default is defined, the default value is returned. If the cast fails and the default is not defined, the result has quality bad.
     * @param {type} value
     * @param {type} defaultValue
     * @returns {unresolved}
     */
    GetAsBooleanWithoutQuality: function (value, defaultValue) {
      return GetAsBoolean(value, defaultValue);
    },
    /**
     * Returns float in predefined precision or in formated string pattern
     *
     * @param {Number} number - number to format
     * @param {Number|String} formatString - When Number: Precision, when String: formated string pattern
     * @returns {Number}
     */
    GetDoubleAsFormattedString: function (number, formatString) {
      try {
        switch (typeof formatString) {
          case "number":
            //precision
            return parseFloat(number).toFixed(formatString);
            break;

          case "string":
            try {
              if (
                emosWS.attr.dataFormatter &&
                number !== undefined &&
                number !== null
              ) {
                var formatDigitString = formatString,
                  unitPartString,
                  result;

                //0.#### bar
                formatString.replace(
                  /^(\S*)( .*)?$/,
                  function (match, digitPart, unitPart) {
                    formatDigitString = digitPart;
                    unitPartString = unitPart;
                  }
                );
                result = emosWS.attr.dataFormatter.format(
                  number,
                  "Number",
                  formatDigitString
                ).value;
                if (unitPartString) result += unitPartString;

                return result;
              }
            } catch (e) {
              console.log(e);
            }
            return number;
            break;

          default:
            return number;
        }
      } catch (e) {
        console.error("[GetDoubleAsFormattedString] :", e);
      }
    },
    /**
     * Rounds the Number to the specified precision, or, if not specified, simply rounds. Mercantile Rounding is used.
     * @param {Number} number
     * @param {Number} precision
     * @returns {Number}
     */
    RoundDouble: function (number, precision) {
      var ret;
      try {
        ret = Math.round(number);
      } catch (err) {
        ret = null;
      }

      return ret;
    },
    /**
     * Rounds the Number to the specified precision, or, if not specified, simply rounds. Mercantile Rounding is used.
     * @param {Number} number
     * @param {Number} precision
     * @returns {Number}
     */
    RoundInteger: function (number, precision) {
      return RoundDouble(number);
    },
    /**
     * Returns the result of the search and replace procedure of a regular expression, executed on the InputString. The parameter Expression includes both, the search and the replace expression. They are separated by a â!â-sign.
     * @param {String} inputString
     * @param {String} expression
     * @returns {String}
     */
    GetRegularExpressionReplaced: function (inputString, expression) {
      try {
        inputString += "";
        if (inputString !== "null") {
          return expression.replace(/(.*)!(.*)/, function (match, re, rp) {
            //alert("re=" + re + " / rp=" + rp);
            return inputString.replace(new RegExp(re, "g"), rp);
          });
        }
        return null;
      } catch (e) {
        console.error("[GetRegularExpressionReplaced] :", e);
      }
    },
    /**
     * Checks InputString whether it matches the specified Regular Expression or not.
     * @param {String} inputString
     * @param {String} expression
     * @returns {Boolean}
     */
    GetRegularExpressionMatchTest: function (inputString, expression) {
      return new RegExp(expression, "g").test(inputString);
    },
    GetSubStringAsString: function (inputString, format) {
      return GetSubString(inputString, format);
    },
    getSubStringAsString: function (inputString, format) {
      return GetSubStringAsString(inputString, format);
    },
    GetSubString: function (inputString, format) {
      if (typeof inputString === "string") {
        var re = /\[(R?)(\d+)([-,])(\d*)\]/;
        return format.replace(re, function (match, r, x1, operator, x2) {
          if (!r) {
            if (operator === "-") {
              if (x2) {
                return inputString.substring(x1 - 1, x2);
              } else {
                return inputString.substring(x1 - 1);
              }
            } else {
              //operator === ","
              return inputString.substr(x1 - 1, x2);
            }
          } else {
            var l = inputString.length;
            if (operator === "-") {
              if (x2) {
                return inputString.substring(l - x2 + 1, l - x1 + 2);
              } else {
                return inputString.substring(0, l - x1);
              }
            } else {
              //operator === ","
              return inputString.substr(l - x1 + 2 - x2, l - x1 + 2);
            }
          }
        });
      }
      return null;
    },
    AdviseTag: function (plctag, tag) {
      emosWS.animationData.stillInit = true;
      emosWS.animationData.callback = null;
      emosWS.animationData.param = null;
      emosWS.getTagValue(plctag, tag);
      emosWS.animationData.stillInit = false;
    },
    GetTagQualityAsBoolean: function (plctag, tag) {
      return emosWS.getTagQualityAsBoolean(plctag, tag);
    },
    getTagQualityAsBoolean: function (TAG, Default) {
      return emosWS.getTagQualityAsBoolean(TAG, "", Default);
    },
    getTagQualityAsString: function (TAG, Default) {
      return GetAsString(getTagQualityAsBoolean(TAG, Default));
    },
    getTagLastSourceAsString: function (TAG, Default) {
      console.info("[API is not yet implemented] getTagLastSourceAsString");
    },
    getTagQualityAsNumber: function (TAG, Default) {
      return GetAsDouble(getTagQualityAsBoolean(TAG, Default), 0);
    },
    GetTagProperty: function (tag, property) {
      return emosWS.getTagProperty(tag, property);
    },
    GetTagPropertyAsBoolean: function (tag, property) {
      var v = GetTagProperty(tag, property);
      return GetAsBoolean(v);
    },
    GetTagPropertyAsInteger: function (tag, property) {
      var v = GetTagProperty(tag, property);
      return GetAsInteger(v);
    },
    GetTagPropertyAsDouble: function (tag, property) {
      var v = GetTagProperty(tag, property);
      return GetAsDouble(v);
    },
    GetTagPropertyAsString: function (tag, property) {
      var v = GetTagProperty(tag, property);
      return GetAsString(v);
    },
    SetTagValue: function (trigger, tag, value) {
      if (typeof value === "undefined") {
        //SetTagValue: function (tag, value)
        SetTagValue(true, trigger, tag);
      } else {
        if (trigger) {
          emosWS.poke(tag, value);
        }
      }
    },
    ForceTagValue: function (trigger, tag, value) {
      SetTagValue(trigger, tag, value);
    },
    SetBitInTagValue: function (tag, bitNr) {
      console.info("[API is not yet implemented] SetBitInTagValue");
    },
    ResetBitInTagValue: function (tag, bitNr) {
      console.info("[API is not yet implemented] ResetBitInTagValue");
    },
    ToggleBitInTagValue: function (tag, bitNr) {
      console.info("[API is not yet implemented] ToggleBitInTagValue");
    },
    ForceSetBitInTagValue: function (tag, bitNr) {
      SetBitInTagValue(tag, bitNr);
    },
    ForceResetBitInTagValue: function (tag, bitNr) {
      ResetBitInTagValue(tag, bitNr);
    },
    ForceToggleBitInTagValue: function (tag, bitNr) {
      ToggleBitInTagValue(tag, bitNr);
    },
    SetVariableAs: function (trigger, variable, value) {
      if (trigger) {
        if (variable instanceof varInOut) {
          variable.value = value;
        } else if (variable instanceof GlobalVariable) {
          variable.setDirectValue(value);
        }

        /*if (typeof variable !== "undefined") {
                 variable.value = value;
                 }*/
      }
    },
    SetVariableAsString: function (trigger, variable, value) {
      SetVariableAs(trigger, variable, value);
    },
    SetVariableAsDouble: function (trigger, variable, value) {
      SetVariableAs(trigger, variable, value);
    },
    SetVariableAsInteger: function (trigger, variable, value) {
      SetVariableAs(trigger, variable, value);
    },
    SetVariableAsBoolean: function (trigger, variable, value) {
      SetVariableAs(trigger, variable, value);
    },
    SetJSVar: function (JSVarName, enable, value) {
      if (enable && JSVarName) {
        window[JSVarName] = value;
      }
    },
    SetJavaScriptVariable: function (JSVarName, enable, value) {
      SetJSVar(JSVarName, enable, value);
    },
    SetJSVariableAsString: function (JSVarName, enable, value) {
      SetJSVar(JSVarName, enable, value);
    },
    SetJSVariableAsDouble: function (JSVarName, enable, value) {
      SetJSVar(JSVarName, enable, value);
    },
    SetJSVariableAsInteger: function (JSVarName, enable, value) {
      SetJSVar(JSVarName, enable, value);
    },
    SetJSVariableAsBoolean: function (JSVarName, enable, value) {
      SetJSVar(JSVarName, enable, value);
    },
    ForceJSVariableAsString: function (JSVarName, enable, value) {
      SetJSVar(JSVarName, enable, value);
    },
    ForceJSVariableAsDouble: function (JSVarName, enable, value) {
      SetJSVar(JSVarName, enable, value);
    },
    ForceJSVariableAsInteger: function (JSVarName, enable, value) {
      SetJSVar(JSVarName, enable, value);
    },
    ForceJSVariableAsBoolean: function (JSVarName, enable, value) {
      SetJSVar(JSVarName, enable, value);
    },
    GetText: function (textID, subText, defaultText) {
      return emosWS.getText(textID, subText, defaultText);
    },
    gettext: function (textID, subText) {
      return GetText(textID, subText);
    },
    GetAlarmGroupStateAsInteger: function (alarmGroup, subAlarmGroup) {
      console.info("[API is not yet implemented] GetAlarmGroupStateAsInteger");
    },
    GetAlarmGroupsStateAsInteger: function (alarmGroup, subAlarmGroup) {
      console.info("[API is not yet implemented] GetAlarmGroupsStateAsInteger");
    },
    GetAlarmGroupPropertyAsBoolean: function (alarmGroup, property) {
      return GetAsBoolean(emosWS.getAlarmGroupProperty(alarmGroup, property));
    },
    GetAlarmGroupPropertyAsInteger: function (alarmGroup, property) {
      return GetAsInteger(emosWS.getAlarmGroupProperty(alarmGroup, property));
    },
    GetAlarmGroupPropertyAsDouble: function (alarmGroup, property) {
      return GetAsDouble(emosWS.getAlarmGroupProperty(alarmGroup, property));
    },
    GetAlarmGroupPropertyAsString: function (alarmGroup, property) {
      return GetAsString(emosWS.getAlarmGroupProperty(alarmGroup, property));
    },
    /**
     * This function acknowledges the specified AlarmGroup. By that way, an AlarmGroup changes its state from ânew â to âacknowledgedâ. If the function is called with two strings, both strings are concatenated to the AlarmGroup first. The call version with the Trigger (three parameters) is useful when combining the acknowledgement with a certain event like a mouse click. This function has no return value.
     * @param {String} alarmGroup
     * @param {String} subAlarmGroup
     */
    AcknowledgeAlarmGroup: function (alarmGroup, subAlarmGroup) {
      console.info("[API is not yet implemented] AcknowledgeAlarmGroup");
    },
    /**
     * This function acknowledges all the specified AlarmGroups. By that way, all AlarmGroups change their states from ânew â to âacknowledgedâ. If the function is called with two strings, both strings are concatenated to the AlarmGroups first. The call version with the Trigger (three parameters) is useful when combining the acknowledgement with a certain event like a mouse click. This function has no return value. The parameter AlarmGroups is a comma separated string.
     * @param {String} alarmGroup
     * @param {String} subAlarmGroup
     */
    AcknowledgeAlarmGroups: function (alarmGroup, subAlarmGroup) {
      console.info("[API is not yet implemented] AcknowledgeAlarmGroups");
    },
    /**
     * Returns true if the parameter has good quality and is true. In all other cases the result is false.
     * @param {Obecjt} variable
     * @returns {Boolean}
     */
    Test: function (variable) {
      return variable.value === true;
    },
    /**
     * Returns true if the parameter has good quality and is true. In all other cases the result is false.
     * @param {Obecjt} variable
     * @returns {Boolean}
     */
    TST: function (variable) {
      return Test(variable);
    },
    /**
     * Returns true if the parameter has good quality and is true. The variable is set to false. In all other cases the result is false.
     * @param {Object} variable
     * @returns {Boolean}
     */
    TestAndReset: function (variable) {
      return Test(variable);
    },
    /**
     * Returns true if the parameter has good quality and is true. The variable is set to false. In all other cases the result is false.
     * @param {Object} variable
     * @returns {Boolean}
     */
    TAR: function (variable) {
      return TestAndReset(variable);
    },
    /**
     * Returns true if the parameter has good quality and is true. The variable is set to false. In all other cases the result is false.
     * @param {Object} variable
     * @returns {Boolean}
     */
    Trigger: function (variable) {
      return TestAndReset(variable);
    },
    /**
     * Returns the momentary valid BlinkState as a Boolean value.
     * @param {type} enabled
     * @param {type} active
     * @returns {undefined} true represents âblink on stateâ and false represents âblink off stateâ.
     */
    GetBlinkState: function (enabled, active) {
      return GBS(enabled, active);
    },
    /**
     * Returns the momentary valid BlinkState as a Boolean value.
     * @param {type} enabled
     * @param {type} active
     * @returns {Boolean} true represents "blink on state" and false represents "blink off state".
     */
    GBS: function (enabled, active) {
      return enabled && emosWS.blinkInterval.GBS();
    },
    /**
     * This function returns the value of the specified property of the specified object. This function does not use the real objects to retrieve the property. It uses the internal animations table and looks for the supposed property value.
     *
     * @param {String} objectID - id of object to get
     * @param {String} property - property to get
     * @returns {undefined}
     */
    GetObjectPropertyAsString: function (objectID, property) {
      console.info("[API is not yet implemented] GetObjectPropertyAsString");
    },
    /**
     * Get boolean value of an IO tag
     *
     * @param {String} tag is name of IO Tag
     * @returns {Boolean}
     */
    GetTagObject: function (
      plctag,
      tag,
      UnitMetric,
      FactorMetric,
      UnitImperial,
      FactorImperial,
      UnitLocale,
      FactorLocale,
      UnitDefault,
      Precision,
      Stretch,
      Offset
    ) {
      return emosWS.getTagObject(
        plctag,
        tag,
        UnitMetric,
        FactorMetric,
        UnitImperial,
        FactorImperial,
        UnitLocale,
        FactorLocale,
        UnitDefault,
        Precision,
        Stretch,
        Offset
      );
    },
    GetTagValueAsBoolean: function (plctag, tag) {
      var value = emosWS.getTagValue(plctag, tag);
      return GetAsBoolean(value);
    },
    GetTagValueasBoolean: function (plctag, tag) {
      return GetTagValueAsBoolean(plctag, tag);
    },
    GetTagValueAsboolean: function (plctag, tag) {
      return GetTagValueAsBoolean(plctag, tag);
    },
    getTagValueAsBoolean: function (plctag, tag) {
      return GetTagValueAsBoolean(plctag, tag);
    },
    getTagValueasBoolean: function (plctag, def) {
      var value = GetTagValueAsBoolean(plctag);
      return value ? value : def;
    },
    getTagValueAsBitByMask: function (TAG, Bitnumber, Default) {
      console.info("[API is not yet implemented] getTagValueAsBitByMask");
    },
    /**
     * Get integer value of an IO tag
     *
     * @param {String} tag is name of IO Tag
     * @returns {integer}
     */
    GetTagValueAsInteger: function (plctag, tag) {
      var value = emosWS.getTagValue(plctag, tag);
      return GetAsInteger(value);
    },
    GetTagValueAsiNTEGER: function (plctag, tag) {
      return GetTagValueAsInteger(plctag, tag);
    },
    GetTAgValueASInteger: function (plctag, tag) {
      return GetTagValueAsInteger(plctag, tag);
    },
    GetTagValueAsinteger: function (plctag, tag) {
      return GetTagValueAsInteger(plctag, tag);
    },
    getTagValueAsInteger: function (plctag, tag) {
      return GetTagValueAsInteger(plctag, tag);
    },
    getTagValueAsNumber: function (plctag, def) {
      var value = GetTagValueAsDouble(plctag);
      return value ? value : def;
    },
    /**
     * Get float value of an IO tag
     *
     * @param {String} tag is name of IO Tag
     * @returns {float}  */
    GetTagValueAsDouble: function (plctag, tag) {
      var value = emosWS.getTagValue(plctag, tag);
      return GetAsDouble(value);
    },
    GetTagValueAsdouble: function (plctag, tag) {
      return GetTagValueAsDouble(plctag, tag);
    },
    getTagValueAsDouble: function (plctag, tag) {
      return GetTagValueAsDouble(plctag, tag);
    },
    /**
     * Get String value of an IO tag
     *
     * @param {String} tag is name of IO Tag
     * @returns {String}
     */
    GetTagValueAsString: function (plctag, tag) {
      var value = emosWS.getTagValue(plctag, tag);
      return GetAsString(value);
    },
    gettagvalueasstring: function (plctag, tag) {
      return GetTagValueAsString(plctag, tag);
    },
    getTagValueAsString: function (plctag, def) {
      var value = GetTagValueAsString(plctag);
      return value ? value : def;
    },
    /**
     * Convert a value to String
     *
     * @param {type} value
     * @returns {String}
     */
    GetAsString: function (value, defaultValue) {
      var ret;
      try {
        ret = String(value);
      } catch (err) {
        ret = GetAsString(defaultValue, null);
      }

      return ret;
    },
    getValueAsString: function (value, defaultValue) {
      return GetAsString(value, defaultValue);
    },
    getValueAsNumber: function (Value, Default) {
      console.info("[API is not yet implemented] getValueAsNumber");
    },
    GetServerStorageItem: function (keyName) {
      return emosWS.getServerStorageItem(keyName);
    },
    GetServerStorage: function () {
      return emosWS.getServerStorageItem(null, true);
    },
    SetServerStorageItem: function (keyName, keyValue) {
      emosWS.serverStorage.setItem(keyName, keyValue);
    },
    RemoveServerStorageItem: function (keyName, success, error) {
      emosWS.serverStorage.removeItem(keyName, success, error);
    },
    ClearServerStorage: function (success, error) {
      emosWS.serverStorage.clear(success, error);
    },
    /**
     * Convert string to float
     *
     * @param {String} value
     * @param {float} defaultValue
     * @returns {float}
     */
    GetAsDouble: function (value, defaultValue) {
      var ret = parseFloat(value);
      if (isNaN(ret)) ret = ret ? GetAsDouble(defaultValue) : null;
      return ret;
    },
    getValueAsDouble: function (value, defaultValue) {
      return GetAsDouble(value, defaultValue);
    },
    /**
     * Convert string to integer
     *
     * @param {String} Value
     * @param {integer} Default
     * @returns {integer}
     */
    GetAsInteger: function (value, defaultValue) {
      var ret = parseInt(value);
      if (isNaN(ret)) ret = ret ? GetAsInteger(defaultValue) : null;

      return ret;
    },
    getValueAsInteger: function (value, defaultValue) {
      return GetAsInteger(value, defaultValue);
    },
    /**
     * Convert string to boolean
     *
     * @param {String} value
     * @param {boolean} defaultValue
     * @returns {boolean}
     */
    GetAsBoolean: function (value, defaultValue) {
      var ret = String(value).toLowerCase();
      switch (ret) {
        case "true":
        case "1":
        case "-1":
          ret = true;
          break;
        case "false":
        case "0":
          ret = false;
          break;
        case "null":
        case "undefined":
          ret = null;
          break;

        default:
          ret = GetAsBoolean(defaultValue);
          break;
      }
      return ret;
    },
    getValueAsBoolean: function (value, defaultValue) {
      return GetAsBoolean(true, defaultValue);
    },
    getValueAsBitByMask: function (Value, Bitnumber, Default) {
      console.info("[API is not yet implemented] getValueAsBitByMask");
    },
    getChildNodes: function (RootNode, Objects) {
      console.info("[API is not yet implemented] getChildNodes");
    },
    getElementByTagNameAndAttribute: function (TagName, Attribute, Value) {
      console.info(
        "[API is not yet implemented] getElementByTagNameAndAttribute"
      );
    },
    getElementsFromObject: function (ObjectID, WithChildren, WithTextObjects) {
      console.info("[API is not yet implemented] getElementsFromObject");
    },
    setElementsAttribute: function (Objects, Attribute, Value) {
      console.info("[API is not yet implemented] setElementsAttribute");
    },
    setElementsStyleAttribute: function (Objects, Attribute, Value) {
      console.info("[API is not yet implemented] setElementsStyleAttribute");
    },
    enrolFunctionToInterval: function (FunctionName, IntervalTime) {
      if (isNaN(IntervalTime)) IntervalTime = 500;

      setInterval(
        function () {
          try {
            eval(FunctionName);
          } catch (e) {
            console.error("[enrolFunctionToInterval] : ", e);
          }
        },
        IntervalTime < 100 ? 100 : IntervalTime
      );
    },
    stopFunctionEnrolledAtInterval: function (FunctionName) {
      console.info(
        "[API is not yet implemented] stopFunctionEnrolledAtInterval"
      );
    },
    startFunctionEnrolledAtInterval: function (FunctionName) {
      console.info(
        "[API is not yet implemented] startFunctionEnrolledAtInterval"
      );
    },
    enrolFunctionToTrigger: function (FunctionName) {
      try {
        var functionName = FunctionName.replace("()", ""),
          myFunction = window[functionName];
        if (typeof myFunction === "function") {
          emosWS.addEventListener("ondatachange", myFunction);
        }
      } catch (e) {
        console.error(e);
      }
    },
    enrolFunctionToReadyTrigger: function (FunctionName) {
      console.info("[API is not yet implemented] enrolFunctionToReadyTrigger");
    },
    stopFunctionEnrolledAtTrigger: function (FunctionName) {
      try {
        var functionName = FunctionName.replace("()", ""),
          myFunction = window[functionName];
        if (typeof myFunction === "function") {
          emosWS.removeEventListener("ondatachange", myFunction);
        }
      } catch (e) {
        console.error(e);
      }
    },
    startFunctionEnrolledAtTrigger: function (FunctionName) {
      console.info(
        "[API is not yet implemented] startFunctionEnrolledAtTrigger"
      );
    },
    appendTag4Reading: function (PLC, ID) {
      AdviseTag(PLC, ID);
    },
    appendTag4ReadingByTag: function (TAG) {
      AdviseTag(TAG);
    },
    getProcessData: function (PLC, ID) {
      console.info("[API is not yet implemented] getProcessData");
    },
    getProcessDataByTag: function (TAG) {
      console.info("[API is not yet implemented] getProcessDataByTag");
    },
    browseFrameName: function (FramesObject, FrameName) {
      for (var i = 0; i < FramesObject.frames.length; i++) {
        if (FramesObject.frames[i].name === FrameName) {
          return FramesObject.frames[i];
        }
      }
      var FrameResult = null;
      for (var i = 0; i < FramesObject.frames.length; i++) {
        FrameResult = browseFrameName(FramesObject.frames[i], FrameName);
        if (FrameResult) {
          return FrameResult;
        }
      }
      return null;
    },
    loadHREF: function (URL, Target) {
      var TargetFrameObject = window;
      var TargetFrameObjectTemp = null;
      if (Target.toLowerCase() === "_top") {
        TargetFrameObject = top;
      } else if (Target !== "") {
        TargetFrameObjectTemp = browseFrameName(top, Target);
        if (TargetFrameObjectTemp) {
          TargetFrameObject = TargetFrameObjectTemp;
        }
      }
      //            var http = new XMLHttpRequest();
      //            http.open('HEAD', URL, true);
      //            http.onreadystatechange = function() {
      //                if (http.readyState == 4) {
      //                    if (http.status === 200) {
      //                        TargetFrameObject.location.href = URL;
      //                      } else {
      //                         TargetFrameObject.location.href = '../../tree.html';
      //                      }
      //                }
      //            }
      //            http.send(null);
      TargetFrameObject.location.href = URL;
    },
    intToBinary: function (number, length) {
      var binaryString = number.toString(2);
      var l = binaryString.length;
      for (var i = 0; i < length - l; i++) {
        binaryString = "0" + binaryString;
      }
      return binaryString;
    },
    getMainSVGDocument: function (id) {
      var mainsvg = typeof id === "undefined" ? "mainsvg" : id;
      var svgdocument = null;
      var mysvg = document.getElementById(mainsvg);
      if (mysvg && mysvg.contentDocument) svgdocument = mysvg.contentDocument;
      else {
        try {
          svgdocument = mysvg.getSVGDocument();
        } catch (err) {
          console.log("getMainSVGDocument error: " + err);
          return svgdocument;
        }
      }
      return svgdocument;
    },
    emosExtend: function (destination, source) {
      for (var property in source) {
        if (source.hasOwnProperty(property)) {
          destination[property] = source[property];
        }
      }
      return destination;
    },
    CheckUserRight: function (groupId, groupIndex) {
      return emosWS.login.au.hasRight(groupId, groupIndex);
      /*if (emosWS.login.au) {
             return emosWS.login.au.hasRight(groupId, groupIndex);
             }            
             return false;*/
    },
    getVisibility: function (visi) {
      return visi === "block" ? true : false;
    },
    getNumberAsFormattedString: function (RawNumber, MinDecimals, MaxDecimals) {
      console.info("[API is not yet implemented] getNumberAsFormattedString");
    },
    appendTag4Writing: function (PLC, ID) {
      console.info("[API is not yet implemented] appendTag4Writing");
    },
    appendTag4WritingByTag: function (TAG) {
      console.info("[API is not yet implemented] appendTag4WritingByTag");
    },
    writeTagValue: function (
      PLC,
      ID,
      Value,
      SecurityGroupRF,
      SecurityUserRF,
      SecurityPlant
    ) {
      console.info("[API is not yet implemented] writeTagValue");
    },
    writeTagValueByTag: function (
      TAG,
      Value,
      SecurityGroupRF,
      SecurityUserRF,
      SecurityPlant
    ) {
      SetTagValue(TAG, Value);
    },
    GetSubstring: function (s1, s2) {
      return GetSubString(s1, s2);
    },
    GetSubStringAsBoolean: function (s1, s2) {
      return GetAsBoolean(GetSubString(s1, s2));
    },
    GetSubStringAsInteger: function (s1, s2) {
      return GetAsInteger(GetSubString(s1, s2));
    },
    GetSubStringAsDouble: function (s1, s2) {
      return GetAsDouble(GetSubString(s1, s2));
    },
    bitSet: function (i, b) {
      var mask = 1 << b;
      return (i & mask) !== 0;
    },
    bitNotSet: function (i, b) {
      return bitSet(i, b);
    },
    getUrlVars: function (url) {
      var vars = [],
        hash;
      var hashes = url.slice(url.indexOf("?") + 1).split("&");
      for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split("=");
        vars.push({ Name: hash[0], Value: hash[1] });
        vars[hash[0]] = hash[1];
      }
      return vars;
    },

    ReadParametersFromDialogArguments: function () {
      if (!window.dialogArguments) {
        return [];
      } else {
        return getUrlVars(window.dialogArguments);
      }
    },
    sortHashArray: function (h) {
      var keys = [];
      for (var key in h) {
        if (h.hasOwnProperty(key)) {
          keys.push(key);
        }
      }
      return keys.sort();
    },
    getFunctionFromESFuction: function (f) {
      try {
        var matched = false,
          i = 0,
          replace = function (match, declare) {
            matched = true;
            var v = "_tmpVar" + i++;
            declare.value += "var " + v + " = " + match + ";\n";
            return v;
          };

        //extract content of function
        var content0 = "",
          content = f
            .toString()
            .replace(/^function\s*\([^{]*\)\s*\n?{|}$/g, "");

        //replacing GlobalVariable
        var globalVariabaleDeclaration = { value: "" };
        content = content.replace(
          /([$\w]*)\.value(?!\s*=[^=])/g,
          function (match, variableName) {
            //Check if GlobalVariable
            return window[variableName] instanceof GlobalVariable
              ? replace(match, globalVariabaleDeclaration)
              : match;
          }
        );

        //declaration Get functions
        var index2 = -1,
          functionDeclaration = { value: "" };
        content = content.replace(
          /Get(?:Tag|Text|AlarmGroup)[^\(]+\([^\)]*\)/gi,
          function (match, position) {
            if (index2 === -1) {
              index2 = 0;
              while (position > 0) {
                var char = content.charAt(position);
                if (char === "\n") {
                  index2 = position + 1;
                  //console.log("Upto first Get: " + content.substring(0, index2));
                  break;
                }
                position--;
              }
            }
            return replace(match, functionDeclaration);
          }
        );

        if (matched) {
          //Get last "var" postion
          if (index2 > 0) {
            var _content = content.substring(0, index2);
            var index = _content.lastIndexOf("var");
            if (index !== -1) {
              index += 3;
              while (index < index2) {
                var char = content.charAt(index);
                index++;
                if (char === "\n") {
                  content0 = content.substring(0, index);
                  content = content.substring(index);
                  break;
                }
              }
            }
          }

          //console.log(globalVariabaleDeclaration.value + content0 + functionDeclaration.value + content);
          return new Function(
            globalVariabaleDeclaration.value +
              content0 +
              functionDeclaration.value +
              content
          );
        } else {
          return f;
        }
      } catch (e) {
        // console.log(e);
        return f;
      }
    },
  };
  for (var i in emosWS.fn) {
    window[i] = emosWS.fn[i];
  }
  window["G_Params"] = getUrlVars(window.location.search);
  window["G_DialogArgs"] = ReadParametersFromDialogArguments();

  /* DS_HMI (singleton): supports legacy DS_HMI APIs
   *
   * @type _L30.Anonym$20|Function
   */
  var DS_HMI = (function () {
    function SetVariable(variableName, newValue, enabled) {
      try {
        if (enabled) {
          var gv = window[variableName.replace(".value", "")];
          if (gv) gv.setValue(newValue);
        }
      } catch (err) {
        console.log("DS_HMI SetVariable() failed: " + err);
      }
    }

    function DebugJSCode(param) {
      emosWS.debug.show();
    }

    function DebugIOTags(param) {
      emosWS.debug.show();
    }

    function DebugCommLib(param) {
      emosWS.debug.show();
    }

    function DebugCommLibData(param) {
      emosWS.debug.show();
    }

    function DebugCommLibCalls(param) {
      emosWS.debug.show();
    }

    function DebugMessages(param) {
      emosWS.debug.show();
    }

    function DebugGlobalVariables(param) {
      alert("Sorry, emos.js currently does not support DebugGlobalVariables!");
    }

    /*
     * Define all public variables and public functions of DS_HMI
     */
    return {
      SetVariable: SetVariable,
      DebugJSCode: DebugJSCode,
      DebugIOTags: DebugIOTags,
      DebugCommLib: DebugCommLib,
      DebugCommLibData: DebugCommLibData,
      DebugCommLibCalls: DebugCommLibCalls,
      DebugMessages: DebugMessages,
      DebugGlobalVariables: DebugGlobalVariables,
    };
  })();
  window.DS_HMI = DS_HMI; //temp
  emosWS.DS_HMI = DS_HMI;

  function ESAnimation() {
    emosWS.animationNumber++;
    this.data = null;
    this.qualityGood = false;
    this.badQualityTagList = {};
    this.advisedTagList = {};
    this.shape = null;
    this.shapeText = null;
    this.shapeTextContent = null;
    this.strokeWidthBad = 1.5;
    if (typeof this.target !== "undefined") {
      var shape = emosWS.addAnimation(this, this.target);
      this.SHAPE = shape.shape;
      this.index = shape.index;
      this.shape = this.SHAPE.shape;
      this.shapeText = this.SHAPE.shapeText;
      this.shapeTextContent = this.SHAPE.shapeTextContent;
    }

    this.datachangeListener = this.datachangeListener.bind(this);
    this.initialize = this.initialize.bind(this);

    if (this.conditionFunction) {
      this.initConditionFunction = getFunctionFromESFuction(
        this.conditionFunction
      );
    }

    this.initialize();
    emosWS.dispatchEvent({ type: "HMIanimation" });
  }

  ESAnimation.prototype.updateTagList = function (msg) {
    if (typeof msg !== "undefined") {
      this.advisedTagList[msg.tag] = 0;
      if (emosWS.hasQualityGood(msg)) {
        if (typeof this.badQualityTagList[msg.tag] !== "undefined") {
          delete this.badQualityTagList[msg.tag];
        }
      } else {
        this.badQualityTagList[msg.tag] = 0;
      }
      this.qualityGood = Object.keys(this.badQualityTagList).length === 0;
    }
  };

  ESAnimation.prototype.checkQuality = function () {
    try {
      var style = {};
      if (this.useQuality) {
        style["stroke"] = this.qualityGood
          ? this.strokeColorQualityGood
          : this.strokeColorQualityBad;
        style["stroke-width"] = this.qualityGood
          ? this.SHAPE.strokeWidth
          : this.strokeWidthBad;
      }

      if (this.hideIfQualityBad && !this.qualityGood) {
        style["display"] = "none";
      }

      this.setStyle(style);
    } catch (e) {
      console.error("[", this.constructor.name, "] checkQuality failed: ", e);
    }
  };

  ESAnimation.prototype.setCallback = function () {
    emosWS.animationData.callback = this;
  };

  ESAnimation.prototype.datachangeListener = function (msg) {
    try {
      if (emosWS.animationData.stillInit) {
        this.setCallback();
      }
      this.updateTagList(msg);
      emosWS.currentAnimation = this;
      this.datachangeListenerMore(msg);
      emosWS.currentAnimation = null;
    } catch (err) {
      console.log(
        this.constructor.name + ": datachangeListener failed: " + err
      );
    }
  };

  ESAnimation.prototype.datachangeListenerMore = function () {};

  ESAnimation.prototype.initialize = function () {
    try {
      emosWS.animationData.stillInit = true;
      this.setCallback();
      this.unadvise();
      this.initializeMore();
    } catch (err) {
      console.log(this.constructor.name + ": initialize failed: " + err);
    }
  };

  ESAnimation.prototype.initializeMore = function () {};

  ESAnimation.prototype.unadvise = function () {
    try {
      //console.log("unadvising: " + Object.keys(this.advisedTagList).length + " tags");
      for (var tag in this.advisedTagList) {
        emosWS.unadvise(tag, this);
      }
      this.badQualityTagList = {};
      this.advisedTagList = {};
      this.unadviseMore();
    } catch (err) {
      console.log(this.constructor.name + ": unadvise failed: " + err);
    }
  };

  ESAnimation.prototype.unadviseMore = function () {};

  ESAnimation.prototype.setStyle = function (style) {
    if (this.SHAPE) {
      this.SHAPE.setStyle(style, this.index);
    }
  };

  ESAnimation.prototype.getDetail = function () {
    return (
      this.constructor.name +
      "\n" +
      "Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯\n" +
      this.toString()
    );
  };

  ESAnimation.prototype.toString = function () {
    var object = this,
      simpleObject = {};
    for (var prop in object) {
      if (!object.hasOwnProperty(prop)) {
        continue;
      }
      if (typeof object[prop] === "object") {
        continue;
      }
      if (typeof object[prop] === "function") {
        continue;
      }
      simpleObject[prop] = object[prop];
    }
    var cleanedJson = JSON.stringify(simpleObject);
    return cleanedJson;
  };

  emosWS.ESAnimation = ESAnimation;

  function ESAnimation2() {
    ESAnimation.call(this);
  }
  ESAnimation2.prototype = Object.create(ESAnimation.prototype);
  ESAnimation2.prototype.constructor = ESAnimation2;

  ESAnimation2.prototype.datachangeListenerMore = function () {
    try {
      this.condition = this.conditionFunction();
      this.startAnimate();
    } catch (err) {
      console.log(
        this.constructor.name + "datachangeListenerMore failed: " + err
      );
    }
  };

  ESAnimation2.prototype.initializeMore = function () {
    try {
      this.condition = this.initConditionFunction();
      emosWS.animationData.stillInit = false;
      //this.condition = this.conditionFunction();
      if (this.condition !== null) {
        this.startAnimate();
      } else {
        this.checkQuality();
      }
    } catch (err) {
      console.log("initializeMore failed: " + err);
    }
  };
  emosWS.ESAnimation2 = ESAnimation2;

  function ESAnimation3() {
    ESAnimation.call(this);
  }
  ESAnimation3.prototype = Object.create(ESAnimation.prototype);
  ESAnimation3.prototype.constructor = ESAnimation3;

  ESAnimation3.prototype.datachangeListenerMore = function () {
    try {
      this.doCondition();
      this.startAnimate();
    } catch (err) {
      console.log(
        this.constructor.name + ": datachangeListenerMore failed: " + err
      );
    }
  };
  ESAnimation3.prototype.doCondition = function () {};
  ESAnimation3.prototype.initializeMore = function () {
    try {
      this.doCondition();
      emosWS.animationData.stillInit = false;
      //this.doCondition();
      if (this.condition !== null) this.startAnimate();
    } catch (err) {
      console.log("initializeMore failed: " + err);
    }
  };

  var EScriptGlobal = function (configuration) {
    this.globalScript = configuration;

    this.timeout = 100; //ms
    this.timeoutJob = null;
    this.initialized = false;
    this.index = 1;
    this.globalFunction = function () {
      if (!this.initialized) {
        this.runGlobalScript();
      } else {
        if (this.timeoutJob !== null) {
          clearTimeout(this.timeoutJob);
        }
        this.scheduleJob();
      }
    }.bind(this);
    ESAnimation.call(this);
    /*try {
         configuration();
         } catch (err) {
         console.log("EScriptGlobal running failed: " + err);
         }*/
  };
  EScriptGlobal.prototype = Object.create(ESAnimation.prototype);
  EScriptGlobal.prototype.constructor = EScriptGlobal;

  EScriptGlobal.prototype.scheduleJob = function () {
    this.timeoutJob = setTimeout(
      function () {
        //emosWS.animationData.globalVariablesSetCallBackAble = true;
        //emosWS.listenGlobalVariablesChange();
        this.runGlobalScript();
        //emosWS.callbackGlobalVariablesChange();
        //emosWS.animationData.globalVariablesSetCallBackAble = false;
        this.timeoutJob = null;
      }.bind(this),
      this.timeout
    );
  };

  EScriptGlobal.prototype.runGlobalScript = function () {
    console.info("[Calling EScriptGlobal: ", this.index++, "]");
    this.globalScript();
  };

  EScriptGlobal.prototype.datachangeListenerMore = function () {
    try {
      this.globalFunction();
    } catch (err) {
      console.log(
        this.constructor.name + "datachangeListenerMore failed: " + err
      );
    }
  };

  EScriptGlobal.prototype.initialize = function () {
    try {
      emosWS.animationData.stillInit = true;
      emosWS.animationData.callback = this;
      this.initializeMore();
    } catch (err) {
      console.log(this.constructor.name + ": initialize failed: " + err);
    }
  };

  EScriptGlobal.prototype.initializeMore = function () {
    try {
      this.globalFunction();
      this.initialized = true;

      emosWS.animationData.stillInit = false;
      //this.globalFunction();
    } catch (err) {
      console.log("initializeMore failed: " + err);
    }
  };
  window.EScriptGlobal = EScriptGlobal; //temporary
  emosWS.EScriptGlobal = EScriptGlobal;

  var TAlarmRecord = function (Name, Color, Actioncode) {
    this.Name = Name;
    this.Color = Color;
    this.Actioncode = Actioncode;
  };
  emosWS.AlarmRecord = TAlarmRecord;

  function AColorBlink(configuration) {
    this.conditionFunction = configuration["conditionFunction"];
    this.condition = false;
    this.swapFillcolor = configuration["PLACEHOLDER_SWAP_FILLCOLOR"];
    this.swapStrokecolor = configuration["PLACEHOLDER_SWAP_STROKECOLOR"];
    this.swapVisibility = configuration["PLACEHOLDER_SWAP_VISIBILITY"];
    this.useFalse = configuration["PLACEHOLDER_SWAP_USEFALSE"];
    this.useQuality = configuration["PLACEHOLDER_SWAP_USEQUALITY"];
    this.fillColorOn = configuration["PLACEHOLDER_FILLCOLORON"];
    this.fillColorOff = configuration["PLACEHOLDER_FILLCOLOROFF"];
    this.fillColorFalse = configuration["PLACEHOLDER_FILLCOLORFALSE"];
    this.fillColor;
    this.strokeColor;
    this.strokeColorQualityGood =
      configuration["PLACEHOLDER_STROKECOLORQUALITYGOOD"];
    this.strokeColorQualityBad =
      configuration["PLACEHOLDER_STROKECOLORQUALITYBAD"];
    this.strokeColorOn = configuration["PLACEHOLDER_STROKECOLORON"];
    this.strokeColorOff = configuration["PLACEHOLDER_STROKECOLOROFF"];
    this.strokeColorFalse = configuration["PLACEHOLDER_STROKECOLORFALSE"];
    this.visibilityOn = configuration["PLACEHOLDER_VISIBILITYON"];
    this.visibilityOff = configuration["PLACEHOLDER_VISIBILITYOFF"];
    this.visibilityFalse = configuration["PLACEHOLDER_VISIBILITYFALSE"];
    this.target = configuration["STDPLACEHOLDER_SHAPENAME"];
    this.interval = 0;
    this.trigger = function () {
      this.animate();
    }.bind(this);

    ESAnimation2.call(this);
  }

  AColorBlink.prototype = Object.create(ESAnimation2.prototype);
  AColorBlink.prototype.constructor = AColorBlink;

  AColorBlink.prototype.startAnimate = function () {
    if (this.condition) {
      if (this.interval === 0) {
        this.interval = 1;
        emosWS.blinkInterval.addListener(this.trigger, true);
      }
    } else {
      if (this.interval !== 0) {
        emosWS.blinkInterval.removeListener(this.trigger);
        this.interval = 0;
      }
      this.animate(this);
    }
  };

  AColorBlink.prototype.animate = function () {
    var style = { fill: null, stroke: null, display: null };
    if (this.useQuality) {
      style.stroke = this.qualityGood
        ? this.strokeColorQualityGood
        : this.strokeColorQualityBad;
      style["stroke-width"] = this.qualityGood
        ? this.SHAPE.strokeWidth
        : this.strokeWidthBad;
    }
    if (this.condition) {
      if (emosWS.blinkInterval.active) {
        if (this.swapFillcolor) style.fill = this.fillColorOn;
        if (this.swapStrokecolor) style.stroke = this.strokeColorOn;
        if (this.swapVisibility)
          style.display = this.visibilityOn ? "block" : "none";
      } else {
        if (this.swapFillcolor) style.fill = this.fillColorOff;
        if (this.swapStrokecolor) style.stroke = this.strokeColorOff;
        if (this.swapVisibility)
          style.display = this.visibilityOff ? "block" : "none";
      }
    } else {
      if (this.useFalse) {
        if (this.swapFillcolor) style.fill = this.fillColorFalse;
        if (this.swapStrokecolor) style.stroke = this.strokeColorFalse;
        if (this.swapVisibility)
          style.display = this.visibilityFalse ? "block" : "none";
      }
    }
    this.setStyle(style);
  };

  AColorBlink.prototype.toString = function () {
    return (
      "conditionFunction\n" +
      this.conditionFunction +
      "\n\n\
condition = " +
      this.condition +
      "\n\n\
swapFillcolor = " +
      this.swapFillcolor +
      "\n\
swapStrokecolor = " +
      this.swapStrokecolor +
      "\n\
swapVisibility = " +
      this.swapVisibility +
      "\n\n\
useFalse = " +
      this.useFalse +
      "\n\
useQuality = " +
      this.useQuality +
      "\n\n\
fillColorOn = " +
      this.fillColorOn +
      "\n\
fillColorOff = " +
      this.fillColorOff +
      "\n\
fillColorFalse = " +
      this.fillColorFalse +
      "\n\n\
strokeColorQualityGood = " +
      this.strokeColorQualityGood +
      "\n\
strokeColorQualityBad = " +
      this.strokeColorQualityBad +
      "\n\
strokeColorOff = " +
      this.strokeColorOff +
      "\n\
strokeColorFalse = " +
      this.strokeColorFalse +
      "\n\n\
visibilityOn = " +
      this.visibilityOn +
      "\n\
visibilityOff = " +
      this.visibilityOff +
      "\n\
visibilityFalse = " +
      this.visibilityFalse +
      "\n\
"
    );
  };

  emosWS.ESColorBlink = AColorBlink;

  function AColorSwap(configuration) {
    this.conditionFunction = configuration["conditionFunction"];
    this.condition = false;
    this.swapFillcolor = configuration["PLACEHOLDER_SWAP_FILLCOLOR"];
    this.swapStrokecolor = configuration["PLACEHOLDER_SWAP_STROKECOLOR"];
    this.swapVisibility = configuration["PLACEHOLDER_SWAP_VISIBILITY"];
    this.useTrue = configuration["PLACEHOLDER_SWAP_USETRUE"];
    this.useFalse = configuration["PLACEHOLDER_SWAP_USEFALSE"];
    this.useQuality = configuration["PLACEHOLDER_SWAP_USEQUALITY"];
    this.fillColorTrue = configuration["PLACEHOLDER_FILLCOLOR"];
    this.fillColorFalse = configuration["PLACEHOLDER_FILLCOLORFALSE"];
    this.fillColor;
    this.strokeColor;
    this.strokeColorQualityGood =
      configuration["PLACEHOLDER_STROKECOLORQUALITYGOOD"];
    this.strokeColorQualityBad =
      configuration["PLACEHOLDER_STROKECOLORQUALITYBAD"];
    this.strokeColorTrue = configuration["PLACEHOLDER_STROKECOLOR"];
    this.strokeColorFalse = configuration["PLACEHOLDER_STROKECOLORFALSE"];
    this.visibilityTrue = configuration["PLACEHOLDER_VISIBILITY"];
    this.visibilityFalse = configuration["PLACEHOLDER_VISIBILITYFALSE"];
    this.hideIfQualityBad = configuration["PLACEHOLDER_SWAP_HIDEIFQUALITYBAD"];
    this.target = configuration["STDPLACEHOLDER_SHAPENAME"];
    ESAnimation2.call(this);
  }

  AColorSwap.prototype = Object.create(ESAnimation2.prototype);
  AColorSwap.prototype.constructor = AColorSwap;

  AColorSwap.prototype.startAnimate = function () {
    var style = { fill: null, stroke: null, display: null };

    if (this.useQuality) {
      style.stroke = this.qualityGood
        ? this.strokeColorQualityGood
        : this.strokeColorQualityBad;
      style["stroke-width"] = this.qualityGood
        ? this.SHAPE.strokeWidth
        : this.strokeWidthBad;
    }

    if (this.hideIfQualityBad)
      style.display = this.qualityGood ? "block" : "none";

    if (this.condition) {
      if (this.useTrue) {
        if (this.swapFillcolor) style.fill = this.fillColorTrue;
        if (this.swapStrokecolor) style.stroke = this.strokeColorTrue;
        if (this.swapVisibility)
          style.display = this.visibilityTrue ? "block" : "none";
      }
    } else {
      if (this.useFalse) {
        if (this.swapFillcolor) style.fill = this.fillColorFalse;
        if (this.swapStrokecolor) style.stroke = this.strokeColorFalse;
        if (this.swapVisibility)
          style.display = this.visibilityFalse ? "block" : "none";
      }
    }
    this.setStyle(style);
  };

  AColorSwap.prototype.toString = function () {
    return (
      "conditionFunction\n" +
      this.conditionFunction +
      "\n\
initConditionFunction\n" +
      this.initConditionFunction +
      "\n\
condition = " +
      this.condition +
      "\n\
swapFillcolor = " +
      this.swapFillcolor +
      "\n\
swapStrokecolor = " +
      this.swapStrokecolor +
      "\n\
swapVisibility = " +
      this.swapVisibility +
      "\n\
useTrue = " +
      this.useTrue +
      "\n\
useFalse = " +
      this.useFalse +
      "\n\
useQuality = " +
      this.useQuality +
      "\n\
fillColorTrue = " +
      this.fillColorTrue +
      "\n\
fillColorFalse = " +
      this.fillColorFalse +
      "\n\
fillColorFalse = " +
      this.fillColorFalse +
      "\n\
strokeColorQualityGood = " +
      this.strokeColorQualityGood +
      "\n\
strokeColorQualityBad = " +
      this.strokeColorQualityBad +
      "\n\
strokeColorTrue = " +
      this.strokeColorTrue +
      "\n\
strokeColorFalse = " +
      this.strokeColorFalse +
      "\n\
visibilityTrue = " +
      this.visibilityTrue +
      "\n\
visibilityFalse = " +
      this.visibilityFalse +
      "\n\
hideIfQualityBad = " +
      this.hideIfQualityBad +
      "\n\
"
    );
  };
  emosWS.ESColorSwap = AColorSwap;

  function AFaultWarning(configuration) {
    this.conditionFunction = configuration["conditionFunction"];
    this.AlarmGroup = "";
    this.previousAlarmGroup = "";
    this.enabled = true;
    this.enabledAck = false;
    this.target = configuration["STDPLACEHOLDER_SHAPENAME"];
    this.svgElement = getSVGElement(this.target);
    if (this.svgElement) {
      this.originalFillColor = this.svgElement.getAttribute("fill");
      this.originalStrokeColor = this.svgElement.getAttribute("stroke");
    }

    this.newFaultEnabled = configuration["PLACEHOLDER_NEWFLT_ENABLED"];
    this.newFaultFillcolor = configuration["PLACEHOLDER_NEWFLT_FILLCOLOR"];
    this.newFaultVisible = configuration["PLACEHOLDER_NEWFLT_VISIBLE"];
    this.newFaultBlinking = configuration["PLACEHOLDER_NEWFLT_BLINKING"];
    this.newFaultProperty = {
      Enabled: this.newFaultEnabled,
      Fillcolor: this.newFaultFillcolor,
      Visible: this.newFaultVisible,
      Blinking: this.newFaultBlinking,
    };
    this.ackFaultEnabled = configuration["PLACEHOLDER_ACKFLT_ENABLED"];
    this.ackFaultFillcolor = configuration["PLACEHOLDER_ACKFLT_FILLCOLOR"];
    this.ackFaultVisible = configuration["PLACEHOLDER_ACKFLT_VISIBLE"];
    this.ackFaultBlinking = configuration["PLACEHOLDER_ACKFLT_BLINKING"];
    this.ackFaultProperty = {
      Enabled: this.ackFaultEnabled,
      Fillcolor: this.ackFaultFillcolor,
      Visible: this.ackFaultVisible,
      Blinking: this.ackFaultBlinking,
    };
    this.newEMSEnabled = configuration["PLACEHOLDER_NEWEMS_ENABLED"];
    this.newEMSFillcolor = configuration["PLACEHOLDER_NEWEMS_FILLCOLOR"];
    this.newEMSVisible = configuration["PLACEHOLDER_NEWEMS_VISIBLE"];
    this.newEMSBlinking = configuration["PLACEHOLDER_NEWEMS_BLINKING"];
    this.newEMSProperty = {
      Enabled: this.newEMSEnabled,
      Fillcolor: this.newEMSFillcolor,
      Visible: this.newEMSVisible,
      Blinking: this.newEMSBlinking,
    };
    this.ackEMSEnabled = configuration["PLACEHOLDER_ACKEMS_ENABLED"];
    this.ackEMSFillcolor = configuration["PLACEHOLDER_ACKEMS_FILLCOLOR"];
    this.ackEMSVisible = configuration["PLACEHOLDER_ACKEMS_VISIBLE"];
    this.ackEMSBlinking = configuration["PLACEHOLDER_ACKEMS_BLINKING"];
    this.ackEMSProperty = {
      Enabled: this.ackEMSEnabled,
      Fillcolor: this.ackEMSFillcolor,
      Visible: this.ackEMSVisible,
      Blinking: this.ackEMSBlinking,
    };
    this.newWRNEnabled = configuration["PLACEHOLDER_NEWWRN_ENABLED"];
    this.newWRNFillcolor = configuration["PLACEHOLDER_NEWWRN_FILLCOLOR"];
    this.newWRNVisible = configuration["PLACEHOLDER_NEWWRN_VISIBLE"];
    this.newWRNBlinking = configuration["PLACEHOLDER_NEWWRN_BLINKING"];
    this.newWRNProperty = {
      Enabled: this.newWRNEnabled,
      Fillcolor: this.newWRNFillcolor,
      Visible: this.newWRNVisible,
      Blinking: this.newWRNBlinking,
    };
    this.ackWRNEnabled = configuration["PLACEHOLDER_ACKWRN_ENABLED"];
    this.ackWRNFillcolor = configuration["PLACEHOLDER_ACKWRN_FILLCOLOR"];
    this.ackWRNVisible = configuration["PLACEHOLDER_ACKWRN_VISIBLE"];
    this.ackWRNBlinking = configuration["PLACEHOLDER_ACKWRN_BLINKING"];
    this.ackWRNProperty = {
      Enabled: this.ackWRNEnabled,
      Fillcolor: this.ackWRNFillcolor,
      Visible: this.ackWRNVisible,
      Blinking: this.ackWRNBlinking,
    };
    this.NOEnabled = configuration["PLACEHOLDER_NO_ENABLED"];
    this.NOFillcolor = configuration["PLACEHOLDER_NO_FILLCOLOR"];
    this.NOVisible = configuration["PLACEHOLDER_NO_VISIBLE"];
    this.NOBlinking = configuration["PLACEHOLDER_NO_BLINKING"];
    this.NOProperty = {
      Enabled: this.NOEnabled,
      Fillcolor: this.NOFillcolor,
      Visible: this.NOVisible,
      Blinking: this.NOBlinking,
    };
    this.fillcolorNoBlink = configuration["PLACEHOLDER_FILLCOLORNOBLINK"];
    this.useQuality = configuration["PLACEHOLDER_SWAP_USEQUALITY"];
    this.strokeColorQualityGood =
      configuration["PLACEHOLDER_STROKECOLORQUALITYGOOD"];
    this.strokeColorQualityBad =
      configuration["PLACEHOLDER_STROKECOLORQUALITYBAD"];
    this.UnknownProperty = {
      Enabled: true,
      Fillcolor: this.originalFillColor,
      Visible: true,
      Blinking: false,
    };
    this.useHand = configuration["PLACEHOLDER_USEHAND"];
    this.useStroke = configuration["PLACEHOLDER_USESTROKE"];
    this.useHide = configuration["PLACEHOLDER_USEHIDE"];
    this.fillColor;
    this.interval = 0;
    this.stateMap = {
      0: this.newFaultProperty,
      1: this.ackFaultProperty,
      2: this.newEMSProperty,
      3: this.ackEMSProperty,
      4: this.newWRNProperty,
      5: this.ackWRNProperty,
      6: this.NOProperty,
      7: this.NOProperty,
    };
    this.currentProperty = this.stateMap[0];
    this.alarmStateList = {};
    this.alarmState = null;
    this.alarmValue = null;
    this.trigger = function () {
      this.animate();
    }.bind(this);

    ESAnimation.call(this);

    this.originalStrokeWidth = null;
    this.originalFill = null;
    if (this.shape) {
      this.originalStrokeWidth = this.shape.getAttribute("stroke-width");
      this.originalFill = this.shape.getAttribute("fill");
    }
  }

  AFaultWarning.prototype = Object.create(ESAnimation.prototype);
  AFaultWarning.prototype.constructor = AFaultWarning;
  AFaultWarning.prototype.updateAlarmStateList = function (msg) {
    try {
      if (typeof msg !== "undefined")
        if (typeof msg.classStateRec !== "undefined") {
          var state = {
            value: parseInt(msg.value),
            state: msg.classStateRec.state,
          };
          //console.log("updateAlarmStateList: " + msg.tag + " / value=" + state.value + " /state=" + state.state);
          this.alarmStateList[msg.tag] = state;
          var alarmState = 100,
            alarmValue = 100;
          for (var i in this.alarmStateList) {
            alarmItem = this.alarmStateList[i];
            if (alarmItem.value < alarmValue) alarmValue = alarmItem.value;
            if (alarmItem.state < alarmState) alarmState = alarmItem.state;
          }
          this.alarmState = alarmState;
          this.alarmValue = alarmValue;
          /*console.log("updateAlarmStateList: alarmgroup number = " + Object.keys(this.alarmStateList).length +
                     " / advisedTag number = " + Object.keys(this.advisedTagList).length);*/
        }
    } catch (err) {
      console.log("updateAlarmStateList failed: " + err);
    }
  };

  AFaultWarning.prototype.datachangeListenerMore = function (msg) {
    try {
      this.doCondition();
      if (this.AlarmGroup && this.AlarmGroup !== this.previousAlarmGroup) {
        this.adviseData();
      }
      if (typeof msg !== "undefined")
        if (typeof msg.classStateRec !== "undefined") {
          this.updateAlarmStateList(msg);
          this.startAnimate(msg);
        }
    } catch (err) {
      console.log("AFaultWarning datachangeListenerMore failed: " + err);
    }
  };
  AFaultWarning.prototype.startAnimate = function (msg) {
    try {
      this.currentProperty =
        this.stateMap[this.alarmState] || this.currentProperty;
      if (this.currentProperty.Blinking) {
        if (this.interval === 0) {
          this.interval = 1;
          emosWS.blinkInterval.addListener(this.trigger, false);
        }
      } else {
        this.animate();
      }
    } catch (err) {
      console.log("AFaultWarning startAnimate failed: " + err);
    }
  };
  AFaultWarning.prototype.animate = function () {
    try {
      var style = {
        fill: null,
        stroke: null,
        display: null,
        cursor: null,
        "stroke-width": null,
      };
      if (this.useQuality) {
        style.stroke = this.qualityGood
          ? this.strokeColorQualityGood
          : this.strokeColorQualityBad;
        style["stroke-width"] = this.qualityGood
          ? this.SHAPE.strokeWidth
          : this.strokeWidthBad;
      }

      if (this.enabled) {
        if (this.useHand) style.cursor = "pointer";

        if (this.useHide) style.display = "block";

        if (this.currentProperty.Blinking) {
          if (emosWS.blinkInterval.active) {
            if (this.currentProperty.Enabled)
              style.fill = this.currentProperty.Fillcolor;
          } else {
            if (this.currentProperty.Enabled)
              style.fill = this.fillcolorNoBlink;
          }
        } else {
          if (this.currentProperty.Enabled)
            style.fill = this.currentProperty.Fillcolor;
        }

        if (this.useStroke) style["stroke-width"] = 3;

        if (this.useVisible || this.currentProperty.useVisible) {
          var visi = this.currentProperty.Visible ? "block" : "none";
          style.display = visi;
          if (this.svgTextElement) this.svgTextElement.style["display"] = visi;
        }
      } else {
        if (this.useHand) style.cursor = "auto";

        if (this.useHide) style.display = "none";

        if (this.useStroke) style["stroke-width"] = this.originalStrokeWidth;
      }
      this.setStyle(style);
    } catch (err) {
      console.log("AFaultWarning animate failed: " + err);
    }
  };
  AFaultWarning.prototype.adviseData = function () {
    try {
      this.previousAlarmGroup = this.AlarmGroup;
      var self = this;
      emosWS.advise(
        this.AlarmGroup,
        this.datachangeListener,
        "",
        emosWS.tagType.Alarm
      );

      /*emosWS.advise(this.AlarmGroup, function (msg) {
             self.datachangeListener(msg);
             }, "", emosWS.tagType.Alarm);*/
      //console.log("advised alarmgroup: " + this.AlarmGroup);
    } catch (err) {
      console.log("adviseData failed: " + err);
    }
  };
  AFaultWarning.prototype.doCondition = function () {
    try {
      var value = emosWS.animationData.stillInit
        ? this.initConditionFunction()
        : this.conditionFunction();
      this.AlarmGroup = this.getAlarmGroup(value.AlarmGroup);
      this.enabled = value.Enabled;
      this.enabledAck = value.EnabledAck;
    } catch (err) {
      console.log("doCondition failed: " + err);
    }
  };
  AFaultWarning.prototype.getAlarmGroup = function (ag) {
    return ag ? ag.replace(/.alarm\s*\b/gi, "") : null;
  };
  AFaultWarning.prototype.initializeMore = function () {
    emosWS.blinkInterval.removeListener(this.trigger);
    this.interval = 0;
    var style = {
      fill: null,
      stroke: null,
      display: null,
      cursor: null,
      "stroke-width": null,
    };
    this.setStyle(style);

    this.doCondition();
    emosWS.animationData.stillInit = false;
    this.doCondition();
    this.adviseData();
    //this.animate();
    this.startAnimate();
  };

  AFaultWarning.prototype.unadviseMore = function () {
    this.alarmStateList = {};
  };

  AFaultWarning.prototype.toString = function () {
    return (
      "AlarmGroup\n" +
      this.getAlarmGroupString() +
      "\n\
enabled = " +
      this.enabled +
      "\n\
enabledAck = " +
      this.enabledAck +
      "\n\n\
newFaultEnabled = " +
      this.stateMap +
      "\n\
newFaultFillcolor = " +
      this.newFaultFillcolor +
      "\n\
newFaultVisible = " +
      this.newFaultVisible +
      "\n\
newFaultBlinking = " +
      this.newFaultBlinking +
      "\n\n\
ackFaultEnabled = " +
      this.ackFaultEnabled +
      "\n\
ackFaultFillcolor = " +
      this.ackFaultFillcolor +
      "\n\
ackFaultVisible = " +
      this.ackFaultVisible +
      "\n\
ackFaultBlinking = " +
      this.ackFaultBlinking +
      "\n\n\
newEMSEnabled = " +
      this.newEMSEnabled +
      "\n\
newEMSFillcolor = " +
      this.newEMSEnabled +
      "\n\
newEMSVisible = " +
      this.newEMSVisible +
      "\n\
newEMSBlinking = " +
      this.newEMSBlinking +
      "\n\n\
ackEMSEnabled = " +
      this.ackEMSEnabled +
      "\n\
ackEMSFillcolor = " +
      this.ackEMSFillcolor +
      "\n\
ackEMSVisible = " +
      this.ackEMSVisible +
      "\n\
ackEMSBlinking = " +
      this.ackEMSBlinking +
      "\n\n\
newWRNEnabled = " +
      this.newWRNEnabled +
      "\n\
newWRNFillcolor = " +
      this.newWRNFillcolor +
      "\n\
newWRNVisible = " +
      this.newWRNVisible +
      "\n\
newWRNBlinking = " +
      this.newWRNBlinking +
      "\n\n\
ackWRNEnabled = " +
      this.ackWRNEnabled +
      "\n\
ackWRNFillcolor = " +
      this.ackWRNFillcolor +
      "\n\
ackWRNVisible = " +
      this.ackWRNVisible +
      "\n\
ackWRNBlinking = " +
      this.ackWRNBlinking +
      "\n\n\
NOEnabled = " +
      this.NOEnabled +
      "\n\
NOFillcolor = " +
      this.NOFillcolor +
      "\n\
NOVisible = " +
      this.NOVisible +
      "\n\
NOBlinking = " +
      this.NOBlinking +
      "\n\n\
fillcolorNoBlink = " +
      this.fillcolorNoBlink +
      "\n\
useQuality = " +
      this.useQuality +
      "\n\
strokeColorQualityGood = " +
      this.strokeColorQualityGood +
      "\n\
strokeColorQualityBad = " +
      this.strokeColorQualityBad +
      "\n\
useHand = " +
      this.useHand +
      "\n\
useStroke = " +
      this.useStroke +
      "\n\
useHide = " +
      this.useHide +
      "\n\
"
    );
  };

  AFaultWarning.prototype.getAlarmGroupString = function () {
    return this.AlarmGroup;
  };

  window.AFaultWarning = AFaultWarning; //temp
  emosWS.ESFaultWarning = AFaultWarning;

  function AFaultsWarnings(configuration) {
    this.alarmGroups = configuration["PLACEHOLDER_ALARMGROUPS"].split("; ");
    this.trimAlarmGroups();
    AFaultWarning.call(this, configuration);
  }

  AFaultsWarnings.prototype = Object.create(AFaultWarning.prototype);
  AFaultsWarnings.prototype.constructor = AFaultsWarnings;

  AFaultsWarnings.prototype.trimAlarmGroups = function () {
    try {
      for (var i = 0; i < this.alarmGroups.length; i++) {
        if (this.alarmGroups[i] === "") {
          this.alarmGroups.splice(i, 1);
          i--;
        } else {
          this.alarmGroups[i] = this.alarmGroups[i].replace(".Alarm", "");
        }
      }
    } catch (err) {
      console.log("AFaultsWarnings trimAlarmGroups failed: " + err);
    }
  };

  AFaultsWarnings.prototype.adviseData = function () {
    try {
      for (var i = 0, len = this.alarmGroups.length; i < len; i++) {
        emosWS.advise(
          this.alarmGroups[i],
          this.datachangeListener,
          "",
          emosWS.tagType.Alarm
        );
      }
    } catch (err) {
      console.log("adviseData failed: " + err);
    }
  };

  AFaultsWarnings.prototype.getAlarmGroupString = function () {
    var s = "";
    this.alarmGroups.forEach(function (alg) {
      s += alg + "\n";
    });
    return s;
  };

  window.AFaultsWarnings = AFaultsWarnings; //temp
  emosWS.ESFaultsWarnings = AFaultsWarnings;

  function AColorSwapMulti(configuration) {
    this.conditionFunction = configuration["conditionFunction"];
    this.condition1 = false;
    this.condition2 = false;
    this.condition3 = false;
    this.condition4 = false;
    this.condition5 = false;
    this.condition6 = false;
    this.condition7 = false;
    this.condition8 = false;

    this.useQuality = configuration["PLACEHOLDER_SWAP_USEQUALITY"];
    this.useElse = configuration["PLACEHOLDER_SWAP_USEELSE"];
    this.swapFillcolor = configuration["PLACEHOLDER_SWAP_FILLCOLOR"];
    this.swapStrokecolor = configuration["PLACEHOLDER_SWAP_STROKECOLOR"];
    this.swapVisibility = configuration["PLACEHOLDER_SWAP_VISIBILITY"];
    this.strokeColorQualityGood =
      configuration["PLACEHOLDER_STROKECOLORQUALITYGOOD"];
    this.strokeColorQualityBad =
      configuration["PLACEHOLDER_STROKECOLORQUALITYBAD"];
    this.fillColor1 = configuration["PLACEHOLDER_FILLCOLOR1"];
    this.fillColor2 = configuration["PLACEHOLDER_FILLCOLOR2"];
    this.fillColor3 = configuration["PLACEHOLDER_FILLCOLOR3"];
    this.fillColor4 = configuration["PLACEHOLDER_FILLCOLOR4"];
    this.fillColor5 = configuration["PLACEHOLDER_FILLCOLOR5"];
    this.fillColor6 = configuration["PLACEHOLDER_FILLCOLOR6"];
    this.fillColor7 = configuration["PLACEHOLDER_FILLCOLOR7"];
    this.fillColor8 = configuration["PLACEHOLDER_FILLCOLOR8"];
    this.fillColorElse = configuration["PLACEHOLDER_FILLCOLORELSE"];
    this.strokeColor1 = configuration["PLACEHOLDER_STROKECOLOR1"];
    this.strokeColor2 = configuration["PLACEHOLDER_STROKECOLOR2"];
    this.strokeColor3 = configuration["PLACEHOLDER_STROKECOLOR3"];
    this.strokeColor4 = configuration["PLACEHOLDER_STROKECOLOR4"];
    this.strokeColor5 = configuration["PLACEHOLDER_STROKECOLOR5"];
    this.strokeColor6 = configuration["PLACEHOLDER_STROKECOLOR6"];
    this.strokeColor7 = configuration["PLACEHOLDER_STROKECOLOR7"];
    this.strokeColor8 = configuration["PLACEHOLDER_STROKECOLOR8"];
    this.strokeColorElse = configuration["PLACEHOLDER_STROKECOLORELSE"];
    this.visibility1 = configuration["PLACEHOLDER_VISIBILITY1"];
    this.visibility2 = configuration["PLACEHOLDER_VISIBILITY2"];
    this.visibility3 = configuration["PLACEHOLDER_VISIBILITY3"];
    this.visibility4 = configuration["PLACEHOLDER_VISIBILITY4"];
    this.visibility5 = configuration["PLACEHOLDER_VISIBILITY5"];
    this.visibility6 = configuration["PLACEHOLDER_VISIBILITY6"];
    this.visibility7 = configuration["PLACEHOLDER_VISIBILITY7"];
    this.visibility8 = configuration["PLACEHOLDER_VISIBILITY8"];
    this.visibilityElse = configuration["PLACEHOLDER_VISIBILITYELSE"];
    this.fillColor = null;
    this.strokeColor = null;
    this.visibility = true;
    this.target = configuration["STDPLACEHOLDER_SHAPENAME"];
    ESAnimation3.call(this);
  }
  AColorSwapMulti.prototype = Object.create(ESAnimation3.prototype);
  AColorSwapMulti.prototype.constructor = AColorSwapMulti;

  AColorSwapMulti.prototype.doCondition = function () {
    try {
      var value = emosWS.animationData.stillInit
        ? this.initConditionFunction()
        : this.conditionFunction();
      this.condition1 = value.Condition1;
      this.condition2 = value.Condition2;
      this.condition3 = value.Condition3;
      this.condition4 = value.Condition4;
      this.condition5 = value.Condition5;
      this.condition6 = value.Condition6;
      this.condition7 = value.Condition7;
      this.condition8 = value.Condition8;
    } catch (err) {
      console.log("doCondition failed: " + err);
    }
  };

  AColorSwapMulti.prototype.setColor = function (
    fillColor,
    strokeColor,
    visibility
  ) {
    if (this.swapFillcolor) this.fillColor = fillColor;
    if (this.swapStrokecolor) this.strokeColor = strokeColor;
    if (this.swapVisibility) this.visibility = visibility;
  };
  AColorSwapMulti.prototype.startAnimate = function () {
    var style = {};
    if (this.useQuality && this.qualityGood) {
      this.strokeColor = this.strokeColorQualityGood;
      style["stroke-width"] = this.qualityGood
        ? this.SHAPE.strokeWidth
        : this.strokeWidthBad;
    }

    if (this.condition1) {
      this.setColor(this.fillColor1, this.strokeColor1, this.visibility1);
    } else if (this.condition2) {
      this.setColor(this.fillColor2, this.strokeColor2, this.visibility2);
    } else if (this.condition3) {
      this.setColor(this.fillColor3, this.strokeColor3, this.visibility3);
    } else if (this.condition4) {
      this.setColor(this.fillColor4, this.strokeColor4, this.visibility4);
    } else if (this.condition5) {
      this.setColor(this.fillColor5, this.strokeColor5, this.visibility5);
    } else if (this.condition6) {
      this.setColor(this.fillColor6, this.strokeColor6, this.visibility6);
    } else if (this.condition7) {
      this.setColor(this.fillColor7, this.strokeColor7, this.visibility7);
    } else if (this.condition8) {
      this.setColor(this.fillColor8, this.strokeColor8, this.visibility8);
    } else if (this.useElse) {
      this.setColor(
        this.fillColorElse,
        this.strokeColorElse,
        this.visibilityElse
      );
    }

    if (this.useQuality && !this.qualityGood)
      this.strokeColor = this.strokeColorQualityBad;
    if (this.swapFillcolor && this.fillColor) style["fill"] = this.fillColor;
    if ((this.swapStrokecolor && this.strokeColor) || this.useQuality)
      style["stroke"] = this.strokeColor;
    if (this.swapVisibility)
      style["display"] = this.visibility ? "block" : "none";
    if (this.hideIfQualityBad && !this.qualityGood) style["display"] = "none";
    //setStyle(this.target, style);
    this.setStyle(style);
  };

  emosWS.ESColorSwapMulti = AColorSwapMulti;

  function AColorState(configuration) {
    new emosWS.ESColorSwapMulti({
      conditionFunction: function () {
        var aSize = configuration["conditionFunction"]();
        var Condition1 = aSize < configuration["PLACEHOLDER_LIMIT12"];
        var Condition2 = aSize < configuration["PLACEHOLDER_LIMIT23"];
        var Condition3 = aSize < configuration["PLACEHOLDER_LIMIT34"];
        var Condition4 = aSize < configuration["PLACEHOLDER_LIMIT45"];
        var Condition5 = aSize < configuration["PLACEHOLDER_LIMIT56"];
        var Condition6 = aSize < configuration["PLACEHOLDER_LIMIT67"];
        var Condition7 = aSize < configuration["PLACEHOLDER_LIMIT78"];
        var Condition8 = false;
        return {
          Condition1: Condition1,
          Condition2: Condition2,
          Condition3: Condition3,
          Condition4: Condition4,
          Condition5: Condition5,
          Condition6: Condition6,
          Condition7: Condition7,
          Condition8: Condition8,
        };
      },
      PLACEHOLDER_SWAP_USEQUALITY: configuration["PLACEHOLDER_USEQUALITY"],
      PLACEHOLDER_SWAP_USEELSE: true,
      PLACEHOLDER_SWAP_FILLCOLOR: configuration["PLACEHOLDER_USEFILLCOLOR"],
      PLACEHOLDER_SWAP_STROKECOLOR: configuration["PLACEHOLDER_USESTROKECOLOR"],
      PLACEHOLDER_SWAP_VISIBILITY: configuration["PLACEHOLDER_USEVISIBILITY"],
      PLACEHOLDER_STROKECOLORQUALITYGOOD:
        configuration["PLACEHOLDER_STROKECOLORQUALITYGOOD"],
      PLACEHOLDER_STROKECOLORQUALITYBAD:
        configuration["PLACEHOLDER_STROKECOLORQUALITYBAD"],
      PLACEHOLDER_FILLCOLOR1: configuration["PLACEHOLDER_FILLCOLOR1"],
      PLACEHOLDER_FILLCOLOR2: configuration["PLACEHOLDER_FILLCOLOR2"],
      PLACEHOLDER_FILLCOLOR3: configuration["PLACEHOLDER_FILLCOLOR3"],
      PLACEHOLDER_FILLCOLOR4: configuration["PLACEHOLDER_FILLCOLOR4"],
      PLACEHOLDER_FILLCOLOR5: configuration["PLACEHOLDER_FILLCOLOR5"],
      PLACEHOLDER_FILLCOLOR6: configuration["PLACEHOLDER_FILLCOLOR6"],
      PLACEHOLDER_FILLCOLOR7: configuration["PLACEHOLDER_FILLCOLOR7"],
      PLACEHOLDER_FILLCOLOR8: configuration["PLACEHOLDER_FILLCOLOR8"],
      PLACEHOLDER_FILLCOLORELSE: configuration["PLACEHOLDER_FILLCOLOR8"],
      PLACEHOLDER_STROKECOLOR1: configuration["PLACEHOLDER_STROKECOLOR1"],
      PLACEHOLDER_STROKECOLOR2: configuration["PLACEHOLDER_STROKECOLOR2"],
      PLACEHOLDER_STROKECOLOR3: configuration["PLACEHOLDER_STROKECOLOR3"],
      PLACEHOLDER_STROKECOLOR4: configuration["PLACEHOLDER_STROKECOLOR4"],
      PLACEHOLDER_STROKECOLOR5: configuration["PLACEHOLDER_STROKECOLOR5"],
      PLACEHOLDER_STROKECOLOR6: configuration["PLACEHOLDER_STROKECOLOR6"],
      PLACEHOLDER_STROKECOLOR7: configuration["PLACEHOLDER_STROKECOLOR7"],
      PLACEHOLDER_STROKECOLOR8: configuration["PLACEHOLDER_STROKECOLOR8"],
      PLACEHOLDER_STROKECOLORELSE: configuration["PLACEHOLDER_STROKECOLOR8"],
      PLACEHOLDER_VISIBILITY1: configuration["PLACEHOLDER_VISIBILITY1"],
      PLACEHOLDER_VISIBILITY2: configuration["PLACEHOLDER_VISIBILITY2"],
      PLACEHOLDER_VISIBILITY3: configuration["PLACEHOLDER_VISIBILITY3"],
      PLACEHOLDER_VISIBILITY4: configuration["PLACEHOLDER_VISIBILITY4"],
      PLACEHOLDER_VISIBILITY5: configuration["PLACEHOLDER_VISIBILITY5"],
      PLACEHOLDER_VISIBILITY6: configuration["PLACEHOLDER_VISIBILITY6"],
      PLACEHOLDER_VISIBILITY7: configuration["PLACEHOLDER_VISIBILITY7"],
      PLACEHOLDER_VISIBILITY8: configuration["PLACEHOLDER_VISIBILITY8"],
      PLACEHOLDER_VISIBILITYELSE: configuration["PLACEHOLDER_VISIBILITY8"],
      STDPLACEHOLDER_SHAPENAME: configuration["STDPLACEHOLDER_SHAPENAME"],
    });
  }
  emosWS.ESColorState = AColorState;

  function AColorScript(configuration) {
    this.conditionFunction = configuration["conditionFunction"];
    this.fillColor = null;
    this.strokeColor = null;
    this.visibility = true;
    this.enabled = true;
    this.swapFillcolor = configuration["PLACEHOLDER_SWAP_FILLCOLOR"];
    this.swapStrokecolor = configuration["PLACEHOLDER_SWAP_STROKECOLOR"];
    this.swapVisibility = configuration["PLACEHOLDER_SWAP_VISIBILITY"];
    this.useQuality = configuration["PLACEHOLDER_SWAP_USEQUALITY"];
    this.strokeColorQualityGood =
      configuration["PLACEHOLDER_STROKECOLORQUALITYGOOD"];
    this.strokeColorQualityBad =
      configuration["PLACEHOLDER_STROKECOLORQUALITYBAD"];
    this.target = configuration["STDPLACEHOLDER_SHAPENAME"];
    ESAnimation3.call(this);
  }
  AColorScript.prototype = Object.create(ESAnimation3.prototype);
  AColorScript.prototype.constructor = AColorScript;

  AColorScript.prototype.doCondition = function () {
    try {
      var value = emosWS.animationData.stillInit
        ? this.initConditionFunction()
        : this.conditionFunction();
      this.fillColor = value.Fillcolor;
      this.strokeColor = value.Strokecolor;
      this.visibility = value.Visibility;
      this.enabled = value.Enabled;
    } catch (err) {
      console.log("doCondition failed: " + err);
    }
  };

  AColorScript.prototype.startAnimate = function () {
    var style = {},
      strokeColor = null,
      fillColor = null,
      visibility = null;
    if (this.useQuality && this.qualityGood) {
      strokeColor = this.strokeColorQualityGood;
      style["stroke-width"] = this.qualityGood
        ? this.SHAPE.strokeWidth
        : this.strokeWidthBad;
    }

    if (this.enabled) {
      if (this.swapFillcolor && this.fillColor) fillColor = this.fillColor;
      if (this.swapStrokecolor && this.strokeColor)
        strokeColor = this.strokeColor;
      if (this.swapVisibility && this.visibility !== null)
        visibility = this.visibility ? "block" : "none";
    }
    if (this.useQuality && !this.qualityGood) {
      strokeColor = this.strokeColorQualityBad;
    }

    if (fillColor) style["fill"] = this.fillColor = fillColor;
    if (strokeColor) style["stroke"] = this.strokeColor = strokeColor;
    if (visibility) style["block"] = this.visibility = visibility;

    //setStyle(this.target, style);
    this.setStyle(style);
  };
  emosWS.ESColorScript = AColorScript;

  function ASize(configuration) {
    this.conditionFunction = configuration["conditionFunction"];
    this.postFunction = configuration["postFunction"];
    this.orientation = configuration["PLACEHOLDER_ORIENTATION"];
    var directionReverse = configuration["PLACEHOLDER_DIRECTIONREVERSE"];
    if (this.orientation === "Top" && directionReverse === 0) {
      this.orientation = "Bottom";
    } else if (this.orientation === "Left" && directionReverse === 0) {
      this.orientation = "Right";
    }
    this.target = configuration["STDPLACEHOLDER_SHAPENAME"];
    this.svgElement = getSVGElement(this.target);
    this.useQuality = configuration["PLACEHOLDER_SWAP_USEQUALITY"];
    this.strokeColorQualityGood =
      configuration["PLACEHOLDER_STROKECOLORQUALITYGOOD"];
    this.strokeColorQualityBad =
      configuration["PLACEHOLDER_STROKECOLORQUALITYBAD"];

    this.valueMin = 0;
    this.valueMax = 0;
    this.sizeFactorMin = 0;
    this.sizeFactorMax = 1;
    this.valueLimitMin = this.valueMin;
    this.valueLimitMax = this.valueMax;
    this.value = 0;
    if (this.svgElement) {
      var display = this.svgElement.style["display"];
      this.svgElement.style["display"] = "block";
      this.bbox = this.svgElement.getBBox();
      this.transform = this.svgElement.getAttribute("transform") || "";
      this.svgElement.style["display"] = display;
    }

    ESAnimation.call(this);
  }
  ASize.prototype = Object.create(ESAnimation.prototype);
  ASize.prototype.constructor = ASize;

  ASize.prototype.doCondition = function () {
    try {
      var conditionValue = emosWS.animationData.stillInit
        ? this.initConditionFunction()
        : this.conditionFunction();
      this.value = conditionValue.Value;
      this.valueMin = parseFloat(conditionValue.ValueMin);
      this.valueMax = parseFloat(conditionValue.ValueMax);
      this.sizeFactorMin = parseFloat(conditionValue.SizeFactorMin);
      this.sizeFactorMax = parseFloat(conditionValue.SizeFactorMax);
      this.valueLimitMin = parseFloat(conditionValue.ValueLimitMin);
      this.valueLimitMax = parseFloat(conditionValue.ValueLimitMax);
    } catch (err) {
      console.log("ASize doCondition failed: " + err);
    }
  };

  ASize.prototype.datachangeListenerMore = function () {
    try {
      this.doCondition();
      this.startAnimate();
      this.postFunction();
    } catch (err) {
      console.log("datachangeListenerMore failed: " + err);
    }
  };

  ASize.prototype.startAnimate = function () {
    try {
      if (this.useQuality) {
        var style = {};
        style["stroke"] = this.qualityGood
          ? this.strokeColorQualityGood
          : this.strokeColorQualityBad;
        style["stroke-width"] = this.qualityGood
          ? this.SHAPE.strokeWidth
          : this.strokeWidthBad;
        this.setStyle(style);
      }
    } catch (err) {
      console.log("startAnimate failed: " + err);
    }
    this.startAnimateMore();
  };

  ASize.prototype.startAnimateMore = function () {
    try {
      if (this.isNumber(this.value))
        this.setSize(
          this.value,
          this.valueMin,
          this.valueMax,
          this.valueLimitMin,
          this.valueLimitMax,
          this.sizeFactorMin,
          this.sizeFactorMax,
          this.orientation
        );
    } catch (err) {
      console.log("startAnimateMore failed: " + err);
    }
  };

  ASize.prototype.initializeMore = function () {
    try {
      this.doCondition();
      emosWS.animationData.stillInit = false;
      this.doCondition();
      this.startAnimate();
    } catch (err) {
      console.log("initializeMore failed: " + err);
    }
  };

  ASize.prototype.isNumber = function (n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };

  ASize.prototype.setSize = function (
    value,
    valueMin,
    valueMax,
    valueLimitMin,
    valueLimitMax,
    sizeFactorMin,
    sizeFactorMax,
    orientation
  ) {
    try {
      if (this.shape) {
        if (value < valueMin) {
          value = valueMin;
        } else if (value > valueMax) {
          value = valueMax;
        }

        var scale =
            ((value - valueMin) / (valueMax - valueMin)) *
            (sizeFactorMax - sizeFactorMin),
          scaleX = 1,
          scaleY = 1,
          x = this.SHAPE.deltaX,
          y = this.SHAPE.deltaY,
          bbox = this.bbox;

        if (isNaN(scale)) return;

        switch (orientation) {
          case "Top":
            scaleX = this.SHAPE.scaleX;
            scaleY = this.SHAPE.scaleY = scale;
            y = this.SHAPE.deltaY = bbox.height * (1 - scale);
            break;

          case "Bottom":
            scaleX = this.SHAPE.scaleX;
            scaleY = this.SHAPE.scaleY = scale;
            break;

          case "Right":
            scaleX = this.SHAPE.scaleX = scale;
            scaleY = this.SHAPE.scaleY;
            break;

          case "Left":
            scaleX = this.SHAPE.scaleX = scale;
            scaleY = this.SHAPE.scaleY;
            x = this.SHAPE.deltaX = bbox.width * (1 - scale);
            break;
        }

        this.shape.setAttribute(
          "transform",
          "\
                    translate(" +
            (bbox.x + x) +
            "," +
            (bbox.y + y) +
            ") \
                    scale(" +
            scaleX +
            "," +
            scaleY +
            ") \
                    translate(" +
            -bbox.x +
            "," +
            -bbox.y +
            ") \
                    " +
            this.transform
        );
      }
    } catch (err) {
      console.log("setSize failed: " + err);
    }
  };

  emosWS.ESSize = ASize;

  function APosition(configuration) {
    this.conditionFunction = configuration["conditionFunction"];
    this.postFunction = configuration["postFunction"];
    this.orientation = configuration["PLACEHOLDER_ORIENTATION"];
    this.orientationR = configuration["PLACEHOLDER_ORIENTATIONR"];
    this.orientationFlag = configuration["PLACEHOLDER_ORIENTATIONFLAG"];
    this.expansion = configuration["PLACEHOLDER_EXPANSION"];
    this.useQuality = configuration["PLACEHOLDER_SWAP_USEQUALITY"];
    this.strokeColorQualityGood =
      configuration["PLACEHOLDER_STROKECOLORQUALITYGOOD"];
    this.strokeColorQualityBad =
      configuration["PLACEHOLDER_STROKECOLORQUALITYBAD"];
    this.useHide = configuration["PLACEHOLDER_HIDEIFVALUEEXCESSIVE"];
    this.target = configuration["STDPLACEHOLDER_SHAPENAME"];
    this.svgElement = getSVGElement(this.target);
    this.svgTextElement =
      this.svgElement && this.svgElement.tagName === "text"
        ? this.svgElement
        : getSVGElement(this.target + ".Text");

    this.valueMin = 0;
    this.valueMax = 0;
    this.positionMin = 0;
    this.positionMax = 0;
    this.valueLimitMin = this.valueMin;
    this.valueLimitMax = this.valueMax;
    this.value = 0;
    if (this.svgElement) {
      this.transform = this.svgElement.getAttribute("transform") || "";
      this.maxSize = parseFloat(
        this.svgElement.getAttribute(
          this.orientation === "Top" || this.orientation === "Bottom"
            ? "height"
            : "width"
        )
      );
      this.x = parseFloat(this.svgElement.getAttribute("x"));
      this.y = parseFloat(this.svgElement.getAttribute("y"));
    }
    if (this.svgTextElement) {
      this.textY = parseFloat(this.svgTextElement.getAttribute("y"));
      var tspans = this.svgTextElement.getElementsByTagName("tspan");
      if (typeof tspans[0] !== "undefined") {
        this.svgTextTSpanElement = tspans[0];
        if (this.svgTextTSpanElement)
          this.textX = parseFloat(this.svgTextTSpanElement.getAttribute("x"));
      }
    }

    ESAnimation.call(this);
  }
  APosition.prototype = Object.create(ESAnimation.prototype);
  APosition.prototype = emosWS.fn.emosExtend(
    APosition.prototype,
    ASize.prototype
  );
  APosition.prototype.constructor = APosition;

  APosition.prototype.doCondition = function () {
    try {
      var conditionValue = emosWS.animationData.stillInit
        ? this.initConditionFunction()
        : this.conditionFunction();
      this.value = conditionValue.Value;
      this.valueMin = parseFloat(conditionValue.ValueMin);
      this.valueMax = parseFloat(conditionValue.ValueMax);
      this.positionMin = parseFloat(conditionValue.PositionMin);
      this.positionMax = parseFloat(conditionValue.PositionMax);
      this.valueLimitMin = parseFloat(conditionValue.ValueLimitMin);
      this.valueLimitMax = parseFloat(conditionValue.ValueLimitMax);
      this.Enabled = conditionValue.Enabled;
    } catch (err) {
      console.log("APosition doCondition failed: " + err);
    }
  };

  APosition.prototype.startAnimateMore = function () {
    try {
      if (this.value < this.valueMin || this.value > this.valueMax) {
        if (this.useHide) this.svgElement.setAttribute("display", "none");
      } else {
        if (this.useHide) this.svgElement.setAttribute("display", "block");

        var range = this.valueMax - this.valueMin;
        var MoveLengthMax = this.positionMax - this.positionMin;

        var attribute, vari, variText, textElement;
        if (this.orientation === "Top") {
          attribute = "y";
          vari = this.y;
          variText = this.textY;
          textElement = this.svgTextElement;
        } else {
          attribute = "x";
          vari = this.x;
          variText = this.textX;
          textElement = this.svgTextTSpanElement;
        }

        var d =
          this.positionMin +
          ((this.value - this.valueMin) / range) * MoveLengthMax;
        var moveLength = vari + d;
        var moveLengthText = variText + d;

        //check if svg element is group or path, then uses transform/translate
        if (["g", "path"].indexOf(this.svgElement.tagName) > -1) {
          var x = 0,
            y = 0;
          if (attribute === "x") {
            x = d;
          } else {
            y = d;
          }
          if (!(isNaN(x) || isNaN(y))) {
            this.svgElement.setAttribute(
              "transform",
              "translate(" + x + "," + y + ") " + this.transform
            );
          }
        } else {
          if (!isNaN(moveLength))
            this.svgElement.setAttribute(attribute, moveLength);
          if (this.svgTextElement) {
            if (!isNaN(moveLengthText))
              textElement.setAttribute(attribute, moveLengthText);
          }
        }
      }
    } catch (err) {
      console.log("startAnimateMore failed: " + err);
    }
  };

  emosWS.ESPosition = APosition;

  function ARotation(configuration) {
    this.conditionFunction = configuration["conditionFunction"];
    this.postFunction = configuration["postFunction"];
    this.useHide = configuration["PLACEHOLDER_HIDEIFVALUEEXCESSIVE"];
    this.target = configuration["STDPLACEHOLDER_SHAPENAME"];
    this.svgElement = getSVGElement(this.target);
    this.svgTextElement =
      this.svgElement && this.svgElement.tagName === "text"
        ? this.svgElement
        : getSVGElement(this.target + ".Text");

    this.valueX = 0;
    this.valueXMin = 0;
    this.valueXMax = 0;
    this.positionXMin = 0;
    this.positionXMax = 0;
    this.valueX = 0;
    this.valueYMin = 0;
    this.valueYMax = 0;
    this.positionYMin = 0;
    this.positionYMax = 0;
    this.rotation = 0;
    this.rotationPosX = 0;
    this.rotationPosY = 0;
    this.enabled = true;

    if (this.svgElement) {
      this.x = parseFloat(this.svgElement.getAttribute("x"));
      this.y = parseFloat(this.svgElement.getAttribute("y"));
    }
    if (this.svgTextElement) {
      this.textY = parseFloat(this.svgTextElement.getAttribute("y"));
      var tspans = this.svgTextElement.getElementsByTagName("tspan");
      if (typeof tspans[0] !== "undefined") {
        this.svgTextTSpanElement = tspans[0];
        if (this.svgTextTSpanElement)
          this.textX = parseFloat(this.svgTextTSpanElement.getAttribute("x"));
      }
    }

    ESAnimation.call(this);
  }
  ARotation.prototype = Object.create(ESAnimation.prototype);
  ARotation.prototype = emosWS.fn.emosExtend(
    ARotation.prototype,
    ASize.prototype
  );
  ARotation.prototype.constructor = ARotation;

  ARotation.prototype.doCondition = function () {
    try {
      var conditionValue = emosWS.animationData.stillInit
        ? this.initConditionFunction()
        : this.conditionFunction();
      this.valueX = conditionValue.ValueX;
      this.valueXMin = parseFloat(conditionValue.ValueXMin);
      this.valueXMax = parseFloat(conditionValue.ValueXMax);
      this.positionXMin = parseFloat(conditionValue.PositionXMin);
      this.positionXMax = parseFloat(conditionValue.PositionXMax);
      this.valueY = conditionValue.ValueY;
      this.valueYMin = parseFloat(conditionValue.ValueYMin);
      this.valueYMax = parseFloat(conditionValue.ValueYMax);
      this.positionYMin = parseFloat(conditionValue.PositionYMin);
      this.positionYMax = parseFloat(conditionValue.PositionYMax);
      this.rotation = parseFloat(conditionValue.Rotation);
      this.rotationPosX = parseFloat(conditionValue.RotationPosX);
      this.rotationPosY = parseFloat(conditionValue.RotationPosY);
      this.enabled = conditionValue.Enabled;
    } catch (err) {
      console.log("ARotation doCondition failed: " + err);
    }
  };

  ARotation.prototype.startAnimateMore = function () {
    try {
      if (this.value < this.valueMin || this.value > this.valueMax) {
        if (this.useHide) this.svgElement.setAttribute("display", "none");
      } else {
        if (this.useHide) this.svgElement.setAttribute("display", "block");

        var rangeX = this.valueXMax - this.valueXMin;
        var MoveLengthMaxX = this.positionXMax - this.positionXMin;
        var rangeY = this.valueYMax - this.valueYMin;
        var MoveLengthMaxY = this.positionYMax - this.positionYMin;

        var dX =
          this.positionXMin +
          ((this.valueX - this.valueXMin) / rangeX) * MoveLengthMaxX;
        var moveLengthX = this.x + dX;
        var moveLengthTextX = this.textX + dX;

        var dY =
          this.positionYMin +
          ((this.valueY - this.valueYMin) / rangeY) * MoveLengthMaxY;
        var moveLengthY = this.y + dY;
        var moveLengthTextY = this.textY + dY;

        //check if svg element is group or path, then uses transform/translate
        if (["g", "path"].indexOf(this.svgElement.tagName) > -1) {
          var x = isNaN(dX) ? 0 : dX;
          var y = isNaN(dY) ? 0 : dY;
          var rotation = isNaN(this.rotation) ? 0 : this.rotation;
          var rotationX = isNaN(this.rotationPosX) ? this.x : this.rotationPosX;
          var rotationY = isNaN(this.rotationPosY) ? this.y : this.rotationPosY;
          this.svgElement.setAttribute(
            "transform",
            "translate(" +
              x +
              "," +
              y +
              ") rotate(" +
              rotation +
              " " +
              rotationX +
              "," +
              rotationY +
              ")"
          );
        } else {
          if (!isNaN(moveLengthX))
            this.svgElement.setAttribute("x", moveLengthX);
          if (!isNaN(moveLengthY))
            this.svgElement.setAttribute("y", moveLengthY);
          if (this.svgTextElement) {
            if (!isNaN(moveLengthTextX))
              this.svgTextTSpanElement.setAttribute("x", moveLengthTextX);
            if (!isNaN(moveLengthTextY))
              this.svgTextElement.setAttribute("y", moveLengthTextY);
          }

          var rotationX = isNaN(this.rotationPosX)
            ? this.x + dX
            : this.rotationPosX + dX;
          var rotationY = isNaN(this.rotationPosY)
            ? this.y + dY
            : this.rotationPosY + dY;

          if (!isNaN(this.rotation))
            this.svgElement.setAttribute(
              "transform",
              "rotate(" +
                this.rotation +
                " " +
                rotationX +
                "," +
                rotationY +
                ")"
            );
        }
      }
    } catch (err) {
      console.log("startAnimateMore failed: " + err);
    }
  };

  emosWS.ESRotation = ARotation;

  function AAlarm(configuration) {
    this.conditionFunction = configuration["conditionFunction"];
    this.AlarmGroup = "";
    this.enabled = true;
    this.enabledAck = false;

    this.target = configuration["STDPLACEHOLDER_SHAPENAME"];
    this.svgElement = getSVGElement(this.target);
    if (this.svgElement) {
      this.originalFillColor = this.svgElement.getAttribute("fill");
      this.originalStrokeColor = this.svgElement.getAttribute("stroke");
    }

    this.newEnabled = configuration["PLACEHOLDER_NEW_ENABLED"];
    this.newFillcolor = configuration["PLACEHOLDER_NEW_FILLCOLOR"];
    this.newBlinking = configuration["PLACEHOLDER_NEW_BLINKING"];
    this.newVisible = configuration["PLACEHOLDER_NEW_VISIBLE"];
    this.newProperty = {
      Enabled: this.newEnabled,
      Fillcolor: this.newFillcolor,
      Visible: this.newVisible,
      Blinking: this.newBlinking,
    };
    this.ackEnabled = configuration["PLACEHOLDER_ACK_ENABLED"];
    this.ackFillcolor = configuration["PLACEHOLDER_ACK_FILLCOLOR"];
    this.ackBlinking = configuration["PLACEHOLDER_ACK_BLINKING"];
    this.ackVisible = configuration["PLACEHOLDER_ACK_VISIBLE"];
    this.ackProperty = {
      Enabled: this.ackEnabled,
      Fillcolor: this.ackFillcolor,
      Visible: this.ackVisible,
      Blinking: this.ackBlinking,
    };
    this.NOEnabled = configuration["PLACEHOLDER_NO_ENABLED"];
    this.NOFillcolor = configuration["PLACEHOLDER_NO_FILLCOLOR"];
    this.NOBlinking = configuration["PLACEHOLDER_NO_BLINKING"];
    this.NOVisible = configuration["PLACEHOLDER_NO_VISIBLE"];
    this.NOProperty = {
      Enabled: this.NOEnabled,
      Fillcolor: this.NOFillcolor,
      Visible: this.NOVisible,
      Blinking: this.NOBlinking,
    };
    this.fillcolorNoBlink = configuration["PLACEHOLDER_FILLCOLORNOBLINK"];
    this.useQuality = configuration["PLACEHOLDER_SWAP_USEQUALITY"];
    this.strokeColorQualityGood =
      configuration["PLACEHOLDER_STROKECOLORQUALITYGOOD"];
    this.strokeColorQualityBad =
      configuration["PLACEHOLDER_STROKECOLORQUALITYBAD"];
    this.useHand = configuration["PLACEHOLDER_USEHAND"];
    this.useStroke = configuration["PLACEHOLDER_USESTROKE"];
    this.useHide = configuration["PLACEHOLDER_USEHIDE"];
    this.useVisible = configuration["useVisible"];

    this.fillColor;
    this.swapState = 0; // 0: OFF, 1: ON
    this.interval = 0;
    this.stateMap = {
      0: this.newProperty,
      1: this.ackProperty,
      2: this.NOProperty,
    };
    this.currentProperty = this.stateMap[2];
    this.stateMap = {
      0: this.newProperty,
      1: this.ackProperty,
      2: this.newProperty,
      3: this.ackProperty,
      4: this.newProperty,
      5: this.ackProperty,
      6: this.NOProperty,
      7: this.NOProperty,
    };
    this.currentProperty = this.stateMap[0];
    this.alarmStateList = {};
    this.alarmState = null;
    this.alarmValue = null;
    this.trigger = function () {
      this.animate();
    }.bind(this);

    ESAnimation.call(this);
  }
  AAlarm.prototype = Object.create(ESAnimation.prototype);
  AAlarm.prototype = emosWS.fn.emosExtend(
    AAlarm.prototype,
    AFaultWarning.prototype
  );
  AAlarm.prototype.constructor = AAlarm;

  AAlarm.prototype.toString = function () {
    return (
      "AlarmGroup\n" +
      this.getAlarmGroupString() +
      "\n\
enabled = " +
      this.enabled +
      "\n\
enabledAck = " +
      this.enabledAck +
      "\n\n\
newEnabled = " +
      this.newEnabled +
      "\n\
newFillcolor = " +
      this.newFillcolor +
      "\n\
newVisible = " +
      this.newVisible +
      "\n\
newBlinking = " +
      this.newBlinking +
      "\n\n\
ackEnabled = " +
      this.ackEnabled +
      "\n\
ackFillcolor = " +
      this.ackFillcolor +
      "\n\
ackVisible = " +
      this.ackVisible +
      "\n\
ackBlinking = " +
      this.ackBlinking +
      "\n\n\
NOEnabled = " +
      this.NOEnabled +
      "\n\
NOFillcolor = " +
      this.NOFillcolor +
      "\n\
NOVisible = " +
      this.NOVisible +
      "\n\
NOBlinking = " +
      this.NOBlinking +
      "\n\n\
fillcolorNoBlink = " +
      this.fillcolorNoBlink +
      "\n\
useQuality = " +
      this.useQuality +
      "\n\
strokeColorQualityGood = " +
      this.strokeColorQualityGood +
      "\n\
strokeColorQualityBad = " +
      this.strokeColorQualityBad +
      "\n\
useHand = " +
      this.useHand +
      "\n\
useStroke = " +
      this.useStroke +
      "\n\
useHide = " +
      this.useHide +
      "\n\
useVisible = " +
      this.useVisible +
      "\n\
fillcolorNoBlink = " +
      this.fillcolorNoBlink +
      "\n\
"
    );
  };

  emosWS.ESAlarm = AAlarm;

  function AAlarms(configuration) {
    this.alarmGroups = configuration["PLACEHOLDER_ALARMGROUPS"].split("; ");
    this.trimAlarmGroups();
    AAlarm.call(this, configuration);
  }
  AAlarms.prototype = Object.create(AAlarm.prototype);
  AAlarms.prototype = emosWS.fn.emosExtend(
    AAlarms.prototype,
    AFaultsWarnings.prototype
  );
  AAlarms.prototype.constructor = AAlarms;

  emosWS.ESAlarms = AAlarms;

  function AAlarmPropertyMulti(configuration) {
    this.configuration = configuration;
    this.conditionFunction = configuration["conditionFunction"];
    this.conditionFunction = configuration["conditionFunction"];
    this.fillcolorNoBlink = configuration["PLACEHOLDER_FILLCOLORNOBLINK"];
    this.useElse = configuration["PLACEHOLDER_SWAP_USEELSE"];
    this.useQuality = configuration["PLACEHOLDER_SWAP_USEQUALITY"];
    this.strokeColorQualityGood =
      configuration["PLACEHOLDER_STROKECOLORQUALITYGOOD"];
    this.strokeColorQualityBad =
      configuration["PLACEHOLDER_STROKECOLORQUALITYBAD"];
    this.target = configuration["STDPLACEHOLDER_SHAPENAME"];
    this.svgElement = getSVGElement(this.target);
    this.svgTextElement = getSVGElement(this.target + ".Text");
    if (this.svgElement) {
      this.originalFillColor = this.svgElement.getAttribute("fill");
      this.originalStrokeColor = this.svgElement.getAttribute("stroke");
    }

    this.AlarmGroup = "";
    this.enabled = true;
    this.alarmActionList = [];
    this.alarmElseAction = {};
    this.initAlarmActionList();
    this.currentProperty = {
      Enabled: true,
      Fillcolor: this.originalFillColor,
      Visible: true,
      Blinking: false,
      useVisible: true,
    };
    this.swapState = 0; // 0: OFF, 1: ON
    this.interval = 0;
    this.useStroke = false;
    this.useHand = false;
    this.useHide = false;
    this.stateMap = [];
    this.alarmState = 0;
    this.trigger = function () {
      this.animate();
    }.bind(this);

    ESAnimation.call(this);
  }
  AAlarmPropertyMulti.prototype = Object.create(ESAnimation.prototype);
  AAlarmPropertyMulti.prototype = emosWS.fn.emosExtend(
    AAlarmPropertyMulti.prototype,
    AFaultWarning.prototype
  );
  AAlarmPropertyMulti.prototype.constructor = AAlarmPropertyMulti;

  AAlarmPropertyMulti.prototype.initAlarmActionList = function () {
    for (var i = 1; i < 17; i++) {
      var actionItem = {};
      if (this.configuration["PLACEHOLDER_P" + i + "_CLASS"] !== -1) {
        actionItem = {
          class: this.configuration["PLACEHOLDER_P" + i + "_CLASS"],
          prioFrom: this.configuration["PLACEHOLDER_P" + i + "_PRIOFROM"],
          prioTo: this.configuration["PLACEHOLDER_P" + i + "_PRIOTO"],
          useAck: this.configuration["PLACEHOLDER_P" + i + "_USEACK"],
          useBlink: this.configuration["PLACEHOLDER_P" + i + "_USEBLINK"],
          useNew: this.configuration["PLACEHOLDER_P" + i + "_USENEW"],
          fillColor: this.configuration["PLACEHOLDER_P" + i + "_FILLCOLOR"],
          visibility: this.configuration["PLACEHOLDER_P" + i + "_VISIBILITY"],
        };
        this.alarmActionList.push(actionItem);
      }
    }

    this.alarmElseAction = {
      useBlink: this.configuration["PLACEHOLDER_USEBLINKELSE"],
      fillColor: this.configuration["PLACEHOLDER_FILLCOLORELSE"],
      visibility: this.configuration["PLACEHOLDER_VISIBILITYELSE"],
    };
  };
  AAlarmPropertyMulti.prototype.updateAlarmStateList = function (msg) {
    try {
      if (typeof msg !== "undefined")
        if (typeof msg.classStateRec !== "undefined") {
          var matchedAction = this.useElse ? this.alarmElseAction : null;
          for (var i = 0; i < this.alarmActionList.length; i++) {
            var actionItem = this.alarmActionList[i];
            if (
              (actionItem.useNew &&
                msg.classStateRec.ClassStateNew.charAt(
                  31 - actionItem.class
                ) === "1") ||
              (actionItem.useAck &&
                msg.classStateRec.ClassStateAck.charAt(
                  31 - actionItem.class
                ) === "1")
            ) {
              var prioFrom = msg.classStateRec.prioFrom[actionItem.class];
              var prioTo = msg.classStateRec.prioTo[actionItem.class];

              if (
                !(prioTo < actionItem.prioFrom || actionItem.prioTo < prioFrom)
              ) {
                matchedAction = actionItem;
                break;
              }
            }
          }

          this.currentProperty = matchedAction
            ? {
                Enabled: true,
                Fillcolor: matchedAction.fillColor,
                Visible: matchedAction.visibility,
                Blinking: matchedAction.useBlink,
                useVisible: true,
              }
            : {
                Enabled: true,
                Fillcolor: this.originalFillColor,
                Visible: true,
                Blinking: false,
                useVisible: true,
              };
        }
    } catch (err) {
      console.log("updateAlarmStateList failed: " + err);
    }
  };

  AAlarmPropertyMulti.prototype.doCondition = function () {
    try {
      var value = emosWS.animationData.stillInit
        ? this.initConditionFunction()
        : this.conditionFunction();
      this.AlarmGroup = value.AlarmGroup;
      this.enabled = value.Enabled;
    } catch (err) {
      console.log("doCondition failed: " + err);
    }
  };

  emosWS.ESAlarmPropertyMulti = AAlarmPropertyMulti;

  function ADynamicText(configuration) {
    this.conditionFunction = configuration["conditionFunction"];
    this.Text = "";
    this.Enabled = true;
    this.useQuality = configuration["PLACEHOLDER_SWAP_USEQUALITY"];
    this.strokeColorQualityGood =
      configuration["PLACEHOLDER_STROKECOLORQUALITYGOOD"];
    this.strokeColorQualityBad =
      configuration["PLACEHOLDER_STROKECOLORQUALITYBAD"];
    this.target = configuration["STDPLACEHOLDER_SHAPENAME"];
    this.qualityGood = false;
    this.prefix = configuration["PREFIX"] || "";
    this.suffix = configuration["SUFFIX"] || "";

    ESAnimation.call(this);
  }

  ADynamicText.prototype = Object.create(ESAnimation.prototype);
  ADynamicText.prototype.constructor = ADynamicText;

  ADynamicText.prototype.doCondition = function () {
    try {
      var value = emosWS.animationData.stillInit
        ? this.initConditionFunction()
        : this.conditionFunction();
      value.Text += "";
      this.Text = this.prefix + value.Text + this.suffix;
      this.Enabled = value.Enabled && value.Text !== "null";
    } catch (err) {
      console.log("DynamicText doCondition failed: " + err);
    }
  };

  ADynamicText.prototype.datachangeListenerMore = function () {
    try {
      this.doCondition();
      this.startAnimate();
    } catch (err) {
      console.log("datachangeListenerMore failed: " + err);
    }
  };

  ADynamicText.prototype.startAnimate = function () {
    try {
      if (this.Enabled) {
        var style = {};
        if (this.useQuality && this.qualityGood) {
          style["stroke"] = this.qualityGood
            ? this.strokeColorQualityGood
            : this.strokeColorQualityBad;
        }

        this.setStyle(style);
        this.setText(this.Text);
        //setText(this.target + ".Text", this.Text);
      }
    } catch (err) {
      console.log("Dynamictext startAnimate failed: " + err);
    }
  };

  ADynamicText.prototype.initializeMore = function () {
    try {
      this.doCondition();
      emosWS.animationData.stillInit = false;
      this.doCondition();
      this.startAnimate();
    } catch (err) {
      console.log("initializeMore failed: " + err);
    }
  };

  ADynamicText.prototype.setText = function (value) {
    if (this.shapeTextContent) this.SHAPE.setText(value);
  };

  window.ADynamicText = ADynamicText; //temp
  emosWS.ESDynamicText = ADynamicText;

  function AClickWrite(configuration) {
    this.conditionFunction = configuration["conditionFunction"];
    this.function = configuration["PLACEHOLDER_FUNCTION"];
    this.useStroke = configuration["PLACEHOLDER_USESTROKE"];
    this.useHand =
      configuration["PLACEHOLDER_USESHAND"] ||
      configuration["PLACEHOLDER_USEHAND"];
    this.useHide =
      configuration["PLACEHOLDER_USESHIDE"] ||
      configuration["PLACEHOLDER_USEHIDE"];
    this.target = configuration["STDPLACEHOLDER_SHAPENAME"];
    this.Tag = "";
    this.Value = "";
    this.Enabled = true;
    this.onClickNotInitialized = true;
    this.setValue = this.setValue.bind(this);
    this.callback = { datachangeListener: this.setValue };

    ESAnimation.call(this);
  }
  AClickWrite.prototype = Object.create(ESAnimation.prototype);
  AClickWrite.prototype.constructor = AClickWrite;

  AClickWrite.prototype.adviseData = function () {};

  AClickWrite.prototype.doCondition = function () {
    try {
      var value = this.conditionFunction();
      this.Tag = value.Tag;
      this.Value = String(value.Value);
      this.Enabled = value.Enabled;
    } catch (err) {
      console.log("doCondition failed: " + err);
    }
  };

  AClickWrite.prototype.datachangeListenerMore = function () {
    try {
      this.doCondition();
      this.startAnimate();
    } catch (err) {
      console.log("datachangeListenerMore failed: " + err);
    }
  };

  AClickWrite.prototype.setValue = function () {
    if (this.Enabled) {
      var sGroup = emosWS.tagDestination[this.Tag + ".IO"];
      if (sGroup) {
        sGroup.unregister(this.callback.datachangeListener);
        sGroup.setValue(this.Value);
      } else {
        emosWS.animationData.stillInit = true;
        emosWS.animationData.callback = this.callback;
        emosWS.animationData.param = null;
        emosWS.getTagValue(this.Tag);
        emosWS.animationData.stillInit = false;
      }
    }
  };

  AClickWrite.prototype.onClick = function () {
    this.doCondition();
    this.setValue();
  };

  AClickWrite.prototype.handleOnClick = function () {
    setEvent(
      this.target,
      "click",
      function (e) {
        this.onClick(e);
      }.bind(this),
      this.useHand ? "pointer" : "initial"
    );
  };

  AClickWrite.prototype.initOnClick = function () {
    if (this.onClickNotInitialized) {
      this.handleOnClick();
      if (this.useStroke) {
        setEvent(
          this.target,
          "mouseover",
          function () {
            setStyle(this.target, { "stroke-width": 4 });
          }.bind(this),
          this.useHand ? "pointer" : "default"
        );
        setEvent(
          this.target,
          "mouseout",
          function () {
            setStyle(this.target, { "stroke-width": 1 });
          }.bind(this),
          this.useHand ? "pointer" : "default"
        );
      }
      this.onClickNotInitialized = false;
    }
  };

  AClickWrite.prototype.startAnimate = function () {
    try {
      var self = this;
      if (self.Enabled) {
        if (self.useHide) {
          setStyle(this.target, { display: "block" });
          setStyle(this.target + ".Text", { display: "block" });
        }
      } else {
        if (self.useHide) {
          setStyle(this.target, { display: "none" });
          setStyle(this.target + ".Text", { display: "none" });
        }
        this.setClicked = false;
      }
    } catch (err) {
      console.log("AClickWrite startAnimate failed: " + err);
    }
  };

  AClickWrite.prototype.initializeMore = function () {
    try {
      this.doCondition();
      emosWS.animationData.stillInit = false;
      this.doCondition();
      this.adviseData();
      this.initOnClick();
      if (this.Enable !== null) this.startAnimate();
    } catch (err) {
      console.log("initializeMore failed: " + err);
    }
  };

  emosWS.ESClickWrite = AClickWrite;

  function AClickWriteBit(configuration) {
    this.force = configuration["PLACEHOLDER_FORCE"];
    this.bitMode = configuration["PLACEHOLDER_BITMODE"];
    this.BitNr = "";
    this.tagValue = null;

    AClickWrite.call(this, configuration);
  }
  AClickWriteBit.prototype = Object.create(AClickWrite.prototype);
  AClickWriteBit.prototype.constructor = AClickWriteBit;

  AClickWriteBit.prototype.adviseData = function () {
    try {
      var self = this;
      emosWS.advise(
        this.Tag,
        function (msg) {
          self.tagValue = parseInt(msg.value);
        },
        ""
      );
    } catch (err) {
      console.log("adviseData failed: " + err);
    }
  };

  AClickWriteBit.prototype.doCondition = function () {
    try {
      var value = emosWS.animationData.stillInit
        ? this.initConditionFunction()
        : this.conditionFunction();
      this.Tag = value.Tag;
      this.BitNr = value.BitNr;
      this.Enabled = value.Enabled;
    } catch (err) {
      console.log("doCondition failed: " + err);
    }
  };

  AClickWriteBit.prototype.onClick = function () {
    try {
      if (!this.Enabled) return;

      var newValue,
        mask = 1 << this.BitNr;

      switch (this.bitMode) {
        case "Set":
          newValue = this.tagValue | mask;
          break;

        case "Reset":
          newValue = this.tagValue & ~mask;
          break;

        case "Toggle":
          newValue = this.tagValue ^ mask;
          break;
      }
      emosWS.poke(this.Tag, newValue);
      console.log("setTag " + this.Tag + " = " + newValue);
    } catch (err) {
      console.log("AClickWriteBit onClick failed: " + err);
    }
  };

  emosWS.ESClickWriteBit = AClickWriteBit;

  function AClickSetESVariable(configuration) {
    var variable = configuration["PLACEHOLDER_VARIABLE"];
    this.variableName = null;
    this.ESVariable = null;
    if (typeof variable === "string") {
      this.variableName = variable.split(".")[0];
      this.ESVariable = window[this.variableName];
    } else if (variable instanceof GlobalVariable) {
      this.ESVariable = variable;
    }

    AClickWrite.call(this, configuration);
  }
  AClickSetESVariable.prototype = Object.create(AClickWrite.prototype);
  AClickSetESVariable.prototype.constructor = AClickSetESVariable;

  AClickSetESVariable.prototype.doCondition = function () {
    try {
      var value = emosWS.animationData.stillInit
        ? this.initConditionFunction()
        : this.conditionFunction();
      this.Value = value.Value;
      this.Enabled = value.Enabled;
    } catch (err) {
      console.log("doCondition failed: " + err);
    }
  };

  AClickSetESVariable.prototype.handleOnClick = function () {
    this.SHAPE.addJob(
      function (e) {
        this.onClick(e);
      }.bind(this),
      this.useHand
    );
  };

  AClickSetESVariable.prototype.onClick = function (e) {
    try {
      var value = this.conditionFunction();
      if (this.ESVariable instanceof GlobalVariable) {
        if (
          !(
            emosWS.clickData.event === e &&
            emosWS.clickData.param === this.ESVariable
          )
        ) {
          if (value.Enabled) {
            //emosWS.listenGlobalVariablesChange();
            emosWS.clickData.event = e;
            emosWS.clickData.param = this.ESVariable;
            this.ESVariable.value = value.Value;
            //emosWS.callbackGlobalVariablesChange();
          }
        }
      } else {
        this.ESVariable = value.Value;
      }
    } catch (err) {
      console.error("AClickSetESVariable onClick failed: " + err);
    }
  };

  emosWS.ESClickSetESVariable = AClickSetESVariable;

  function AClickSetJSVariable(configuration) {
    new AClickSetESVariable({
      conditionFunction: function () {
        var condition = configuration["conditionFunction"]();
        var Value = condition.Value;
        var Enabled = condition.Value;
        return { Value: Value, Enabled: Enabled };
      },
      PLACEHOLDER_VARIABLE: configuration["PLACEHOLDER_VARIABLE"],
      PLACEHOLDER_TYPE: configuration["PLACEHOLDER_TYPE"],
      PLACEHOLDER_USESTROKE: configuration["PLACEHOLDER_USESTROKE"],
      PLACEHOLDER_USEHAND: configuration["PLACEHOLDER_USEHAND"],
      PLACEHOLDER_USEHIDE: configuration["PLACEHOLDER_USEHIDE"],
      STDPLACEHOLDER_SHAPENAME: configuration["STDPLACEHOLDER_SHAPENAME"],
    });
  }
  emosWS.ESClickSetJSVariable = AClickSetJSVariable;
  /* emosWS (instance of a singleton class), provides all APIs to communicate
   * with WebSocket server
   *
   */

  var ADiagnosisCommon = (function () {
    function getObjectType(key) {
      return key.substr(key.indexOf("-") + 1);
    }
    return {
      getObjectType: getObjectType,
    };
  })();
  window.ADiagnosisCommon = ADiagnosisCommon;

  var AtimerTypes = {
    Second: 0,
    Minute: 1,
    SiemensDate: 3,
    SiemensTimeOfDay: 4,
    SiemensTime: 5,
    SiemensS5Time: 6,
    SiemensDateAndTime: 7,
  };

  function AAlarmClient(parent, data, alarmGroup, tab) {
    this.parent = parent;
    this.data = data;
    this.alarmGroup = alarmGroup;
    //this.visible = this.data.Visible === "undefined" ? true : this.data.Visible === "2";
    this.tab = tab;
    this.table = null;
    //if (this.visible)
    this.init();
  }

  AAlarmClient.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      var durationId = getElementGlobalID();
      var tableId = getElementGlobalID();
      var body = $(
        "<div class='DiagnosisAlarmClient' id='" +
          id +
          "'>" +
          "<table class='DiagnosisAlarmTable' id='" +
          tableId +
          "'>" +
          "<col width='80%'>" +
          "<col width='20%'>" +
          "<tr>" +
          "<th id='" +
          textId +
          "'> Text</th>" +
          "<th id='" +
          durationId +
          "'> Duration</th>" +
          "</tr>" +
          "</table>" +
          "</div>"
      );
      body.appendTo(this.parent);
      this.table = document.getElementById(tableId);
      this.table.id = tableId;
      var text = document.getElementById(textId);
      var duration = document.getElementById(durationId);
      this.getHeaderText("T04_Text", text);
      this.getHeaderText("T04_Duration", duration);
      emosWS.sendAdviseAlarmText(
        this.alarmGroup,
        emosWS.getLanguage(),
        this.datachangeListener.bind(this),
        ""
      );
      emosWS.addEventListener("language", this.onLanguage.bind(this));
    } catch (err) {
      console.log("AlarmClient init failed: " + err);
    }
  };

  AAlarmClient.prototype.onLanguage = function () {
    this.clearTable();
  };

  AAlarmClient.prototype.clearTable = function () {
    for (var i = 1; i < this.table.rows.length; i++) {
      this.table.deleteRow(i);
    }
  };

  AAlarmClient.prototype.getHeaderText = function (textID, header) {
    emosWS.sendAdviseText(
      textID,
      "name",
      function (msg, iheader) {
        if (msg.value !== "") iheader.textContent = msg.value;
      },
      header
    );
  };

  AAlarmClient.prototype.getStyleClass = function (msg) {
    return msg.classID === "1" ? "alarmTable alarm" : "alarmTable warning";
  };

  AAlarmClient.prototype.getTabStyleClass = function (msg) {
    return msg.classID === "1"
      ? "DiagnosisPageTextAlarm"
      : "DiagnosisPageTextWarning";
  };

  AAlarmClient.prototype.datachangeListener = function (msg) {
    try {
      if (msg.type === "alarmText" && msg.tagname !== "internal") {
        if (msg.alarmType === "3RTN") {
          this.updateTable(msg);
        } else {
          this.addTableRow(msg);
        }

        if (this.table.rows.length === 1) {
          this.tab.className = "DiagnosisPageTextNormal";
        }

        console.log(
          "updateTable Table " +
            this.table.id +
            " / rows: " +
            this.table.rows.length
        );
      } else if (msg.type === "dataChange") {
        //console.log("alarm msg dataChange!");
      }
    } catch (err) {
      console.log("AlarmClient datachangeListener failed: " + err);
    }
  };

  AAlarmClient.prototype.updateTable = function (msg) {
    for (var i = 1; i < this.table.rows.length; i++) {
      var myRow = this.table.rows[i];
      if (
        myRow.msg.alarmGroup === msg.alarmGroup &&
        myRow.msg.alarmType === "1NEW"
      ) {
        this.table.deleteRow(i);
      }
    }
  };

  AAlarmClient.prototype.addTableRow = function (msg) {
    var newDate = this.getLocalTime(msg.date, msg.time);
    msg.date = newDate[0];
    msg.time = newDate[1];
    msg.dateTime = msg.date + " " + msg.time;
    msg.beginTime = this.convertToTimestamp(msg.date, msg.time);
    var row = this.table.insertRow(1);
    row.className = this.getStyleClass(msg);
    this.tab.className = this.getTabStyleClass(msg);
    var cell1 = row.insertCell(0);
    var cell2 = row.insertCell(1);
    cell1.textContent = msg.alarmText;
    cell2.textContent = this.convertToDate(msg.beginTime);
    row.msg = msg;
  };

  AAlarmClient.prototype.getLocalTime = function (date, time) {
    try {
      if (date === "") {
        return ["", ""];
      }

      var dateList = date.split(".");
      var timeList = time.split(":");
      var secondList = timeList[2].split(",");
      var newDate = new Date(
        dateList[1] +
          "/" +
          dateList[0] +
          "/" +
          dateList[2] +
          " " +
          timeList[0] +
          ":" +
          timeList[1] +
          ":" +
          secondList[0] +
          " UTC"
      );
      var iDate = newDate.getDate();
      iDate = iDate < 10 ? "0" + iDate : iDate;
      var iMonth = newDate.getMonth() + 1;
      iMonth = iMonth < 10 ? "0" + iMonth : iMonth;
      var iHours = newDate.getHours();
      iHours = iHours < 10 ? "0" + iHours : iHours;
      var iMinutes = newDate.getMinutes();
      iMinutes = iMinutes < 10 ? "0" + iMinutes : iMinutes;
      var iSeconds = newDate.getSeconds();
      iSeconds = iSeconds < 10 ? "0" + iSeconds : iSeconds;
      var oDate = newDate.getFullYear() + "-" + iMonth + "-" + iDate;
      var oTime =
        iHours + ":" + iMinutes + ":" + iSeconds + "," + secondList[1];
      return [oDate, oTime];
    } catch (err) {
      console.log("getLocalTime() failed: " + err);
    }
  };

  AAlarmClient.prototype.convertToDate = function (time) {
    try {
      if (time === "") {
        return "";
      }
      var current = new Date().getTime();
      var totalSec = parseInt((current - time) / 1000);
      var days = parseInt(totalSec / 86400);
      var hours = parseInt(totalSec / 3600) % 24;
      var minutes = parseInt(totalSec / 60) % 60;
      var seconds = totalSec % 60;
      //return days + ":" + hours + ":" + minutes + ":" + seconds;
      return (
        days +
        ":" +
        (hours < 10 ? "0" + hours : hours) +
        ":" +
        (minutes < 10 ? "0" + minutes : minutes) +
        ":" +
        (seconds < 10 ? "0" + seconds : seconds)
      );
    } catch (err) {
      console.log("convertToDate() failed: " + err);
    }
  };

  AAlarmClient.prototype.convertToTimestamp = function (date, time) {
    try {
      if (date === "") {
        return "";
      }

      var dateList = date.split("-");
      var timeList = time.split(":");
      var secondList = timeList[2].split(",");
      return new Date(
        dateList[1] +
          "/" +
          dateList[2] +
          "/" +
          dateList[0] +
          " " +
          timeList[0] +
          ":" +
          timeList[1] +
          ":" +
          secondList[0]
      ).getTime();
      return new Date(date + " " + time);
    } catch (err) {
      console.log("convertToTime() failed: " + err);
    }
  };

  var AGeneralElement = function (parent, data) {
    var id = getElementGlobalID();
    var body = $(
      "<div class='DiagnosisGerneralElement' id='" +
        id +
        "'>" +
        "<svg width='100%' height='20'>" +
        "<rect width='100%' height='20' style='fill:white;stroke-width:1;stroke:grey' />" +
        "<text x='5' y='15' fill='black'>" +
        data.Text +
        "</text>" +
        "</svg>" +
        "</div>"
    );
    body.appendTo(parent);
  };

  function ADiagnosisElement(param) {
    this.data = param.data;
    this.writable = param.writable;
    this.panel = null;
    this.visibleRight = parseInt(this.data.VisibleAtRight);
    this.visibleOPC = this.data.VisibleOPCID;
    this.userRight = parseInt(this.data.UserRight);
    this.UNKOWN = "???";
    this.visible = true;
    this.opcvisible = true;
    this.hasPaintShopRight = true;

    this.initialize();
  }

  ADiagnosisElement.prototype.getUnitSymbol = function () {
    switch (this.unit) {
      case emosWS.unitID.Metric:
        return " " + this.data.UnitMetric;
      case emosWS.unitID.UnitImperial:
        return " " + this.data.UnitImperial;
      case emosWS.unitID.UnitLocale:
        return " " + this.data.UnitLocale;
      default:
        return "";
    }
  };

  ADiagnosisElement.prototype.updateView = function () {
    try {
      if (this.visibleRight) {
        this.hasPaintShopRight = emosWS.login.au.hasPaintShopRight(
          this.visibleRight
        );
        this.setVisibility();
        //this.panel.get(0).style.visibility = emosWS.login.au.hasPaintShopRight(this.visibleRight) ? "visible" : "hidden";
      }
      if (this.writable) {
        this.updateWrite();
      }
    } catch (err) {
      console.log(this.constructor.name + ": updateView failed: " + err);
    }
  };

  ADiagnosisElement.prototype.initialize = function () {
    this.init();
    this.afterInit();
  };

  ADiagnosisElement.prototype.init = function () {};

  ADiagnosisElement.prototype.updateWrite = function () {};

  ADiagnosisElement.prototype.unitListener = function () {};

  ADiagnosisElement.prototype.getValue = function (value) {
    try {
      /*var
             d = this.data,
             factor = 1;
             if (d.FactorPLC) {
             factor = this.unit === emosWS.unitID.Metric ? d.FactorMetric :
             (this.unit === emosWS.unitID.UnitImperial ? d.FactorImperial : d.FactorLocale);
             return value * d.FactorPLC * factor;
             }*/
      return value;
    } catch (err) {
      console.error("[ADiagnosisElement getValue] : " + err);
      return value;
    }
  };

  ADiagnosisElement.prototype.adviseProperty = function (
    plctag,
    callback,
    param
  ) {
    emosWS.advise(
      plctag,
      function (msg, p) {
        try {
          if (msg.value) {
            var v = msg.value,
              d = this.data;
            d.Precision = v.disp_prec || d.Precision;
            if (v.met_baseunit !== this.UNKOWN)
              d.UnitMetric = v.met_baseunit || d.UnitMetric;
            if (v.imp_baseunit !== this.UNKOWN)
              d.UnitImperial = v.imp_baseunit || d.UnitImperial;
            if (v.loc_baseunit !== this.UNKOWN)
              d.UnitLocale = v.loc_baseunit || d.UnitLocale;
            d.FactorMetric = v.met_factor || d.FactorMetric;
            d.FactorImperial = v.imp_factor || d.FactorImperial;
            d.FactorLocale = v.loc_factor || d.FactorImperial;
            d.FactorPLC = v.plc_factor;
            d.TextKey = v.textkey;
            if (d.ByteInputMin) d.ByteInputMin = v.input_min || d.ByteInputMin;
            if (d.ByteInputMax) d.ByteInputMax = v.input_max || d.ByteInputMax;
            if (d.IntInputMin) d.IntInputMin = v.input_min || d.IntInputMin;
            if (d.IntInputMax) d.IntInputMax = v.input_max || d.IntInputMax;
            if (d.RealInputMin) d.RealInputMin = v.input_min || d.RealInputMin;
            if (d.RealInputMax) d.RealInputMax = v.input_max || d.RealInputMax;
            callback(msg, p);
          }
        } catch (err) {
          console.error("[ADiagnosisElement adviseProperty callback] : " + err);
        }
      }.bind(this),
      param,
      emosWS.tagType.Property
    );
  };

  ADiagnosisElement.prototype.afterInit = function () {
    this.updateView();
    if (!(isNaN(this.userRight) && isNaN(this.visibleRight))) {
      emosWS.addEventListener("UserRight", this.updateView.bind(this));
    }

    if (this.data.VisibleOPCID && this.data.VisibleOPCID !== "") {
      this.parseVisibilityOPCTags(
        this.data.VisibleOPCID,
        function (msg) {
          this.opcvisible = GetAsBoolean(msg.value);
          this.setVisibility();
        }.bind(this)
      );
    }
    emosWS.addEventListener(
      "unit",
      function (unitID) {
        this.unit = unitID;
        this.unitListener(unitID);
      }.bind(this)
    );
  };

  ADiagnosisElement.prototype.parseVisibilityOPCTags = function (s, callback) {
    /*
     * Formular Parser for Visibility OPC Tags
     * It is now possible to input more then one OPC tags for the Visibility OPC Tag field.
     * The tags can connect with OR (use the â|â symbol) and AND (use the â&â symbol)
     * To invert values, use NOT in front of the visibility tag: ("NOT SB.S2436_OffShift")
     * Also it is possible to use bracket with no limit.
     *
     * Example:
     * SB.S7311_ILM1 & SB.S7312_ILM2 & (SB.S7313_ILM3 | SB.S7314_ILM4) & NOT SB.S7315_ILM5
     */

    //replace: & -> && , | -> || , NOT -> !
    [
      [" & ", " && "],
      [" | ", " || "],
      ["NOT ", "! "],
    ].forEach(function (pair) {
      s = s.split(pair[0]).join(pair[1]);
    });

    //get tags
    var tagMap = {};
    s.split(/[ &|!\(\)]/).forEach(function (tag) {
      if (tag !== "") {
        tagMap[tag] = null;
      }
    });

    //when data comming, parse string to value and callback if possible
    var parseValues = function (itag, ivalue) {
      tagMap[itag] = ivalue;

      //check if all tag values are available, else quit.
      for (var tag in tagMap) {
        if (tagMap[tag] === null) return;
      }

      //then start parsing values: in string s, relacing the tag by its value
      var parseString = s;
      for (var tag in tagMap) {
        parseString = parseString.replace(tag, tagMap[tag]);
      }

      //then eval the string to get value and callback
      var value = true;
      try {
        value = eval(parseString);
        callback({ value: value });
      } catch (e) {}
    };

    //advise data
    for (var tag in tagMap) {
      emosWS.advise(
        this.plc + "." + tag,
        function (msg, mytag) {
          parseValues(mytag, GetAsBoolean(msg.value));
        },
        tag,
        emosWS.tagType.IO
      );
    }
  };

  ADiagnosisElement.prototype.setVisibility = function () {
    this.visible = this.opcvisible && this.hasPaintShopRight;
    this.panel.get(0).style.visibility = this.visible ? "visible" : "hidden";
  };

  function ADiagnosisText(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: { parent: this.diagnosisWindow.divTypes.LRLeft, css: "DiagnosisText" },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisText",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextLong",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.dataText = this.data.Text === "" ? "." : this.data.Text;
    this.plctag = "";
    this.text = "";
    ADiagnosisElement.call(this, { data: data });
  }
  ADiagnosisText.prototype = Object.create(ADiagnosisElement.prototype);
  ADiagnosisText.prototype.constructor = ADiagnosisText;

  ADiagnosisText.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      if (typeof this.data.VisibleOPCID !== "undefined") {
        if (this.data.VisibleOPCID !== "") {
          this.plctag =
            this.data.VisibleOPCID === ""
              ? ""
              : this.plc + "." + this.data.OPCID;
        }
      }

      var properties = this.positionClass[this.data.Position];
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          //"<p id='" + textId + "'>" + data.Text + "</p>" +
          "<p id='" +
          textId +
          "'>" +
          this.dataText +
          "</p>" +
          "</div>"
      ));
      //body.appendTo(properties.parent);
      body.appendTo(this.parentDiv);
      this.text = document.getElementById(textId);
      if (this.plctag !== "") {
        emosWS.advise(
          this.plctag,
          function (msg) {
            try {
              var visible = GetAsBoolean(msg.value);
              this.text.style.visibility = visible ? "visible" : "hidden";
            } catch (err) {
              console.log("DiagnosisText datachangeListener failed: " + err);
            }
          }.bind(this),
          "",
          emosWS.tagType.IO
        );
      }

      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
    } catch (err) {
      console.log("DiagnosisText init failed: " + err);
    }
  };

  emosWS.ADiagnosisText = ADiagnosisText;

  function APageControl(parent, data, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.diagnosisWindow = diagnosisWindow;

    this.init();
  }

  APageControl.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var body = $(
        "<div class='DiagnosisPageControl' id='" + id + "'><ul></ul></div>"
      );
      body.appendTo(this.parent);
      var tabs = body.tabs();
      var ul = tabs.find("ul");
      var tabid = 0;
      //for (var key in this.data) {
      var keys = sortHashArray(this.data);
      for (var i = keys.length - 1; i > -1; i--) {
        var key = keys[i];
        var tabData = this.data[key];
        if (typeof tabData === "object") {
          //console.info("[APageControl] " + key);
          tabid++;
          var tabID = getElementGlobalID();
          var objectType = ADiagnosisCommon.getObjectType(key);
          var tabTitle = "";
          switch (objectType) {
            case "AddPageTab":
              tabTitle = tabData.Text;
              break;
            default: //Messages
              tabTitle = objectType;
              tabData.TextID = "Messages";
              break;
          }
          var tabTextId = getElementGlobalID();
          $(
            "<li><a href='#" +
              tabID +
              "'><span id='" +
              tabTextId +
              "'>" +
              tabTitle +
              "</span></a></li>"
          ).prependTo(ul);
          var tab = $(
            "<div class='DiagnosisPageBlank' id='" + tabID + "'></div>"
          );
          tab.appendTo(tabs);
          var tabText = document.getElementById(tabTextId);
          emosWS.sendAdviseText(
            this.diagnosisWindow.getTextPrefix() + tabData.TextID,
            "name",
            function (msg, itabText) {
              if (msg.value !== "") itabText.textContent = msg.value;
            },
            tabText
          );
          if (!tabData.Visible || tabData.Visible === "2") {
            this.diagnosisWindow.appendPage(
              tab,
              tabData,
              tabText,
              parseInt(tabData.VisibleAtRight || "0"),
              tabid,
              tabs
            );
          }
        }
      }
      tabs.tabs("refresh");
      tabs.tabs({ active: 0 });
    } catch (err) {
      console.log("PageControl failed: " + err);
    }
  };

  emosWS.PageControl = APageControl;

  /* List of color used in Diagnosis elements
   *
   * @type type
   */
  var AcolorList = {
    G: "#00FF00",
    R: "red",
    X: "black",
    B: "blue",
    O: "lightgrey",
    P: "pink",
    Y: "yellow",
  };

  function ATopTextLED(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      M: "DiagnosisTopTextLEDMIDDLE",
      L: "DiagnosisTopTextLEDLEFT",
      R: "DiagnosisTopTextLEDRIGHT",
    };
    this.plctag = this.plc + "." + this.data.OPCID;
    this.led = this.border = this.text = null;
    ADiagnosisElement.call(this, { data: data });
  }
  ATopTextLED.prototype = Object.create(ADiagnosisElement.prototype);
  ATopTextLED.prototype.constructor = ATopTextLED;

  ATopTextLED.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var ledId = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var body = (this.panel = $(
        "<div class='" +
          this.positionClass[this.data.Position] +
          "' id='" +
          id +
          "'>" +
          "<svg width='100%' height='20'>" +
          "<rect id='" +
          borderId +
          "' width='100%' height='20' style='fill:white;stroke-width:1;stroke:grey' />" +
          "<text id='" +
          textId +
          "' x='5' y='15' fill='black'>" +
          this.data.Text +
          "</text>" +
          "<circle id='" +
          ledId +
          "' cx='93%' cy='10' r='7' stroke='black' stroke-width='1' fill='orange'/>" +
          "</svg>" +
          "</div>"
      ));
      body.appendTo(this.parent);
      this.led = document.getElementById(ledId);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
    } catch (err) {
      console.log("TopTextLED init failed: " + err);
    }
  };

  ATopTextLED.prototype.datachangeListener = function (msg) {
    try {
      var value = GetAsBoolean(msg.value);
      var fillColor = AcolorList[value ? this.data.OnLED : this.data.OffLED];
      this.led.setAttribute("fill", fillColor);
    } catch (err) {
      console.log("TopTextLED datachangeListener failed: " + err);
    }
  };
  emosWS.ATopTextLED = ATopTextLED;

  function ADiagnosisSetpointRampBar(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: { parent: this.diagnosisWindow.divTypes.LMRLeft, css: "DiagnosisBar" },
      M: {
        parent: this.diagnosisWindow.divTypes.LMRMiddle,
        css: "DiagnosisBar",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LMRRight,
        css: "DiagnosisBar",
      },
    };
    this.min = 0;
    this.max = 100;
    this.ymin = 2; //15;
    this.percent0 = 80; //67;
    this.plctag = this.plc + "." + this.data.OPCID;
    this.plctagRamp = this.plc + "." + this.data.OPCRampID;
    this.visibleOPC = this.plc + "." + this.data.OPCRampVisibleID;
    this.opcvisible = true;
    this.parentDiv =
      this.numberValue =
      this.bar =
      this.lineValue =
      this.lineValue2 =
      this.lineValueR =
      this.lineValueR2 =
      this.text =
      this.number =
      this.numberR =
      this.unitText =
        null;
    this.unit = emosWS.getUnit();
    this.panel = null;
    this.init();
  }

  ADiagnosisSetpointRampBar.prototype.getBarValue = function (numberValue) {
    if (numberValue < this.min) {
      numberValue = this.min;
    } else if (numberValue > this.max) {
      numberValue = this.max;
    }

    var p =
      this.ymin +
      ((100 - ((numberValue - this.min) / (this.max - this.min)) * 100) *
        this.percent0) /
        100 +
      "%";
    return p;
  };

  ADiagnosisSetpointRampBar.prototype.getBarDegreeText = function (percent) {
    return (
      "- " +
      (this.min + ((this.max - this.min) * percent) / 100) +
      this.unitText
    );
  };

  ADiagnosisSetpointRampBar.prototype.getUnitSymbol = function () {
    switch (this.unit) {
      case emosWS.unitID.Metric:
        return " " + this.data.UnitMetric;
      case emosWS.unitID.UnitImperial:
        return " " + this.data.UnitImperial;
      case emosWS.unitID.UnitLocale:
        return " " + this.data.UnitLocale;
      default:
        return "";
    }
  };

  ADiagnosisSetpointRampBar.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var svgMainId = getElementGlobalID();
      var numberId = getElementGlobalID();
      var barId = getElementGlobalID();
      var textId = getElementGlobalID();
      var lineValueId = getElementGlobalID();
      var lineValueId2 = getElementGlobalID();
      var barText0Id = getElementGlobalID();
      var barText25Id = getElementGlobalID();
      var barText50Id = getElementGlobalID();
      var barText75Id = getElementGlobalID();
      var barText100Id = getElementGlobalID();
      var svgRampId = getElementGlobalID();
      var number2Id = getElementGlobalID();
      var bar2Id = getElementGlobalID();
      var line2ValueId = getElementGlobalID();
      var line2ValueId2 = getElementGlobalID();
      this.parentDiv = this.parent.getDiv(
        this.positionClass[this.data.Position].parent
      );
      var properties = this.positionClass[this.data.Position];
      this.unitText = this.getUnitSymbol();
      //var writeRect = writable ? "<rect width='20' height='20' x='180' style='fill:lightgrey;'/>" : "";
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisRampBarTextSVG'>" +
          "<text id='" +
          textId +
          "' x='50%' y='24px' fill='black' text-anchor='middle' font-weight='bold'>" +
          this.data.Text +
          "</text>" +
          "</svg>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisRampBarSVG' id='" +
          svgRampId +
          "'>" +
          //"<rect id='" + bar2Id + "' x='58%' y='" + ymin + "%' width='40%' height='" + percent0 + "%' style='fill:lightgrey;stroke-width:1;stroke:black' />" +
          "<rect class='DiagnosisRampBar' id='" +
          bar2Id +
          "' x='58%' y='" +
          this.ymin +
          "%' width='40%' height='" +
          this.percent0 +
          "%' />" +
          "<line id='" +
          line2ValueId +
          "' x1='58.5%' y1='15%' x2='97.5%' y2='15%' style='stroke-width:5;stroke:#00FF00'/>" +
          "<line id='" +
          line2ValueId2 +
          "' x1='58%' y1='15%' x2='98%' y2='15%' style='stroke-width:1;stroke:black'/>" +
          "<rect x='8%' width='90%' height='15' y='87%' style='fill:white;stroke-width:0.5;stroke:grey'/>" +
          "<text id='" +
          number2Id +
          "' x='50%' y='93%' text-anchor='right' fill='orange'>" +
          this.numberValue +
          "</text>" +
          "</svg>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisRampBarSVG' id='" +
          svgMainId +
          "'>" +
          //"<text id='" + textId + "' x='50%' y='10%' fill='black' text-anchor='middle' font-weight='bold'>" + data.Text + "</text>" +
          //"<rect id='" + barId + "' x='1%' y='" + ymin + "%' width='40%' height='" + percent0 + "%' style='fill:lightgrey;stroke-width:1;stroke:black' />" +
          "<rect class='DiagnosisRampBar' id='" +
          barId +
          "' x='1%' y='" +
          this.ymin +
          "%' width='40%' height='" +
          this.percent0 +
          "%' />" +
          "<line id='" +
          lineValueId +
          "' x1='1.5%' y1='15%' x2='40.5%' y2='15%' style='stroke-width:5;stroke:yellow'/>" +
          "<line id='" +
          lineValueId2 +
          "' x1='1%' y1='15%' x2='41%' y2='15%' style='stroke-width:1;stroke:black'/>" +
          "<rect x='1%' width='90%' height='15' y='87%' style='fill:white;stroke-width:0.5;stroke:grey'/>" +
          "<text id='" +
          numberId +
          "' x='3%' y='93%' text-anchor='left' fill='orange'>" +
          this.numberValue +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText0Id +
          "' x='40%' y='83.5%'>" +
          this.getBarDegreeText(0) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText25Id +
          "' x='40%' y='63.5%'>" +
          this.getBarDegreeText(25) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText50Id +
          "' x='40%' y='43.5%'>" +
          this.getBarDegreeText(50) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText75Id +
          "' x='40%' y='23.5%'>" +
          this.getBarDegreeText(75) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText100Id +
          "' x='40%' y='3.5%'>" +
          this.getBarDegreeText(100) +
          "</text>" +
          "</svg>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.numberR = document.getElementById(number2Id);
      this.text = document.getElementById(textId);
      this.bar = document.getElementById(barId);
      this.lineValue = document.getElementById(lineValueId);
      this.lineValue2 = document.getElementById(lineValueId2);
      this.lineValueR = document.getElementById(line2ValueId);
      this.lineValueR2 = document.getElementById(line2ValueId2);
      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.advise(
        this.plctagRamp,
        this.datachangeRampListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      emosWS.advise(
        this.visibleOPC,
        function (msg) {
          this.opcvisible = GetAsBoolean(msg.value);
          this.setVisibility();
        }.bind(this),
        "",
        emosWS.tagType.IO
      );
    } catch (err) {
      console.log("DiagnosisBar init failed: " + err);
    }
  };

  ADiagnosisSetpointRampBar.prototype.setVisibility = function () {
    this.panel.get(0).style.display = this.opcvisible ? "block" : "none";
  };

  ADiagnosisSetpointRampBar.prototype.datachangeListener = function (msg) {
    try {
      this.numberValue = GetAsInteger(msg.value);
      this.number.setAttribute("fill", "black");
      this.number.textContent = this.numberValue + this.getUnitSymbol();
      var lineValuePosition = this.getBarValue(this.numberValue);
      this.lineValue.setAttribute("y1", lineValuePosition);
      this.lineValue.setAttribute("y2", lineValuePosition);
      this.lineValue2.setAttribute("y1", lineValuePosition);
      this.lineValue2.setAttribute("y2", lineValuePosition);
    } catch (err) {
      console.log("DiagnosisSetpointRampBar datachangeListener failed: " + err);
    }
  };

  ADiagnosisSetpointRampBar.prototype.datachangeRampListener = function (msg) {
    try {
      var numberValue = GetAsInteger(msg.value);
      this.numberR.setAttribute("fill", "black");
      this.numberR.textContent = numberValue + this.getUnitSymbol();
      var lineValuePosition = this.getBarValue(numberValue);
      this.lineValueR.setAttribute("y1", lineValuePosition);
      this.lineValueR.setAttribute("y2", lineValuePosition);
      this.lineValueR2.setAttribute("y1", lineValuePosition);
      this.lineValueR2.setAttribute("y2", lineValuePosition);
    } catch (err) {
      console.log(
        "DiagnosisSetpointRampBar datachangeRampListener failed: " + err
      );
    }
  };
  emosWS.ADiagnosisSetpointRampBar = ADiagnosisSetpointRampBar;

  function ADiagnosisSetpointBar(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: { parent: this.diagnosisWindow.divTypes.LMRLeft, css: "DiagnosisBar" },
      M: {
        parent: this.diagnosisWindow.divTypes.LMRMiddle,
        css: "DiagnosisBar",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LMRRight,
        css: "DiagnosisBar",
      },
    };
    this.min = 0;
    this.max = 100;
    this.ymin = 15;
    this.percent0 = 67;
    this.plctag = this.plc + "." + this.data.OPCID;
    this.parentDiv =
      this.numberValue =
      this.bar =
      this.lineValue =
      this.lineValue2 =
      this.text =
      this.number =
      this.unitText =
        null;
    this.unit = emosWS.getUnit();
    this.init();
  }

  ADiagnosisSetpointBar.prototype.getBarValue = function () {
    if (this.numberValue < this.min) {
      this.numberValue = this.min;
    } else if (this.numberValue > this.max) {
      this.numberValue = this.max;
    }

    var p =
      this.ymin +
      ((100 - ((this.numberValue - this.min) / (this.max - this.min)) * 100) *
        this.percent0) /
        100 +
      "%";
    console.log("plctag=" + this.plctag + " / bar value % = " + p);
    return p;
  };

  ADiagnosisSetpointBar.prototype.getBarDegreeText = function (percent) {
    return (
      "- " +
      (this.min + ((this.max - this.min) * percent) / 100) +
      this.unitText
    );
  };

  ADiagnosisSetpointBar.prototype.getUnitSymbol = function () {
    switch (this.unit) {
      case emosWS.unitID.Metric:
        return " " + this.data.UnitMetric;
      case emosWS.unitID.UnitImperial:
        return " " + this.data.UnitImperial;
      case emosWS.unitID.UnitLocale:
        return " " + this.data.UnitLocale;
      default:
        return "";
    }
  };

  ADiagnosisSetpointBar.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var numberId = getElementGlobalID();
      var barId = getElementGlobalID();
      var textId = getElementGlobalID();
      var lineValueId = getElementGlobalID();
      var lineValueId2 = getElementGlobalID();
      var barText0Id = getElementGlobalID();
      var barText25Id = getElementGlobalID();
      var barText50Id = getElementGlobalID();
      var barText75Id = getElementGlobalID();
      var barText100Id = getElementGlobalID();
      this.parentDiv = this.parent.getDiv(
        this.positionClass[this.data.Position].parent
      );
      var properties = this.positionClass[this.data.Position];
      this.unitText = this.getUnitSymbol();
      var body = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisBarSVG'>" +
          "<text id='" +
          textId +
          "' x='50%' y='10%' fill='black' text-anchor='middle' font-weight='bold'>" +
          this.data.Text +
          "</text>" +
          "<rect id='" +
          barId +
          "' x='40%' y='" +
          this.ymin +
          "%' width='20%' height='" +
          this.percent0 +
          "%' style='fill:white;stroke-width:1;stroke:black' />" +
          "<line id='" +
          lineValueId +
          "' x1='40.5%' y1='15%' x2='59.5%' y2='15%' style='stroke-width:5;stroke:yellow'/>" +
          "<line id='" +
          lineValueId2 +
          "' x1='40%' y1='15%' x2='60%' y2='15%' style='stroke-width:1;stroke:black'/>" +
          "<rect x='20%' width='60%' height='15' y='87%' style='fill:white;stroke-width:0.5;stroke:grey'/>" +
          "<text id='" +
          numberId +
          "' x='50%' y='92%' text-anchor='middle' fill='orange'>" +
          this.numberValue +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText0Id +
          "' x='60%' y='83.5%'>" +
          this.getBarDegreeText(0) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText25Id +
          "' x='60%' y='66.75%'>" +
          this.getBarDegreeText(25) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText50Id +
          "' x='60%' y='50%'>" +
          this.getBarDegreeText(50) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText75Id +
          "' x='60%' y='33.25%'>" +
          this.getBarDegreeText(75) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText100Id +
          "' x='60%' y='16.5%'>" +
          this.getBarDegreeText(100) +
          "</text>" +
          "</svg>" +
          "</div>"
      );
      //body.appendTo(properties.parent);
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.text = document.getElementById(textId);
      this.bar = document.getElementById(barId);
      this.lineValue = document.getElementById(lineValueId);
      this.lineValue2 = document.getElementById(lineValueId2);
      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
    } catch (err) {
      console.log("DiagnosisBar init failed: " + err);
    }
  };

  ADiagnosisSetpointBar.prototype.datachangeListener = function (msg) {
    try {
      this.numberValue = GetAsInteger(msg.value);
      this.number.setAttribute("fill", "black");
      this.number.textContent = this.numberValue + this.getUnitSymbol();
      var lineValuePosition = this.getBarValue();
      this.lineValue.setAttribute("y1", lineValuePosition);
      this.lineValue.setAttribute("y2", lineValuePosition);
      this.lineValue2.setAttribute("y1", lineValuePosition);
      this.lineValue2.setAttribute("y2", lineValuePosition);
    } catch (err) {
      console.log("TopTextLED datachangeListener failed: " + err);
    }
  };

  emosWS.ADiagnosisSetpointBar = ADiagnosisSetpointBar;

  function ADiagnosisBar(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: { parent: this.diagnosisWindow.divTypes.LMRLeft, css: "DiagnosisBar" },
      M: {
        parent: this.diagnosisWindow.divTypes.LMRMiddle,
        css: "DiagnosisBar",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LMRRight,
        css: "DiagnosisBar",
      },
    };
    this.min = 0;
    this.max = 100;
    this.percent0 = 67;
    this.plctag = this.plc + "." + this.data.OPCID;
    this.parentDiv =
      this.numberValue =
      this.bar =
      this.barValue =
      this.text =
      this.number =
      this.unitText =
        null;
    this.unit = emosWS.getUnit();

    this.init();
  }
  ADiagnosisBar.prototype.getBarValue = function () {
    if (this.numberValue < this.min) {
      this.numberValue = this.min;
    } else if (this.numberValue > this.max) {
      this.numberValue = max;
    }

    var p =
      ((100 - ((this.numberValue - this.min) / (this.max - this.min)) * 100) *
        this.percent0) /
        100 +
      "%";
    //console.log("plctag=" + this.plctag + " / bar value % = " + p);
    return p;
  };

  ADiagnosisBar.prototype.getBarDegreeText = function (percent) {
    return (
      "- " +
      (this.min + ((this.max - this.min) * percent) / 100) +
      this.unitText
    );
  };

  ADiagnosisBar.prototype.getUnitSymbol = function () {
    switch (this.unit) {
      case emosWS.unitID.Metric:
        return " " + this.data.UnitMetric;
      case emosWS.unitID.UnitImperial:
        return " " + this.data.UnitImperial;
      case emosWS.unitID.UnitLocale:
        return " " + this.data.UnitLocale;
      default:
        return "";
    }
  };

  ADiagnosisBar.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var numberId = getElementGlobalID();
      var barId = getElementGlobalID();
      var textId = getElementGlobalID();
      var barValueId = getElementGlobalID();
      var barText0Id = getElementGlobalID();
      var barText25Id = getElementGlobalID();
      var barText50Id = getElementGlobalID();
      var barText75Id = getElementGlobalID();
      var barText100Id = getElementGlobalID();
      this.parentDiv = this.parent.getDiv(
        this.positionClass[this.data.Position].parent
      );
      var properties = this.positionClass[this.data.Position];
      this.unitText = this.getUnitSymbol();
      var body = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisBarSVG'>" +
          "<text id='" +
          textId +
          "' x='50%' y='10%' fill='black' text-anchor='middle' font-weight='bold'>" +
          this.data.Text +
          "</text>" +
          "<rect id='" +
          barId +
          "' x='40%' y='15%' width='20%' height='67%' style='fill:red;stroke-width:1;stroke:black' />" +
          "<rect id='" +
          barValueId +
          "' x='40%' y='15%' width='20%' height='35%' style='fill:black'/>" +
          "<rect x='20%' width='60%' height='15' y='87%' style='fill:white;stroke-width:0.5;stroke:grey'/>" +
          "<text id='" +
          numberId +
          "' x='50%' y='92%' text-anchor='middle' fill='orange'>" +
          this.numberValue +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText0Id +
          "' x='60%' y='83.5%'>" +
          this.getBarDegreeText(0) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText25Id +
          "' x='60%' y='66.75%'>" +
          this.getBarDegreeText(25) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText50Id +
          "' x='60%' y='50%'>" +
          this.getBarDegreeText(50) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText75Id +
          "' x='60%' y='33.25%'>" +
          this.getBarDegreeText(75) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText100Id +
          "' x='60%' y='16.5%'>" +
          this.getBarDegreeText(100) +
          "</text>" +
          "</svg>" +
          "</div>"
      );
      //body.appendTo(properties.parent);
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.text = document.getElementById(textId);
      this.bar = document.getElementById(barId);
      this.barValue = document.getElementById(barValueId);
      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
    } catch (err) {
      console.log("DiagnosisBar init failed: " + err);
    }
  };

  ADiagnosisBar.prototype.datachangeListener = function (msg) {
    try {
      this.numberValue = GetAsInteger(msg.value);
      this.number.setAttribute("fill", "black");
      this.number.textContent = this.numberValue + this.getUnitSymbol();
      this.barValue.setAttribute("height", this.getBarValue());
    } catch (err) {
      console.log("TopTextLED datachangeListener failed: " + err);
    }
  };

  emosWS.ADiagnosisBar = ADiagnosisBar;

  function ADiagnosisSpace(parent, data) {
    this.data = data;
    this.positionClass = {
      L: { parent: parent.LRLeft },
      R: { parent: parent.LRRight },
      Long: { parent: parent.LRLong },
    };
    this.init();
  }

  ADiagnosisSpace.prototype.init = function () {
    try {
      var properties = this.positionClass[this.data.Position];
      var body = $("<div class='DiagnosisSpace'></div>");
      body.appendTo(properties.parent);
    } catch (err) {
      console.log("DiagnosisSpace init failed: " + err);
    }
  };
  emosWS.ADiagnosisSpace = ADiagnosisSpace;

  /* DiagnosisTimer class: the base class for Diagnosis timer data
   *
   * @param {type} stringValue
   * @returns {DiagnosisTimer}
   */
  //function DiagnosisTimer(stringValue) {
  var ADiagnosisTimer = function (stringValue) {
    this.data = null;
    this.setValue(stringValue);
  };

  /* Set timer value
   *
   * @param {type} value
   * @returns {DiagnosisTimer.prototype.decode.Anonym$24}
   */
  ADiagnosisTimer.prototype.setValue = function (value) {
    this.data = this.decode(value);
  };

  /* Decode timer value from IOManager and return decoded data
   *
   * @param {type} value
   * @returns {DiagnosisTimer.prototype.decode.Anonym$23}
   */
  ADiagnosisTimer.prototype.decode = function (value) {
    return { value: value };
  };

  /* Return the encoded the data which can be written to IOM
   *
   * @returns {DiagnosisTimer.prototype.data}
   */
  ADiagnosisTimer.prototype.encode = function () {
    return this.data.value;
  };

  /* Return the data
   *
   * @returns {DiagnosisTimer.prototype.data}
   */
  ADiagnosisTimer.prototype.getData = function () {
    return this.data;
  };

  /* Return the presentation string
   *
   * @returns {DiagnosisTimer.prototype.data.value}
   */
  ADiagnosisTimer.prototype.toString = function () {
    return this.data.value;
  };

  /* Format number in 2 digits format
   *
   * @param {type} number
   * @returns {Number}
   */
  ADiagnosisTimer.prototype.formatNumber = function (number) {
    return number < 10
      ? (100 + number).toString().slice(-2)
      : number.toString();
  };

  /* DiagnosisTimerSecond (extends DiagnosisTimer): Timer in second value
   *
   * @param {type} value
   * @returns {DiagnosisTimerSecond}
   */
  var ADiagnosisTimerSecond = function (value, plcBase, visuBase) {
    this.plcBase = plcBase;
    this.visuBase = visuBase;
    ADiagnosisTimer.call(this, value);
  };

  ADiagnosisTimerSecond.prototype = Object.create(ADiagnosisTimer.prototype);
  ADiagnosisTimerSecond.prototype.constructor = ADiagnosisTimerSecond;

  /*
   *  PLC value -> Visu value object
   */
  ADiagnosisTimerSecond.prototype.decode = function (value) {
    if (this.visuBase === "ms") {
      var msecond = parseInt(value) * (this.plcBase === "ms" ? 1 : 1000);
      var minute = Math.floor(msecond / 60000);
      msecond -= minute * 60000;
      var second = Math.floor(msecond / 1000);
      msecond -= second * 1000;
      msecond = Math.round(msecond);

      return { value: value, minute: minute, second: second, msecond: msecond };
    } else {
      var second = parseInt(value) / (this.plcBase === "ms" ? 1000 : 1);
      var hour = Math.floor(second / 3600);
      second -= hour * 3600;
      var minute = Math.floor(second / 60);
      second -= minute * 60;
      second = Math.round(second);

      return { value: value, hour: hour, minute: minute, second: second };
    }
  };

  /*
   *  Visu value object -> PLC value
   */
  ADiagnosisTimerSecond.prototype.encode = function (param) {
    if (this.visuBase === "ms") {
      this.data.minute = parseInt(param.minute);
      this.data.second = parseInt(param.second);
      this.data.msecond = parseInt(param.msecond);
      this.data.value =
        (this.data.minute * 60000 +
          this.data.second * 1000 +
          this.data.msecond) /
        (this.plcBase === "ms" ? 1 : 1000);
    } else {
      this.data.hour = parseInt(param.hour);
      this.data.minute = parseInt(param.minute);
      this.data.second = parseInt(param.second);
      this.data.value =
        (this.data.hour * 3600 + this.data.minute * 60 + this.data.second) *
        (this.plcBase === "ms" ? 1000 : 1);
    }
    return this.data.value;
  };

  ADiagnosisTimerSecond.prototype.toString = function () {
    if (this.visuBase === "ms") {
      var time = "";
      var unit = "";
      if (this.data.minute !== 0) {
        time += this.formatNumber(this.data.minute) + ":";
        unit += "m:";
      }
      if (!(this.data.minute === 0 && this.data.second === 0)) {
        time += this.formatNumber(this.data.second) + ":";
        unit += "s:";
      }
      time += this.formatNumber(this.data.msecond);
      unit += "ms";
      return time + " " + unit;
    } else {
      var time = "";
      var unit = "";
      if (this.data.hour !== 0) {
        time += this.formatNumber(this.data.hour) + ":";
        unit += "h:";
      }
      if (!(this.data.hour === 0 && this.data.minute === 0)) {
        time += this.formatNumber(this.data.minute) + ":";
        unit += "m:";
      }
      time += this.formatNumber(this.data.second);
      unit += "s";
      return time + " " + unit;
    }
  };

  /* DiagnosisTimerMinute (extends DiagnosisTimer): Timer in minute value
   *
   * @param {type} value
   * @returns {DiagnosisTimerMinute}
   */
  var ADiagnosisTimerMinute = function (value) {
    ADiagnosisTimer.call(this, value);
  };

  ADiagnosisTimerMinute.prototype = Object.create(ADiagnosisTimer.prototype);
  ADiagnosisTimerMinute.prototype.constructor = ADiagnosisTimerMinute;
  ADiagnosisTimerMinute.prototype.decode = function (minuteString) {
    var minute = parseInt(minuteString);
    var day = Math.floor(minute / 1440);
    minute -= day * 1440;
    var hour = Math.floor(minute / 60);
    minute -= hour * 60;

    return { value: minuteString, day: day, hour: hour, minute: minute };
  };
  ADiagnosisTimerMinute.prototype.encode = function (param) {
    this.data.day = parseInt(param.day);
    this.data.hour = parseInt(param.hour);
    this.data.minute = parseInt(param.minute);
    this.data.value =
      this.data.day * 1440 + this.data.hour * 60 + this.data.minute;
    return this.data.value;
  };

  ADiagnosisTimerMinute.prototype.toString = function () {
    var time = "";
    var unit = "";
    if (this.data.day !== 0) {
      time += formatNumber(this.data.day) + ":";
      unit += "d:";
    }
    if (!(this.data.day === 0 && this.data.minute === 0)) {
      time += formatNumber(this.data.hour) + ":";
      unit += "h:";
    }
    time += formatNumber(this.data.minute);
    unit += "m";
    return time + " " + unit;
  };

  /* DiagnosisTimerSiemensDate (extends DiagnosisTimer): Timer in Siemens
   * Date value
   *
   * @param {type} value
   * @returns {DiagnosisTimerSiemensDate}
   */
  var ADiagnosisTimerSiemensDate = function (value) {
    ADiagnosisTimer.call(this, value);
  };

  ADiagnosisTimerSiemensDate.prototype = Object.create(
    ADiagnosisTimer.prototype
  );
  ADiagnosisTimerSiemensDate.prototype.constructor = ADiagnosisTimerSiemensDate;
  ADiagnosisTimerSiemensDate.prototype.decode = function (dateString) {
    try {
      var year = 1989;
      var month = 12;
      var day = 30;

      var pattern = /(.*?)-(.*?)-(.*?)$/;
      var result = dateString.replace(
        pattern,
        function (match, iyear, imonth, iday) {
          year = parseInt(iyear);
          month = parseInt(imonth);
          day = parseInt(iday);
        }
      );
      return { value: dateString, year: year, month: month, day: day };
    } catch (err) {
      return { value: dateString, year: year, month: month, day: day };
    }
  };
  ADiagnosisTimerSiemensDate.prototype.encode = function (param) {
    this.data.year = param.year;
    this.data.month = param.month;
    this.data.day = param.day;
    this.data.value =
      param.year +
      "-" +
      this.formatNumber(param.month) +
      "-" +
      this.formatNumber(param.day);
    return this.data.value;
  };
  ADiagnosisTimerSiemensDate.prototype.toString = function () {
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
    ];
    return (
      (this.data.day < 10 ? "0" + this.data.day : this.data.day) +
      " " +
      months[this.data.month - 1] +
      " " +
      this.data.year
    );
  };

  /* DiagnosisTimerSiemensTimeOfDate (extends DiagnosisTimer): Timer in Siemens
   * TimeOfDate value
   *
   * @param {type} value
   * @returns {DiagnosisTimerSiemensTimeOfDate}
   */
  var ADiagnosisTimerSiemensTimeOfDate = function (value) {
    ADiagnosisTimer.call(this, value);
  };
  ADiagnosisTimerSiemensTimeOfDate.prototype = Object.create(
    ADiagnosisTimer.prototype
  );
  ADiagnosisTimerSiemensTimeOfDate.prototype.constructor =
    ADiagnosisTimerSiemensTimeOfDate;
  ADiagnosisTimerSiemensTimeOfDate.prototype.decode = function (timeString) {
    try {
      var hour = 12;
      var minute = 0;
      var second = 0;

      var pattern = /(.*?):(.*?):(.*?)\.(.*?)$/;
      var result = timeString.replace(
        pattern,
        function (match, ihour, iminute, isecond, ims) {
          hour = parseInt(ihour);
          minute = parseInt(iminute);
          second = parseInt(isecond);
        }
      );
      return { value: timeString, hour: hour, minute: minute, second: second };
    } catch (err) {
      return { value: timeString, hour: hour, minute: minute, second: second };
    }
  };
  ADiagnosisTimerSiemensTimeOfDate.prototype.encode = function (param) {
    this.data.hour = param.hour;
    this.data.minute = param.minute;
    this.data.second = param.second;
    this.data.value =
      param.hour + ":" + param.minute + ":" + param.second + ".0";
    return this.data.value;
  };
  ADiagnosisTimerSiemensTimeOfDate.prototype.toString = function () {
    var AMPM = "AM";
    var hour = this.data.hour;
    if (hour > 12) {
      hour -= 12;
      AMPM = "PM";
    }
    return (
      hour +
      ":" +
      (this.data.minute < 10 ? "0" + this.data.minute : this.data.minute) +
      ":" +
      (this.data.second < 10 ? "0" + this.data.second : this.data.second) +
      " " +
      AMPM
    );
  };

  /* DiagnosisTimerSiemensTime (extends DiagnosisTimer): Timer in Siemens
   * Time value
   *
   * @param {type} value
   * @returns {DiagnosisTimerSiemensTime}
   */
  var ADiagnosisTimerSiemensTime = function (value) {
    ADiagnosisTimer.call(this, value);
  };
  ADiagnosisTimerSiemensTime.prototype = Object.create(
    ADiagnosisTimer.prototype
  );
  ADiagnosisTimerSiemensTime.prototype.constructor = ADiagnosisTimerSiemensTime;
  ADiagnosisTimerSiemensTime.prototype.decode = function (timeString) {
    try {
      var day = 0;
      var hour = 0;
      var minute = 0;
      var second = 0;
      var ms = 0;

      var pattern = /(\d+D)?(\d+H)?(\d+M)?(\d+S)?(\d+MS)?$/;
      var self = this;
      var result = timeString.replace(
        pattern,
        function (match, iday, ihour, iminute, isecond, ims) {
          day = self.getNumberFromString(iday);
          hour = self.getNumberFromString(ihour);
          minute = self.getNumberFromString(iminute);
          second = self.getNumberFromString(isecond);
          ms = self.getNumberFromString(ims);
        }
      );
      return {
        value: timeString,
        day: day,
        hour: hour,
        minute: minute,
        second: second,
        ms: ms,
      };
    } catch (err) {
      return {
        value: timeString,
        day: day,
        hour: hour,
        minute: minute,
        second: second,
        ms: ms,
      };
    }
  };
  ADiagnosisTimerSiemensTime.prototype.encode = function (param) {
    this.data.day = param.days;
    this.data.hour = param.hour;
    this.data.minute = param.minute;
    this.data.second = param.second;
    this.data.ms = param.ms;

    this.data.value =
      param.days +
      "D" +
      param.hour +
      "H" +
      param.minute +
      "M" +
      param.second +
      "S" +
      param.ms +
      "MS";
    return this.data.value;
  };
  ADiagnosisTimerSiemensTime.prototype.toString = function () {
    var time = "";
    var unit = "";
    var prior = false;
    if (this.data.day !== 0) {
      time += this.data.day;
      unit += "d";
      prior = true;
    }
    if (
      !(this.data.day === 0 && this.data.hour === 0) &&
      !(
        this.data.hour === 0 &&
        this.data.minute === 0 &&
        this.data.second === 0 &&
        this.data.ms === 0
      )
    ) {
      var sign = prior ? ":" : "";
      time +=
        sign + (this.data.hour < 10 ? "0" + this.data.hour : this.data.hour);
      unit += sign + "h";
      prior = true;
    }
    if (
      !(
        this.data.day === 0 &&
        this.data.hour === 0 &&
        this.data.minute === 0
      ) &&
      !(this.data.minute === 0 && this.data.second === 0 && this.data.ms === 0)
    ) {
      //if (minute !== 0) {
      var sign = prior ? ":" : "";
      time +=
        sign +
        (this.data.minute < 10 ? "0" + this.data.minute : this.data.minute);
      unit += sign + "m";
      prior = true;
    }
    if (
      !(
        this.data.day === 0 &&
        this.data.hour === 0 &&
        this.data.minute === 0 &&
        this.data.second === 0
      ) &&
      !(this.data.second === 0 && this.data.ms === 0)
    ) {
      //if (second !== 0) {
      var sign = prior ? ":" : "";
      time +=
        sign +
        (this.data.second < 10 ? "0" + this.data.second : this.data.second);
      unit += sign + "s";
      prior = true;
    }
    if (
      !(
        this.data.day === 0 &&
        this.data.hour === 0 &&
        this.data.minute === 0 &&
        this.data.second === 0
      ) ||
      this.data.ms !== 0
    ) {
      //if (ms !== 0) {
      var sign = prior ? ":" : "";
      time += sign + (this.data.ms < 10 ? "0" + this.data.ms : this.data.ms);
      unit += sign + "ms";
    }

    var out = time + " " + unit;
    return out === " " ? "0 s" : out;
  };
  ADiagnosisTimerSiemensTime.prototype.getNumberFromString = function (
    iString
  ) {
    var result = 0;
    try {
      if (typeof iString !== "undefined") {
        var pattern = /(\d+)/;
        result = parseInt(iString.match(pattern)[0]);
      }
      return result;
    } catch (err) {
      return result;
    }
  };

  var ADiagnosisTimerSiemensS5Time = function (value) {
    ADiagnosisTimerSiemensTime.call(this, value);
  };
  ADiagnosisTimerSiemensS5Time.prototype = Object.create(
    ADiagnosisTimerSiemensTime.prototype
  );
  ADiagnosisTimerSiemensS5Time.prototype.constructor =
    ADiagnosisTimerSiemensS5Time;
  ADiagnosisTimerSiemensS5Time.prototype.encode = function (param) {
    this.data.hour = param.hour;
    this.data.minute = param.minute;
    this.data.second = param.second;
    this.data.ms = param.ms;

    this.data.value =
      param.hour +
      "H" +
      param.minute +
      "M" +
      param.second +
      "S" +
      param.ms +
      "MS";
    return this.data.value;
  };
  ADiagnosisTimerSiemensS5Time.prototype.toString = function () {
    var time = "";
    var unit = "";
    var prior = false;
    this.data.day = 0;

    if (
      !(this.data.day === 0 && this.data.hour === 0) &&
      !(
        this.data.hour === 0 &&
        this.data.minute === 0 &&
        this.data.second === 0 &&
        this.data.ms === 0
      )
    ) {
      var sign = prior ? ":" : "";
      time +=
        sign + (this.data.hour < 10 ? "0" + this.data.hour : this.data.hour);
      unit += sign + "h";
      prior = true;
    }
    if (
      !(
        this.data.day === 0 &&
        this.data.hour === 0 &&
        this.data.minute === 0
      ) &&
      !(this.data.minute === 0 && this.data.second === 0 && this.data.ms === 0)
    ) {
      //if (minute !== 0) {
      var sign = prior ? ":" : "";
      time +=
        sign +
        (this.data.minute < 10 ? "0" + this.data.minute : this.data.minute);
      unit += sign + "m";
      prior = true;
    }
    if (
      !(
        this.data.day === 0 &&
        this.data.hour === 0 &&
        this.data.minute === 0 &&
        this.data.second === 0
      ) &&
      !(this.data.second === 0 && this.data.ms === 0)
    ) {
      //if (second !== 0) {
      var sign = prior ? ":" : "";
      time +=
        sign +
        (this.data.second < 10 ? "0" + this.data.second : this.data.second);
      unit += sign + "s";
      prior = true;
    }
    if (
      !(
        this.data.day === 0 &&
        this.data.hour === 0 &&
        this.data.minute === 0 &&
        this.data.second === 0
      ) ||
      this.data.ms !== 0
    ) {
      //if (ms !== 0) {
      var sign = prior ? ":" : "";
      time += sign + (this.data.ms < 10 ? "0" + this.data.ms : this.data.ms);
      unit += sign + "ms";
    }

    var out = time + " " + unit;
    return out === " " ? "0 s" : out;
  };

  /* DiagnosisTimerSiemensDateAndTime (extends DiagnosisTimer): Timer in Siemens
   * DateAndTime value
   *
   * @param {type} value
   * @returns {DiagnosisTimerSiemensDateAndTime}
   */
  var ADiagnosisTimerSiemensDateAndTime = function (value) {
    ADiagnosisTimer.call(this, value);
  };
  ADiagnosisTimerSiemensDateAndTime.prototype = Object.create(
    ADiagnosisTimer.prototype
  );
  ADiagnosisTimerSiemensDateAndTime.prototype.constructor =
    ADiagnosisTimerSiemensDateAndTime;
  ADiagnosisTimerSiemensDateAndTime.prototype.decode = function (
    datetimeString
  ) {
    try {
      if (!datetimeString) return;

      var seperatedPosition = datetimeString.lastIndexOf("-");
      var dateString = datetimeString.substring(0, seperatedPosition);
      var timeString = datetimeString.substring(seperatedPosition + 1);

      this.date = new ADiagnosisTimerSiemensDate(dateString);
      this.time = new ADiagnosisTimerSiemensTimeOfDate(timeString);

      var dateData = this.date.getData();
      var timeData = this.time.getData();
      var out = $.extend({}, dateData, timeData);
      out.value = datetimeString;

      return out;
    } catch (err) {
      console.log(
        "DiagnosisTimerSiemensDateAndTime.prototype.decode failed: " + err
      );
    }
  };
  ADiagnosisTimerSiemensDateAndTime.prototype.encode = function (param) {
    this.data.year = param.year;
    this.data.month = param.month;
    this.data.day = param.day;

    this.data.hour = param.hour;
    this.data.minute = param.minute;
    this.data.second = param.second;

    this.data.value =
      param.year +
      "-" +
      this.formatNumber(param.month) +
      "-" +
      this.formatNumber(param.day) +
      "-" +
      param.hour +
      ":" +
      param.minute +
      ":" +
      param.second +
      ".0";
    return this.data.value;
  };
  ADiagnosisTimerSiemensDateAndTime.prototype.toString = function () {
    return this.date.toString() + " " + this.time.toString();
  };

  var AvalueTypes = {
    Integer: 0,
    Float: 1,
    TimeInSecond: 2,
    TimeInMinute: 3,
    String: 4,
    TimeInMSecond: 5,
  };

  /* Provides dialogs to modify a given value in Diagnosis window
   *
   * @type Function|_L464.Anonym$35
   */
  var ADiagnosisForm = (function () {
    var myDialog;
    var params;
    var numberValueHTML,
      dateHTML,
      unitHTML,
      minHTML,
      midHTML,
      maxHTML,
      plctagHTML,
      textHTML,
      dayHTML,
      hourHTML,
      minuteHTML,
      secondHTML,
      msecondHTML,
      numberPicker,
      timePicker,
      dayPicker,
      hourPicker,
      minutePicker,
      secondPicker,
      msecondPicker,
      stringPicker,
      value;
    //var dialogTypes = {Integer: 0, Real: 1, TimeInSecond: 2, TimeInMinute: 3};
    window.addEventListener("load", initialize, false);
    function initialize() {
      appendFormNumber();
    }

    function changeValue() {
      switch (params.type) {
        case AvalueTypes.TimeInMSecond:
        case AvalueTypes.TimeInMinute:
        case AvalueTypes.TimeInSecond:
        case AvalueTypes.TimeInMinute:
          var day = dayHTML.val();
          var hour = hourHTML.val();
          var minute = minuteHTML.val();
          var second = secondHTML.val();
          var msecond = msecondHTML.val();
          value = params.value.encode({
            day: day,
            hour: hour,
            minute: minute,
            second: second,
            msecond: msecond,
          });
          break;

        case AvalueTypes.String:
          value = stringPicker.val();
          break;

        default:
          value = numberValueHTML.val();
          break;
      }

      if (params.onpoke) {
        params.onpoke(value);
      } else {
        emosWS.poke(params.plctag, value);
      }

      myDialog.dialog("close");

      if (typeof params.callback !== "undefined") {
        params.callback(value);
      }
    }

    function getDialog() {
      return myDialog;
    }

    function appendFormNumber() {
      try {
        var formNumberId = getElementGlobalID();
        var plctagId = getElementGlobalID();
        var textId = getElementGlobalID();
        var minId = getElementGlobalID();
        var midId = getElementGlobalID();
        var maxId = getElementGlobalID();
        var numberId = getElementGlobalID();
        var unitId = getElementGlobalID();
        var numberPickerId = getElementGlobalID();

        var timePickerId = getElementGlobalID();
        var dayPickerId = getElementGlobalID();
        var hourPickerId = getElementGlobalID();
        var minutePickerId = getElementGlobalID();
        var secondPickerId = getElementGlobalID();
        var msecondPickerId = getElementGlobalID();
        var dayId = getElementGlobalID();
        var hourId = getElementGlobalID();
        var minuteId = getElementGlobalID();
        var secondId = getElementGlobalID();
        var msecondId = getElementGlobalID();
        var stringPickerId = getElementGlobalID();

        var timePickerCode =
          "<div class='vertical controls' id='" +
          timePickerId +
          "'>" +
          "   <span id='" +
          dayPickerId +
          "'><input id='" +
          dayId +
          "'>d</span>" +
          "   <span id='" +
          hourPickerId +
          "'><input id='" +
          hourId +
          "'>h</span>" +
          "   <span id='" +
          minutePickerId +
          "'><input id='" +
          minuteId +
          "'>m</span>" +
          "   <span id='" +
          secondPickerId +
          "'><input id='" +
          secondId +
          "'>s</span>" +
          "   <span id='" +
          msecondPickerId +
          "'><input id='" +
          msecondId +
          "'>ms</span>" +
          "</div>";

        var stringPickerCode =
          "<div class='DiagnosisStringEdit'><textarea rows='4' id='" +
          stringPickerId +
          "'</textarea></div>";

        var $formNumber = $(
          "<div id='" +
            formNumberId +
            "'>" +
            "   <div class='DiagnosisExtraContent'>" +
            "       <p id='" +
            plctagId +
            "'>plc.tag</p>" +
            "       <p id='" +
            textId +
            "'>text</p>" +
            "   <table style='width:100%; text-align:center'><tr>" +
            "       <td id='" +
            minId +
            "'>Min</td>" +
            "       <td>..............</td>" +
            "       <td id='" +
            midId +
            "'>.</td>" +
            "       <td>..............</td>" +
            "       <td id='" +
            maxId +
            "'>Max</td>" +
            "   <tr></table>" +
            "   </div>" +
            "   <form>" +
            "       <div class='DiagnosisDatePickerContainer'>" +
            "           <div class='DiagnosisDatePickerCenter'>" +
            "               <span id='" +
            numberPickerId +
            "'>" +
            "                   <input name='numberValue' id='" +
            numberId +
            "' value='0'>" +
            "                   <label id='" +
            unitId +
            "'>unit</label>" +
            "               </span>" +
            timePickerCode +
            "           </div>" +
            "       </div>" +
            stringPickerCode +
            "       <input type='submit' tabindex='-1' style='position:absolute; top:-1000px'>" +
            "   </form>" +
            "</div>"
        );
        $("body").append($formNumber);
        myDialog = $("#" + formNumberId).dialog({
          modal: true,
          autoOpen: false,
          //height: 250,
          width: 350,
          title: "Input dialog",
          buttons: {
            Cancel: function () {
              myDialog.dialog("close");
            },
            OK: changeValue,
          },
          close: function () {
            formNumber[0].reset();
          },
        });
        numberValueHTML = $("#" + numberId).spinner();
        unitHTML = $("#" + unitId);
        minHTML = $("#" + minId);
        midHTML = $("#" + midId);
        maxHTML = $("#" + maxId);
        plctagHTML = $("#" + plctagId);
        textHTML = $("#" + textId);
        dayHTML = $("#" + dayId).spinner({ min: 0, step: 1, start: 1 });
        hourHTML = $("#" + hourId).spinner({
          min: 0,
          max: 23,
          step: 1,
          start: 1,
        });
        minuteHTML = $("#" + minuteId).spinner({
          min: 0,
          max: 59,
          step: 1,
          start: 0,
        });
        secondHTML = $("#" + secondId).spinner({
          min: 0,
          max: 59,
          step: 1,
          start: 0,
        });
        msecondHTML = $("#" + msecondId).spinner({
          min: 0,
          max: 999,
          step: 1,
          start: 0,
        });
        timePicker = $("#" + timePickerId);
        dayPicker = $("#" + dayPickerId);
        hourPicker = $("#" + hourPickerId);
        minutePicker = $("#" + minutePickerId);
        secondPicker = $("#" + secondPickerId);
        msecondPicker = $("#" + msecondPickerId);
        numberPicker = $("#" + numberPickerId);
        stringPicker = $("#" + stringPickerId);

        var formNumber = myDialog.find("form").on("submit", function (event) {
          event.preventDefault();
          changeValue();
        });
      } catch (err) {
        console.log("appendFormNumber failed: " + err);
      }
    }

    function open(parameters) {
      params = parameters;
      hidePickers();
      fillValue();

      switch (params.type) {
        case AvalueTypes.TimeInMSecond:
          showMinutePicker();
          showSecondPicker();
          showMSecondPicker();
          midHTML.text("ms");
          myDialog.dialog("open");
          break;

        case AvalueTypes.TimeInSecond:
          showHourPicker();
          showMinutePicker();
          showSecondPicker();
          midHTML.text("s");
          myDialog.dialog("open");
          break;

        case AvalueTypes.TimeInMinute:
          showDayPicker();
          showHourPicker();
          showMinutePicker();
          midHTML.text("m");
          myDialog.dialog("open");
          break;

        case AvalueTypes.String:
          showStringPicker();
          myDialog.dialog("open");
          break;

        default:
          showNumberPicker();
          myDialog.dialog("open");
          break;
      }
    }

    function fillValue() {
      plctagHTML.text(params.plctag);
      textHTML.text(params.text);
      minHTML.text("[  " + params.min);
      maxHTML.text(params.max + "  ]");
    }

    function showNumberPicker() {
      numberValueHTML.spinner("option", "min", params.min);
      numberValueHTML.spinner("option", "max", params.max);
      numberValueHTML.spinner(
        "option",
        "step",
        Math.pow(10, -1 * (params.precision || 0))
      );

      numberValueHTML.val(params.value);

      unitHTML.text(params.unit);
      numberPicker.show();
    }

    function showStringPicker() {
      stringPicker.val(params.value);
      stringPicker.show();
    }

    function showDayPicker() {
      dayPicker.show();
      var time = params.value.data;
      dayHTML.val(time.day);
    }

    function showHourPicker() {
      hourPicker.show();
      var time = params.value.data;
      hourHTML.val(time.hour);
    }

    function showMinutePicker() {
      minutePicker.show();
      var time = params.value.data;
      minuteHTML.val(time.minute);
    }

    function showSecondPicker() {
      secondPicker.show();
      var time = params.value.data;
      secondHTML.val(time.second);
    }

    function showMSecondPicker() {
      msecondPicker.show();
      var time = params.value.data;
      msecondHTML.val(time.msecond);
    }

    function hidePickers() {
      numberPicker.hide();
      //timePicker.hide();
      dayPicker.hide();
      hourPicker.hide();
      minutePicker.hide();
      secondPicker.hide();
      msecondPicker.hide();
      stringPicker.hide();
      midHTML.text(".");
    }

    return {
      open: open,
      getFormNumberDialog: getDialog,
    };
  })();

  var ADiagnosisDateForm = (function () {
    var myDialog;
    var params, dateData;
    var formId = getElementGlobalID();
    var dateId = getElementGlobalID();
    var plctagId = getElementGlobalID();

    var dateHTML,
      plctagHTML,
      dayHTML,
      hourHTML,
      minuteHTML,
      secondHTML,
      msHTML,
      textHTML,
      timePicker,
      dayPicker,
      msPicker;
    window.addEventListener("load", initialize, false);
    function initialize() {
      appendFormDate();
    }

    function changeValue() {
      console.log("Value is change");
      var value = dateHTML.datepicker("getDate");
      var year = value.getFullYear();
      var month = value.getMonth() + 1;
      var day = value.getDate();
      var days = dayHTML.val();
      var hour = hourHTML.val();
      var minute = minuteHTML.val();
      var second = secondHTML.val();
      var ms = msHTML.val();
      var writeValue = dateData.encode({
        year: year,
        month: month,
        day: day,
        days: days,
        hour: hour,
        minute: minute,
        second: second,
        ms: ms,
      });
      console.log(writeValue);
      emosWS.poke(params.plctag, writeValue);
      myDialog.dialog("close");
      if (typeof params.callback !== "undefined") {
        params.callback(dateData);
      }
    }

    function getDialog() {
      return myDialog;
    }

    function appendFormDate() {
      try {
        var dayPickerId = getElementGlobalID();
        var dayId = getElementGlobalID();
        var hourId = getElementGlobalID();
        var minuteId = getElementGlobalID();
        var secondId = getElementGlobalID();
        var msId = getElementGlobalID();
        var msPickerId = getElementGlobalID();
        var timePickerId = getElementGlobalID();
        var textId = getElementGlobalID();

        var datePickerCode = "<div id='" + dateId + "'></div>";

        var timePickerCode =
          "<div class='vertical controls' id='" +
          timePickerId +
          "'>" +
          "   <span id='" +
          dayPickerId +
          "'><input id='" +
          dayId +
          "'>d</span>" +
          "   <input id='" +
          hourId +
          "'>h" +
          "   <input id='" +
          minuteId +
          "'>m" +
          "   <input id='" +
          secondId +
          "'>s" +
          "   <span id='" +
          msPickerId +
          "'><input style='width: 2em' id='" +
          msId +
          "'>ms</span>" +
          "</div>";

        var $formDate = $(
          "<div id='" +
            formId +
            "'>" +
            "   <div class='DiagnosisExtraContent'>" +
            "       <p id='" +
            plctagId +
            "'>plc.tag</p>" +
            "       <p id='" +
            textId +
            "'>Adjust Date</p>" +
            "   </div>" +
            "   <form>" +
            "<div class='DiagnosisDatePickerContainer'>" +
            "   <div class='DiagnosisDatePickerCenter'>" +
            datePickerCode +
            timePickerCode +
            "   </div>" +
            "</div>" +
            "           <input type='submit' tabindex='-1' style='position:absolute; top:-1000px'>" +
            "   </form>" +
            "</div>"
        );

        $("body").append($formDate);

        myDialog = $("#" + formId).dialog({
          modal: true,
          autoOpen: false,
          width: 400,
          title: "Input dialog",
          buttons: {
            Cancel: function () {
              myDialog.dialog("close");
            },
            OK: changeValue,
          },
          close: function () {
            //formNumber[ 0 ].reset();
          },
        });

        dateHTML = $("#" + dateId).datepicker({
          changeMonth: true,
          changeYear: true,
        });
        dateHTML.datepicker("option", "firstDay", 1);
        dateHTML.datepicker("option", "yearRange", "0:3000");
        dayPicker = $("#" + dayPickerId);
        dayHTML = $("#" + dayId).spinner({ min: 0, step: 1, start: 1 });
        hourHTML = $("#" + hourId).spinner({
          min: 0,
          max: 23,
          step: 1,
          start: 1,
        });
        minuteHTML = $("#" + minuteId).spinner({
          min: 0,
          max: 59,
          step: 1,
          start: 0,
        });
        secondHTML = $("#" + secondId).spinner({
          min: 0,
          max: 59,
          step: 1,
          start: 0,
        });
        msHTML = $("#" + msId).spinner({ min: 0, max: 999, step: 1, start: 0 });
        msPicker = $("#" + msPickerId);
        timePicker = $("#" + timePickerId);
        plctagHTML = $("#" + plctagId);
        textHTML = $("#" + textId);
        var formDate = myDialog.find("form").on("submit", function (event) {
          event.preventDefault();
          changeValue();
        });
        /*var divs = dialog.find("div");
                 appendHead(divs[0]);
                 appendBody(divs[1]);*/
      } catch (err) {
        console.log("appendFormNumber failed: " + err);
      }
    }

    function open(parameters) {
      params = parameters;
      dateData = params.value;
      plctagHTML.text(params.plctag);
      hidePickers();

      switch (dateData.constructor) {
        case ADiagnosisTimerSiemensDate:
          showDayPicker();
          textHTML.text("Adjust date (Simens DATE):");
          myDialog.dialog("open");
          break;

        case ADiagnosisTimerSiemensTimeOfDate:
          textHTML.text("Adjust time (Simens TIME_OF_DAY):");
          showTimePicker();
          myDialog.dialog("open");
          break;

        case ADiagnosisTimerSiemensTime:
          textHTML.text("Adjust time (Simens TIME):");
          showDay();
          showTimePicker();
          showMS();
          myDialog.dialog("open");
          break;

        case ADiagnosisTimerSiemensS5Time:
          textHTML.text("Adjust time (Simens S5TIME):");
          showTimePicker();
          showMS();
          myDialog.dialog("open");
          break;

        case ADiagnosisTimerSiemensDateAndTime:
          textHTML.text("Adjust date and time (Simens DATE/AND_TIME):");
          showDayPicker();
          showTimePicker();
          myDialog.dialog("open");
          break;

        default:
          break;
      }
    }

    function hidePickers() {
      dateHTML.hide();
      dayPicker.hide();
      timePicker.hide();
      msPicker.hide();
    }

    function showDayPicker() {
      dateHTML.show();
      var date = dateData.data;
      var targetDate = new Date(date.year, date.month - 1, date.day);
      dateHTML.datepicker("setDate", targetDate);
    }

    function showTimePicker() {
      timePicker.show();
      var time = dateData.data;
      hourHTML.val(time.hour);
      minuteHTML.val(time.minute);
      secondHTML.val(time.second);
    }

    function showDay() {
      dayPicker.show();
      var time = dateData.data;
      dayHTML.val(time.day);
    }

    function showMS() {
      msPicker.show();
      var time = dateData.data;
      msHTML.val(time.ms);
    }

    return {
      open: open,
      getDialog: getDialog,
    };
  })();

  function ADiagnosisTextTimer(
    parent,
    data,
    plc,
    type,
    writable,
    diagnosisWindow
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.type = type;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextTimer",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextTimer",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextTimer",
        BorderWidth: "97.5%",
        WriteRectWidth: "25%",
        RectX: "47%",
        WriteRectX: "72.5%",
        TextX: "5",
        TextY: "15",
        Number2X: "97%",
        Number2Y: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag2 = this.plc + "." + this.data.OPCID;
    this.border =
      this.text =
      this.number =
      this.writeRect =
      this.numberValue =
      this.timerValue =
        null;
    this.numberColor = this.writable ? "blue" : "black";
    if (this.type === AtimerTypes.Second) {
      this.plcBase = this.data.Base || "s";
      this.visuBase = this.data.VisuBase || "s";
    } else {
      this.plcBase = this.visuBase = null;
    }
    ADiagnosisElement.call(this, { data: data, writable: writable });
  }
  ADiagnosisTextTimer.prototype = Object.create(ADiagnosisElement.prototype);
  ADiagnosisTextTimer.prototype.constructor = ADiagnosisTextTimer;

  ADiagnosisTextTimer.prototype.setTimerValue = function () {
    switch (this.type) {
      case AtimerTypes.Second:
        this.timerValue = new ADiagnosisTimerSecond(
          0,
          this.plcBase,
          this.visuBase
        );
        break;

      case AtimerTypes.Minute:
        this.timerValue = new ADiagnosisTimerMinute();
        break;

      case AtimerTypes.SiemensDate:
        this.timerValue = new ADiagnosisTimerSiemensDate();
        break;

      case AtimerTypes.SiemensTimeOfDay:
        this.timerValue = new ADiagnosisTimerSiemensTimeOfDate();
        break;

      case AtimerTypes.SiemensTime:
        this.timerValue = new ADiagnosisTimerSiemensTime();
        break;

      case AtimerTypes.SiemensS5Time:
        this.timerValue = new ADiagnosisTimerSiemensS5Time();
        break;

      case AtimerTypes.SiemensDateAndTime:
        this.timerValue = new ADiagnosisTimerSiemensDateAndTime();
        break;

      default:
        this.timerValue = new ADiagnosisTimer();
        break;
    }
  };

  ADiagnosisTextTimer.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var numberId = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var writeRectId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];

      this.setTimerValue();

      //var writeRect = writable ? "<rect width='20' height='20' x='180' style='fill:lightgrey;'/>" : "";
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisTextDoubleSVG'>" +
          "<rect class='DiagnosisNumberLRRectBorderSVG' width='" +
          properties.BorderWidth +
          "' height='20' id='" +
          borderId +
          "'/>" +
          "<rect class='DiagnosisNumberLRRectwriteRectSVG' width='" +
          properties.WriteRectWidth +
          "' height='20' x='" +
          properties.WriteRectX +
          "' id='" +
          writeRectId +
          "'/>" +
          "<text class='DiagnosisNumberLRTextTextSVG' x='" +
          properties.TextX +
          "' y='" +
          properties.TextY +
          "' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</text>" +
          "<text class='DiagnosisNumberLRTextNumberSVG' x='" +
          properties.Number2X +
          "' y='" +
          properties.Number2Y +
          "' text-anchor='end' id='" +
          numberId +
          "'>" +
          this.numberValue +
          "</text>" +
          "</svg>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.writeRect = document.getElementById(writeRectId);
      emosWS.advise(
        this.plctag2,
        this.datachange2Listener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      if (this.writable) {
        this.writeRect.style.cursor = "pointer";
        this.number.setAttribute("pointer-events", "none");
        this.writeRect.addEventListener("click", this.onClick.bind(this));
      }
    } catch (err) {
      console.log("DiagnosisTextTimer init failed: " + err);
    }
  };

  ADiagnosisTextTimer.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.writeRect.style.cursor = "pointer";
      this.writeRect.style.pointerEvents = "auto";
      this.number.style.fill = this.numberColor = "blue";
    } else {
      this.writeRect.style.cursor = "auto";
      this.writeRect.style.pointerEvents = "none";
      this.number.style.fill = this.numberColor = "black";
    }
  };

  ADiagnosisTextTimer.prototype.onClick = function () {
    switch (this.type) {
      case AtimerTypes.Second:
        ADiagnosisForm.open({
          value: this.timerValue,
          plctag: this.plctag2,
          type:
            this.visuBase === "s"
              ? AvalueTypes.TimeInSecond
              : AvalueTypes.TimeInMSecond,
          text: this.text.textContent,
          min: this.data.IntTimeMin,
          max: this.data.IntTimeMax,
        });
        break;

      case AtimerTypes.SiemensDate:
      case AtimerTypes.SiemensTimeOfDay:
      case AtimerTypes.SiemensDateAndTime:
      case AtimerTypes.SiemensS5Time:
      case AtimerTypes.SiemensTime:
        ADiagnosisDateForm.open({
          value: this.timerValue,
          plctag: this.plctag2,
        });
        break;

      default:
        ADiagnosisForm.open({
          value: this.numberValue,
          unit: "",
          min: this.data.IntTimeMin,
          max: this.data.IntTimeMax,
          plctag: this.plctag2,
          text: this.text.textContent,
        });
        break;
    }
  };

  ADiagnosisTextTimer.prototype.datachange2Listener = function (msg) {
    try {
      this.number.style.fill = this.numberColor;
      this.timerValue.setValue(msg.value);
      this.number.textContent = this.timerValue.toString();
    } catch (err) {
      console.log("datachange2Listener datachangeListener failed: " + err);
    }
  };

  emosWS.ADiagnosisTextTimer = ADiagnosisTextTimer;

  function ADiagnosisTextDoubleTimer(
    parent,
    data,
    plc,
    valueInSecond,
    writable,
    diagnosisWindow
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.valueInSecond = valueInSecond;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextDoubleTimer",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "50%",
        NumberY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextDoubleTimer",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "50%",
        NumberY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextDoubleTimer",
        BorderWidth: "72%",
        WriteRectWidth: "25%",
        RectX: "47%",
        WriteRectX: "72.5%",
        TextX: "5",
        TextY: "15",
        NumberX: "71.5%",
        NumberY: "15",
        Number2X: "97%",
        Number2Y: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.plctag2 = this.plc + "." + this.data.OPCID2;
    this.border =
      this.text =
      this.number =
      this.number2 =
      this.rect =
      this.writeRect =
      this.numberValue =
      this.number2Value =
      this.timerValue =
        null;
    this.numberColor = this.writable ? "blue" : "black";

    if (valueInSecond) {
      this.plcBase = this.data.Base || "s";
      this.visuBase = this.data.VisuBase || "s";
    } else {
      this.plcBase = this.visuBase = null;
    }

    ADiagnosisElement.call(this, { data: data, writable: writable });
  }
  ADiagnosisTextDoubleTimer.prototype = Object.create(
    ADiagnosisElement.prototype
  );
  ADiagnosisTextDoubleTimer.prototype.constructor = ADiagnosisTextDoubleTimer;

  ADiagnosisTextDoubleTimer.prototype.setTimerValue = function () {
    this.timerValue = this.valueInSecond
      ? new ADiagnosisTimerSecond(0, this.plcBase, this.visuBase)
      : new ADiagnosisTimerMinute();
  };

  ADiagnosisTextDoubleTimer.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var numberId = getElementGlobalID();
      var number2Id = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var writeRectId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];

      this.setTimerValue();

      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisTextDoubleSVG'>" +
          "<rect class='DiagnosisNumberLRRectBorderSVG' width='" +
          properties.BorderWidth +
          "' height='20' id='" +
          borderId +
          "'/>" +
          "<rect class='DiagnosisNumberLRRectwriteRectSVG' width='" +
          properties.WriteRectWidth +
          "' height='20' x='" +
          properties.RectX +
          "'/>" +
          "<rect class='DiagnosisNumberLRRectwriteRectSVG' width='" +
          properties.WriteRectWidth +
          "' height='20' x='" +
          properties.WriteRectX +
          "' id='" +
          writeRectId +
          "'/>" +
          "<text class='DiagnosisNumberLRTextTextSVG' x='" +
          properties.TextX +
          "' y='" +
          properties.TextY +
          "' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</text>" +
          "<text class='DiagnosisNumberLRTextNumberSVG' x='" +
          properties.NumberX +
          "' y='" +
          properties.NumberY +
          "' text-anchor='end' id='" +
          numberId +
          "'>" +
          this.numberValue +
          "</text>" +
          "<text class='DiagnosisNumberLRTextNumberSVG' x='" +
          properties.Number2X +
          "' y='" +
          properties.Number2Y +
          "' text-anchor='end' id='" +
          number2Id +
          "'>" +
          this.number2Value +
          "</text>" +
          "</svg>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.number2 = document.getElementById(number2Id);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.writeRect = document.getElementById(writeRectId);
      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.advise(
        this.plctag2,
        this.datachange2Listener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      if (this.writable) {
        this.writeRect.style.cursor = "pointer";
        this.number2.setAttribute("pointer-events", "none");
        this.writeRect.addEventListener("click", this.onClick.bind(this));
      }
    } catch (err) {
      console.log("DiagnosisTextDoubleTimer init failed: " + err);
    }
  };

  ADiagnosisTextDoubleTimer.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.writeRect.style.cursor = "pointer";
      this.writeRect.style.pointerEvents = "auto";
      this.number2.style.fill = this.numberColor = "blue";
    } else {
      this.writeRect.style.cursor = "auto";
      this.writeRect.style.pointerEvents = "none";
      this.number2.style.fill = this.numberColor = "black";
    }
  };

  ADiagnosisTextDoubleTimer.prototype.onClick = function () {
    ADiagnosisForm.open({
      value: this.timerValue,
      unit: "",
      min: this.data.IntTimeMin,
      max: this.data.IntTimeMax,
      plctag: this.plctag2,
      text: this.text.textContent,
      type: this.valueInSecond
        ? this.visuBase === "s"
          ? AvalueTypes.TimeInSecond
          : AvalueTypes.TimeInMSecond
        : AvalueTypes.TimeInMinute,
    });
  };

  ADiagnosisTextDoubleTimer.prototype.datachangeListener = function (msg) {
    try {
      this.number.style.fill = "black";
      this.timerValue.setValue(msg.value);
      this.number.textContent = this.timerValue.toString();
    } catch (err) {
      console.log("DiagnosisTextDoubleTimer datachangeListener failed: " + err);
    }
  };

  ADiagnosisTextDoubleTimer.prototype.datachange2Listener = function (msg) {
    try {
      this.number2.style.fill = this.numberColor;
      this.timerValue.setValue(msg.value);
      this.number2.textContent = this.timerValue.toString();
    } catch (err) {
      console.log(
        "DiagnosisTextDoubleTimer datachange2Listener failed: " + err
      );
    }
  };

  emosWS.ADiagnosisTextDoubleTimer = ADiagnosisTextDoubleTimer;

  function ADiagnosisTextNumber(parent, data, plc, writable, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextInteger",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextInteger",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextInteger",
        BorderWidth: "97.5%",
        WriteRectWidth: "25%",
        WriteRectX: "72.5%",
        TextX: "5",
        TextY: "15",
        NumberX: "96.5%",
        NumberY: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.numberValue =
      this.border =
      this.text =
      this.number =
      this.writeRect =
        null;
    this.unit = emosWS.getUnit();
    this.unitSymbol = this.getUnitSymbol();
    this.IOObject = null;
    this.numberColor = this.writable ? "blue" : "black";
    this.sliderId = null;
    this.msg = null;

    ADiagnosisElement.call(this, { data: data, writable: writable });
  }
  ADiagnosisTextNumber.prototype = Object.create(ADiagnosisElement.prototype);
  ADiagnosisTextNumber.prototype.constructor = ADiagnosisTextNumber;

  ADiagnosisTextNumber.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var numberId = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var writeRectId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisNumberLRSVG'>" +
          "<rect class='DiagnosisNumberLRRectBorderSVG' width='" +
          properties.BorderWidth +
          "' height='20' id='" +
          borderId +
          "'/>" +
          "<rect class='DiagnosisNumberLRRectwriteRectSVG' width='" +
          properties.WriteRectWidth +
          "' height='20' x='" +
          properties.WriteRectX +
          "' id='" +
          writeRectId +
          "'/>" +
          "<text class='DiagnosisNumberLRTextTextSVG' x='" +
          properties.TextX +
          "' y='" +
          properties.TextY +
          "' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</text>" +
          "<text class='DiagnosisNumberLRTextNumberSVG' x='" +
          properties.NumberX +
          "' y='" +
          properties.NumberY +
          "' text-anchor='end' id='" +
          numberId +
          "'>" +
          this.numberValue +
          this.unitSymbol +
          "</text>" +
          "</svg>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.writeRect = document.getElementById(writeRectId);
      this.IOObject = emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IOObject,
        this.data.UnitMetric,
        1,
        this.data.UnitImperial,
        1,
        this.data.UnitLocale,
        1,
        this.data.UnitInit,
        this.data.Precision || 0
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );

      if (this.writable) {
        this.writeRect.style.cursor = "pointer";
        this.number.setAttribute("pointer-events", "none");
        this.writeRect.addEventListener("click", this.onClick.bind(this));
      }
    } catch (err) {
      console.log("DiagnosisTextNumber init failed: " + err);
    }
  };

  ADiagnosisTextNumber.prototype.poke = function (value) {
    this.IOObject.setValue(value);
  };

  ADiagnosisTextNumber.prototype.getParams = function () {
    var params = {
      value: this.numberValue,
      unitSymbol: this.unitSymbol,
      precision: this.data.Precision,
    };
    try {
      var plcO = this.IOObject.IOObjectPLC;
      params.value = plcO.value;
      params.unitSymbol = plcO.unitSymbol;
      params.precision = plcO.precision;
    } catch (e) {
      console.log(e);
    }
    return params;
  };

  ADiagnosisTextNumber.prototype.shareFunctionsTo = function (prototype) {
    try {
      ["poke", "getParams", "onClick", "datachangeListener"].forEach(
        function (functionName) {
          prototype[functionName] = this.constructor.prototype[functionName];
        }.bind(this)
      );
    } catch (e) {
      console.log(e);
    }
  };

  ADiagnosisTextNumber.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.writeRect.style.cursor = "pointer";
      this.writeRect.style.pointerEvents = "auto";
      this.number.style.fill = this.numberColor = "blue";
    } else {
      this.writeRect.style.cursor = "auto";
      this.writeRect.style.pointerEvents = "none";
      this.number.style.fill = this.numberColor = "black";
    }
  };

  ADiagnosisTextNumber.prototype.onClick = function () {
    var params = this.getParams();

    ADiagnosisForm.open({
      value: params.value,
      unit: params.unitSymbol,
      min: this.data.RealInputMin || this.data.IntInputMin,
      max: this.data.RealInputMax || this.data.IntInputMax,
      plctag: this.plctag,
      text: this.text.textContent,
      precision: params.precision,
      onpoke: this.poke.bind(this),
    });
  };

  ADiagnosisTextNumber.prototype.datachangeListener = function (msg) {
    try {
      this.msg = msg;
      var v = msg.value;
      this.numberValue = v.value;
      this.unitSymbol = v.unitSymbol;
      this.number.style.fill = this.numberColor;
      this.number.textContent = v.valueWithSymbol;
    } catch (err) {
      console.log("DiagnosisTextNumber datachangeListener failed: " + err);
    }
  };

  emosWS.ADiagnosisTextNumber = ADiagnosisTextNumber;

  function ADiagnosisTextNumberNumber(
    parent,
    data,
    plc,
    dataType,
    writable,
    diagnosisWindow
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.dataType = dataType;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextNumberNumber",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextNumberNumber",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextNumberNumber",
        BorderWidth: "97.5%",
        WriteRectWidth: "25%",
        RectX: "47%",
        WriteRectX: "72.5%",
        TextX: "5",
        TextY: "15",
        NumberX: "71.5%",
        NumberY: "15",
        Number2X: "96.5%",
        Number2Y: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.plctag2 = this.plc + "." + this.data.OPCID2;
    this.border =
      this.text =
      this.number =
      this.number2 =
      this.rect =
      this.writeRect =
      this.numberValue =
      this.number2Value =
      this.min =
      this.max =
        null;
    this.unit = emosWS.getUnit();
    this.unitSymbol = this.getUnitSymbol();
    this.IOObject1 = this.IOObject2 = null;
    this.numberColor = this.writable ? "blue" : "black";
    this.msg1 = this.msg2 = null;

    ADiagnosisElement.call(this, { data: data, writable: writable });
  }
  ADiagnosisTextNumberNumber.prototype = Object.create(
    ADiagnosisElement.prototype
  );
  ADiagnosisTextNumberNumber.prototype.constructor = ADiagnosisTextNumberNumber;

  ADiagnosisTextNumberNumber.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var numberId = getElementGlobalID();
      var number2Id = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var rectId = getElementGlobalID();
      var writeRectId = getElementGlobalID();
      switch (this.dataType) {
        case this.diagnosisWindow.dataTypes.Integer:
          this.min = this.data.IntInputMin;
          this.max = this.data.IntInputMax;
          break;
        case this.diagnosisWindow.dataTypes.Real:
          this.min = this.data.RealInputMin;
          this.max = this.data.RealInputMax;
          break;
        default:
          break;
      }

      var properties = this.positionClass[this.data.Position];
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisNumberLRSVG'>" +
          "<rect class='DiagnosisNumberLRRectBorderSVG' width='" +
          properties.BorderWidth +
          "' height='20' id='" +
          borderId +
          "'/>" +
          "<rect class='DiagnosisNumberLRRectwriteRectSVG' width='" +
          properties.WriteRectWidth +
          "' height='20' x='" +
          properties.RectX +
          "' id='" +
          rectId +
          "'/>" +
          "<rect class='DiagnosisNumberLRRectwriteRectSVG' width='" +
          properties.WriteRectWidth +
          "' height='20' x='" +
          properties.WriteRectX +
          "' id='" +
          writeRectId +
          "'/>" +
          "<text class='DiagnosisNumberLRTextTextSVG' x='" +
          properties.TextX +
          "' y='" +
          properties.TextY +
          "' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</text>" +
          "<text class='DiagnosisNumberLRTextNumberSVG' x='" +
          properties.NumberX +
          "' y='" +
          properties.NumberY +
          "' text-anchor='end' id='" +
          numberId +
          "'>" +
          this.numberValue +
          this.getUnitSymbol() +
          "</text>" +
          "<text class='DiagnosisNumberLRTextNumberSVG' x='" +
          properties.Number2X +
          "' y='" +
          properties.Number2Y +
          "' text-anchor='end' id='" +
          number2Id +
          "'>" +
          this.number2Value +
          this.getUnitSymbol() +
          "</text>" +
          "</svg>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.number2 = document.getElementById(number2Id);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.rect = document.getElementById(rectId);
      this.writeRect = document.getElementById(writeRectId);
      this.IOObject1 = emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IOObject,
        this.data.UnitMetric,
        1,
        this.data.UnitImperial,
        1,
        this.data.UnitLocale,
        1,
        this.data.UnitInit,
        this.data.Precision || 0
      );
      this.IOObject2 = emosWS.advise(
        this.plctag2,
        this.datachange2Listener.bind(this),
        "",
        emosWS.tagType.IOObject,
        this.data.UnitMetric,
        1,
        this.data.UnitImperial,
        1,
        this.data.UnitLocale,
        1,
        this.data.UnitInit,
        this.data.Precision || 0
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      if (this.writable) {
        this.writeRect.style.cursor = "pointer";
        this.number2.setAttribute("pointer-events", "none");
        this.writeRect.addEventListener("click", this.onClick.bind(this));
      }
    } catch (err) {
      console.log("DiagnosisTextNumberNumber init failed: " + err);
    }
  };

  ADiagnosisTextNumberNumber.prototype.poke = function (value) {
    this.IOObject2.setValue(value);
  };

  ADiagnosisTextNumberNumber.prototype.getParams = function () {
    var params = {
      value: this.number2Value,
      unitSymbol: this.unitSymbol,
      precision: this.data.Precision,
    };
    try {
      var plcO = this.IOObject2.IOObjectPLC;
      params.value = plcO.value;
      params.unitSymbol = plcO.unitSymbol;
      params.precision = plcO.precision;
    } catch (e) {
      console.log(e);
    }
    return params;
  };

  ADiagnosisTextNumberNumber.prototype.shareFunctionsTo = function (prototype) {
    try {
      [
        "poke",
        "getParams",
        "onClick",
        "datachangeListener",
        "datachange2Listener",
      ].forEach(
        function (functionName) {
          prototype[functionName] = this.constructor.prototype[functionName];
        }.bind(this)
      );
    } catch (e) {
      console.log(e);
    }
  };

  ADiagnosisTextNumberNumber.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.writeRect.style.cursor = "pointer";
      this.writeRect.style.pointerEvents = "auto";
      this.number2.style.fill = this.numberColor = "blue";
    } else {
      this.writeRect.style.cursor = "auto";
      this.writeRect.style.pointerEvents = "none";
      this.number2.style.fill = this.numberColor = "black";
    }
  };

  ADiagnosisTextNumberNumber.prototype.onClick = function () {
    var params = this.getParams();

    ADiagnosisForm.open({
      value: params.value,
      unit: params.unitSymbol,
      min: this.min || this.data.RealInputMin,
      max: this.max || this.data.RealInputMax,
      plctag: this.plctag2,
      text: this.text.textContent,
      precision: params.precision,
      onpoke: this.poke.bind(this),
    });
  };

  ADiagnosisTextNumberNumber.prototype.datachangeListener = function (msg) {
    try {
      this.msg1 = msg;
      var v = msg.value;
      this.numberValue = v.value;
      this.unitSymbol = v.unitSymbol;
      this.number.style.fill = "black";
      this.number.textContent = v.valueWithSymbol;
    } catch (err) {
      console.log(
        "DiagnosisTextNumberNumber datachangeListener failed: " + err
      );
    }
  };

  ADiagnosisTextNumberNumber.prototype.datachange2Listener = function (msg) {
    try {
      this.msg2 = msg;
      var v = msg.value;
      this.number2Value = v.value;
      this.unitSymbol = v.unitSymbol;
      this.number2.style.fill = this.numberColor;
      this.number2.textContent = v.valueWithSymbol;
    } catch (err) {
      console.log(
        "DiagnosisTextNumberNumber datachange2Listener failed: " + err
      );
    }
  };

  emosWS.ADiagnosisTextNumberNumber = ADiagnosisTextNumberNumber;

  function ADiagnosisLedTextNumberNumber(
    parent,
    data,
    plc,
    writable,
    diagnosisWindow
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisLedText",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisLedText",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisLedText",
        BorderWidth: "92.4%",
        WriteRectWidth: "25%",
        RectX: "47%",
        WriteRectX: "72.5%",
        TextX: "27",
        TextY: "15",
        NumberX: "71.5%",
        NumberY: "15",
        Number2X: "96.5%",
        Number2Y: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.plctag2 = this.plc + "." + this.data.OPCID2;
    this.plctagLed = this.plc + "." + this.data.LEDOPCID;
    this.ledValue =
      this.border =
      this.led =
      this.text =
      this.number =
      this.number2 =
      this.writeRect =
      this.numberValue =
      this.number2Value =
        null;
    this.unit = emosWS.getUnit();
    this.unitSymbol = this.getUnitSymbol();
    this.IOObject1 = this.IOObject2 = null;
    this.numberColor = this.writable ? "blue" : "black";
    this.msg1 = this.msg2 = null;

    ADiagnosisElement.call(this, { data: data, writable: writable });
  }
  ADiagnosisLedTextNumberNumber.prototype = Object.create(
    ADiagnosisElement.prototype
  );
  ADiagnosisLedTextNumberNumber.prototype.constructor =
    ADiagnosisLedTextNumberNumber;
  ADiagnosisTextNumberNumber.prototype.shareFunctionsTo(
    ADiagnosisLedTextNumberNumber.prototype
  );

  ADiagnosisLedTextNumberNumber.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var ledId = getElementGlobalID();
      var numberId = getElementGlobalID();
      var number2Id = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var writeRectId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];

      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisNumberLRSVG'>" +
          "<rect width='20' height='20' style='fill:white;stroke-width:1;stroke:grey' />" +
          "<circle id='" +
          ledId +
          "' cx='10' cy='10' r='7' stroke='black' stroke-width='1' fill='orange'/>" +
          //"<rect class='DiagnosisNumberLRRectBorderSVG' width='" + properties.WriteRectWidth + "' height='20' x='" + properties.RectX + "'/>" +
          "<rect class='DiagnosisNumberLRRectBorderSVG' x='22' width='" +
          properties.BorderWidth +
          "' height='20' id='" +
          borderId +
          "'/>" +
          "<rect class='DiagnosisNumberLRRectwriteRectSVG' width='" +
          properties.WriteRectWidth +
          "' height='20' x='" +
          properties.RectX +
          "'/>" +
          "<rect class='DiagnosisNumberLRRectwriteRectSVG' width='" +
          properties.WriteRectWidth +
          "' height='20' x='" +
          properties.WriteRectX +
          "' id='" +
          writeRectId +
          "'/>" +
          "<text class='DiagnosisNumberLRTextTextSVG' x='" +
          properties.TextX +
          "' y='" +
          properties.TextY +
          "' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</text>" +
          "<text class='DiagnosisNumberLRTextNumberSVG' x='" +
          properties.NumberX +
          "' y='" +
          properties.NumberY +
          "' text-anchor='end' id='" +
          numberId +
          "'>" +
          this.numberValue +
          this.getUnitSymbol() +
          "</text>" +
          "<text class='DiagnosisNumberLRTextNumberSVG' x='" +
          properties.Number2X +
          "' y='" +
          properties.Number2Y +
          "' text-anchor='end' id='" +
          number2Id +
          "'>" +
          this.number2Value +
          this.getUnitSymbol() +
          "</text>" +
          "</svg>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.number2 = document.getElementById(number2Id);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.writeRect = document.getElementById(writeRectId);
      this.led = document.getElementById(ledId);
      this.IOObject1 = emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IOObject,
        this.data.UnitMetric,
        1,
        this.data.UnitImperial,
        1,
        this.data.UnitLocale,
        1,
        this.data.UnitInit,
        this.data.Precision || 0
      );
      this.IOObject2 = emosWS.advise(
        this.plctag2,
        this.datachange2Listener.bind(this),
        "",
        emosWS.tagType.IOObject,
        this.data.UnitMetric,
        1,
        this.data.UnitImperial,
        1,
        this.data.UnitLocale,
        1,
        this.data.UnitInit,
        this.data.Precision || 0
      );
      emosWS.advise(
        this.plctagLed,
        this.datachangeLedListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      if (this.writable) {
        this.writeRect.style.cursor = "pointer";
        this.number2.setAttribute("pointer-events", "none");
        this.writeRect.addEventListener("click", this.onClick.bind(this));
      }
    } catch (err) {
      console.log("DiagnosisTextInteger init failed: " + err);
    }
  };

  ADiagnosisLedTextNumberNumber.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.writeRect.style.cursor = "pointer";
      this.writeRect.style.pointerEvents = "auto";
      this.number2.style.fill = this.numberColor = "blue";
    } else {
      this.writeRect.style.cursor = "auto";
      this.writeRect.style.pointerEvents = "none";
      this.number2.style.fill = this.numberColor = "black";
    }
  };

  ADiagnosisLedTextNumberNumber.prototype.datachangeLedListener = function (
    msg
  ) {
    try {
      this.msg1 = msg;
      this.ledValue = GetAsBoolean(msg.value);
      var fillColor =
        AcolorList[this.ledValue ? this.data.OnLED : this.data.OffLED];
      this.led.setAttribute("fill", fillColor);
    } catch (err) {
      console.log(
        "DiagnosisLedTextNumberNumber datachangeLedListener failed: " + err
      );
    }
  };

  emosWS.ADiagnosisLedTextNumberNumber = ADiagnosisLedTextNumberNumber;

  function ADiagnosisLedTextNumber(
    parent,
    data,
    plc,
    writable,
    diagnosisWindow
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisLedText",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisLedText",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisLedText",
        BorderWidth: "92.4%",
        WriteRectWidth: "12.5%",
        WriteRectX: "85%",
        TextX: "27",
        TextY: "15",
        NumberX: "96.5%",
        NumberY: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.plctagLed = this.plc + "." + this.data.LEDOPCID;
    this.numberValue =
      this.ledValue =
      this.border =
      this.led =
      this.text =
      this.number =
      this.writeRect =
      this.numberValue =
        null;
    this.unit = emosWS.getUnit();
    this.unitSymbol = this.getUnitSymbol();
    this.IOObject = null;
    this.numberColor = this.writable ? "blue" : "black";
    this.msg = null;

    ADiagnosisElement.call(this, { data: data, writable: writable });
  }
  ADiagnosisLedTextNumber.prototype = Object.create(
    ADiagnosisElement.prototype
  );
  ADiagnosisLedTextNumber.prototype.constructor = ADiagnosisLedTextNumber;
  ADiagnosisTextNumber.prototype.shareFunctionsTo(
    ADiagnosisLedTextNumber.prototype
  );

  ADiagnosisLedTextNumber.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var ledId = getElementGlobalID();
      var numberId = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var writeRectId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisNumberLRSVG'>" +
          "<rect width='20' height='20' style='fill:white;stroke-width:1;stroke:grey' />" +
          "<circle id='" +
          ledId +
          "' cx='10' cy='10' r='7' stroke='black' stroke-width='1' fill='orange'/>" +
          "<rect class='DiagnosisNumberLRRectBorderSVG' x='22' width='" +
          properties.BorderWidth +
          "' height='20' id='" +
          borderId +
          "'/>" +
          "<rect class='DiagnosisNumberLRRectwriteRectSVG' width='" +
          properties.WriteRectWidth +
          "' height='20' x='" +
          properties.WriteRectX +
          "' id='" +
          writeRectId +
          "'/>" +
          "<text class='DiagnosisNumberLRTextTextSVG' x='" +
          properties.TextX +
          "' y='" +
          properties.TextY +
          "' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</text>" +
          "<text class='DiagnosisNumberLRTextNumberSVG' x='" +
          properties.NumberX +
          "' y='" +
          properties.NumberY +
          "' text-anchor='end' id='" +
          numberId +
          "'>" +
          this.numberValue +
          this.getUnitSymbol() +
          "</text>" +
          "</svg>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.writeRect = document.getElementById(writeRectId);
      this.led = document.getElementById(ledId);
      this.IOObject = emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IOObject,
        this.data.UnitMetric,
        1,
        this.data.UnitImperial,
        1,
        this.data.UnitLocale,
        1,
        this.data.UnitInit,
        this.data.Precision || 0
      );
      emosWS.advise(
        this.plctagLed,
        this.datachangeLedListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      if (this.writable) {
        this.writeRect.style.cursor = "pointer";
        this.number.setAttribute("pointer-events", "none");
        this.writeRect.addEventListener("click", this.onClick.bind(this));
      }
    } catch (err) {
      console.log("DiagnosisLedTextNumber init failed: " + err);
    }
  };

  ADiagnosisLedTextNumber.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.writeRect.style.cursor = "pointer";
      this.writeRect.style.pointerEvents = "auto";
      this.number.style.fill = this.numberColor = "blue";
    } else {
      this.writeRect.style.cursor = "auto";
      this.writeRect.style.pointerEvents = "none";
      this.number.style.fill = this.numberColor = "black";
    }
  };

  ADiagnosisLedTextNumber.prototype.datachangeLedListener = function (msg) {
    try {
      this.ledValue = GetAsBoolean(msg.value);
      var fillColor =
        AcolorList[this.ledValue ? this.data.OnLED : this.data.OffLED];
      this.led.setAttribute("fill", fillColor);
    } catch (err) {
      console.log(
        "DiagnosisLedTextNumber datachangeLedListener failed: " + err
      );
    }
  };

  emosWS.ADiagnosisLedTextNumber = ADiagnosisLedTextNumber;

  function ADiagnosisBrowserPage(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisBrowserPage",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisBrowserPage",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisBrowserPage",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.OPCID = this.data.OPCID;
    this.url = this.data.URL;
    this.plctag = this.plc;
    this.iframe = null;

    this.init();
  }

  ADiagnosisBrowserPage.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      var body = $(
        "<div class='" +
          properties.css +
          "'>" +
          "<iframe class='DiagnosisBrowserIFrame' id='" +
          id +
          "' src='" +
          this.url +
          "'></iframe>" +
          "</div>"
      );
      body.appendTo(this.parentDiv);
      this.iframe = document.getElementById(id);
      if (this.url.indexOf("$") >= 0 && this.OPCID !== "") {
        emosWS.advise(
          this.plc + "." + this.data.OPCID,
          this.datachangeListener.bind(this),
          "",
          emosWS.tagType.IO
        );
      }
    } catch (err) {
      console.log("DiagnosisControlNetArray init failed: " + err);
    }
  };

  ADiagnosisBrowserPage.prototype.datachangeListener = function (msg) {
    var tempURL = this.url;
    this.iframe.src = tempURL.replace("$", msg.value);
  };

  emosWS.ADiagnosisBrowserPage = ADiagnosisBrowserPage;

  function ADiagnosisControlNetArray(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisControlNetArray",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisControlNetArray",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisControlNetArray",
        BorderWidth: "92.4%",
        WriteRectWidth: "12.5%",
        WriteRectX: "85%",
        TextX: "27",
        TextY: "15",
        NumberX: "96.5%",
        NumberY: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.aOPCIA = this.data.AOPCID;
    this.aOPCMidID = this.data.AOPCMidID;
    this.aOPCEndID = this.data.AOPCEndID;
    this.sOPCIA = this.data.SOPCID;
    this.sOPCMidID = this.data.SOPCMidID;
    this.sOPCEndID = this.data.SOPCEndID;
    this.start = parseInt(this.data.Start);
    this.stop = parseInt(this.data.Stop);
    this.elements = this.stop - this.start + 1;
    this.rows = Math.floor(this.elements / 11);
    this.plctag = this.plc;
    this.controls = {};
    this.rowElements = 11;

    this.init();
  }

  ADiagnosisControlNetArray.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      for (var i = this.start, len = this.stop + 1; i < len; i++) {
        this.controls[i] = {
          id: getElementGlobalID(),
          alarmValue: null,
          statusValue: null,
          rect: null,
        };
      }
      var properties = this.positionClass[this.data.Position];
      var controlNet = "";
      var x0 = 0;
      var y0 = 0;
      var controlWidth = 35;
      var controlOutWidth = 40;
      var controlHeight = 20;
      var controlHeightOut = 25;
      var height = controlHeightOut * this.rows;
      for (var i = 0; i < this.rows; i++) {
        var len =
          i === this.rows - 1
            ? this.elements - i * this.rowElements
            : this.rowElements;
        for (var j = 0; j < len; j++) {
          var index = i * this.rowElements + j + this.start;
          controlNet +=
            "<rect class='DiagnosisControlRectSVG' x='" +
            (x0 + j * controlOutWidth) +
            "' y='" +
            y0 +
            "' width='" +
            controlWidth +
            "' height='" +
            controlHeight +
            "' id='" +
            this.controls[index].id +
            "'/>" +
            "<text text-anchor='middle' class='DiagnosisControlTextSVG' x='" +
            (x0 + controlWidth / 2 + j * controlOutWidth) +
            "' y='" +
            (y0 + 15) +
            "'>" +
            index +
            "</text>";
        }
        y0 += controlHeightOut;
      }

      var body = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' height='" +
          height +
          "' class='DiagnosisControlArraySVG'>" +
          controlNet +
          "</svg>" +
          "</div>"
      );
      body.appendTo(this.parentDiv);
      for (var i = this.start, len = this.stop + 1; i < len; i++) {
        this.controls[i].rect = document.getElementById(this.controls[i].id);
        emosWS.advise(
          this.getAlarmPlctag(i),
          this.datachangeAlarmListener.bind(this),
          i,
          emosWS.tagType.IO
        );
        emosWS.advise(
          this.getStatusPlctag(i),
          this.datachangeStatusListener.bind(this),
          i,
          emosWS.tagType.IO
        );
      }
    } catch (err) {
      console.log("DiagnosisControlNetArray init failed: " + err);
    }
  };

  ADiagnosisControlNetArray.prototype.getAlarmPlctag = function (index) {
    var format = (100 + index).toString().substring(1);
    return (
      this.plctag +
      "." +
      this.aOPCIA +
      format +
      this.aOPCMidID +
      index +
      this.aOPCEndID
    );
  };

  ADiagnosisControlNetArray.prototype.getStatusPlctag = function (index) {
    var format = (100 + index).toString().substring(1);
    return (
      this.plctag +
      "." +
      this.sOPCIA +
      format +
      this.sOPCMidID +
      index +
      this.sOPCEndID
    );
  };

  ADiagnosisControlNetArray.prototype.datachangeAlarmListener = function (
    msg,
    index
  ) {
    try {
      var control = this.controls[index];
      control.alarmValue = GetAsBoolean(msg.value);
      if (control.alarmValue) {
        control.rect.style.fill = AcolorList.R;
      } else {
        if (!control.statusValue) {
          control.rect.style.fill = AcolorList.O;
        }
      }
    } catch (err) {
      console.log(
        "DiagnosisControlNetArray datachangeAlarmListener failed: " + err
      );
    }
  };

  ADiagnosisControlNetArray.prototype.datachangeStatusListener = function (
    msg,
    index
  ) {
    try {
      var control = this.controls[index];
      control.statusValue = GetAsBoolean(msg.value);
      if (!control.alarmValue) {
        if (control.statusValue) {
          control.rect.style.fill = AcolorList.G;
        } else {
          control.rect.style.fill = AcolorList.O;
        }
      }
    } catch (err) {
      console.log(
        "DiagnosisControlNetArray datachangeStatusListener failed: " + err
      );
    }
  };

  emosWS.ADiagnosisControlNetArray = ADiagnosisControlNetArray;

  function ADiagnosisBitBar(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisBitBar",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisBitBar",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisBitBar",
        BorderWidth: "92.4%",
        WriteRectWidth: "12.5%",
        WriteRectX: "85%",
        TextX: "27",
        TextY: "15",
        NumberX: "96.5%",
        NumberY: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.numberValue = null;
    this.barBytes = 2;
    this.leds = {};

    ADiagnosisElement.call(this, { data: data });
  }
  ADiagnosisBitBar.prototype = Object.create(ADiagnosisElement.prototype);
  ADiagnosisBitBar.prototype.constructor = ADiagnosisBitBar;

  ADiagnosisBitBar.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      for (var i = 0, len = this.barBytes * 8; i < len; i++) {
        this.leds[i] = { id: getElementGlobalID(), value: null, svg: null };
      }
      var properties = this.positionClass[this.data.Position];
      var bars = "";
      var x0 = 0;
      var ledWidth = 10;
      var yNumber = 10;
      var yBit = 12;
      var bitWidth = 6;
      for (var i = 0; i < this.barBytes; i++) {
        for (var j = 0; j < 8; j++) {
          var index = (this.barBytes - i - 1) * 8 + (7 - j);
          bars +=
            "<text class='DiagnosisNumberNumberTextSVG' x='" +
            (x0 + j * ledWidth) +
            "' y='" +
            yNumber +
            "'>" +
            (7 - j) +
            "</text>" +
            "<rect class='DiagnosisBitSVG' x='" +
            (x0 + j * ledWidth) +
            "' y='" +
            yBit +
            "' width='" +
            bitWidth +
            "' height='" +
            bitWidth +
            "' id='" +
            this.leds[index].id +
            "'/>";
        }
        x0 += ledWidth * 9;
      }

      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisBitBarSVG'>" +
          bars +
          "</svg>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      for (var i = 0, len = this.barBytes * 8; i < len; i++) {
        this.leds[i].svg = document.getElementById(this.leds[i].id);
      }

      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
    } catch (err) {
      console.log("DiagnosisBitBar init failed: " + err);
    }
  };

  ADiagnosisBitBar.prototype.datachangeListener = function (msg) {
    try {
      this.numberValue = GetAsInteger(msg.value);
      var baseNumber = 0x100000000;
      var binString = (baseNumber + this.numberValue).toString(2);
      for (var i = 0, len = this.barBytes * 8; i < len; i++) {
        this.leds[i].value = binString[binString.length - i - 1];
        var fillColor =
          this.leds[i].value === "1" ? AcolorList.G : AcolorList.O;
        this.leds[i].svg.style.fill = fillColor;
      }
    } catch (err) {
      console.log("DiagnosisBitBar datachangeListener failed: " + err);
    }
  };

  emosWS.ADiagnosisBitBar = ADiagnosisBitBar;

  function ADiagnosisTextLED(parent, data, plc, writable, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextLed",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextLed",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextLed",
        rectWidth: "97.5%",
        rectHeight: "20",
        writeRectX: "93.1%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.4%",
        ledY: "10",
        ledR: "7",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.led = this.border = this.text = this.LEDValue = null;

    ADiagnosisElement.call(this, { data: data, writable: writable });
  }

  ADiagnosisTextLED.prototype = Object.create(ADiagnosisElement.prototype);
  ADiagnosisTextLED.prototype.constructor = ADiagnosisTextLED;

  ADiagnosisTextLED.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var ledId = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var writeRectId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      var writeRect = this.writable
        ? "<rect  id='" +
          writeRectId +
          "' width='" +
          properties.writeRectWidth +
          "' height='" +
          properties.rectHeight +
          "' x='" +
          properties.writeRectX +
          "' style='fill:lightgrey;'/>"
        : "";
      this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg width='100%' height='20'>" +
          "<rect id='" +
          borderId +
          "' width='" +
          properties.rectWidth +
          "' height='" +
          properties.rectHeight +
          "' style='fill:white;stroke-width:1;stroke:grey' />" +
          writeRect +
          "<text id='" +
          textId +
          "' x='5' y='15' fill='black'>" +
          this.data.Text +
          "</text>" +
          "<circle id='" +
          ledId +
          "' cx='" +
          properties.ledX +
          "' cy='" +
          properties.ledY +
          "' r='" +
          properties.ledR +
          "' stroke='black' stroke-width='1' fill='orange'/>" +
          "</svg>" +
          "</div>"
      );
      this.panel.appendTo(this.parentDiv);
      this.led = document.getElementById(ledId);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.writeRect = document.getElementById(writeRectId);
      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      if (this.writable) {
        //led.setAttribute("onclick", onLEDClick);
        this.led.style.cursor = "pointer";
        this.led.addEventListener(
          "click",
          function () {
            emosWS.poke(this.plctag, this.LEDValue ? "0" : "-1");
          }.bind(this)
        );
      }
    } catch (err) {
      console.log("DiagnosisTextLED init failed: " + err);
    }
  };

  ADiagnosisTextLED.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.writeRect.style.visibility = "visible";
      this.led.style.cursor = "pointer";
      this.led.style.pointerEvents = "auto";
    } else {
      this.writeRect.style.visibility = "hidden";
      this.led.style.cursor = "auto";
      this.led.style.pointerEvents = "none";
    }
  };

  ADiagnosisTextLED.prototype.datachangeListener = function (msg) {
    try {
      this.LEDValue = GetAsBoolean(msg.value);
      var fillColor =
        AcolorList[this.LEDValue ? this.data.OnLED : this.data.OffLED];
      this.led.setAttribute("fill", fillColor);
    } catch (err) {
      console.log("DiagnosisTextLED datachangeListener failed: " + err);
    }
  };
  emosWS.ADiagnosisTextLED = ADiagnosisTextLED;

  function ADiagnosisDoubleText(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisDoubleText",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisDoubleText",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisDoubleText",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.text = this.text2 = null;

    ADiagnosisElement.call(this, { data: data });
  }
  ADiagnosisDoubleText.prototype = Object.create(ADiagnosisElement.prototype);
  ADiagnosisDoubleText.prototype.constructor = ADiagnosisDoubleText;

  ADiagnosisDoubleText.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      var textId2 = getElementGlobalID();
      if (typeof this.data.VisibleOPCID !== "undefined") {
        if (this.data.VisibleOPCID !== "") {
          this.plctag =
            this.data.VisibleOPCID === ""
              ? ""
              : this.plc + "." + this.data.OPCID;
        }
      }
      var properties = this.positionClass[this.data.Position];
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<div class='DiagnosisDoubleTextDiv' id='" +
          textId2 +
          "'>" +
          this.data.Text2 +
          "</div>" +
          "<div class='DiagnosisDoubleTextDiv' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</div>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      this.text = document.getElementById(textId);
      this.text2 = document.getElementById(textId2);
      if (this.plctag !== "") {
        emosWS.advise(
          this.plctag,
          function (msg) {
            try {
              var visible = GetAsBoolean(msg.value);
              this.text.style.visibility = visible ? "visible" : "hidden";
              this.text2.style.visibility = visible ? "visible" : "hidden";
            } catch (err) {
              console.log(
                "DiagnosisDoubleText datachangeListener failed: " + err
              );
            }
          }.bind(this),
          "",
          emosWS.tagType.IO
        );
      }

      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this)
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID2,
        "name",
        function (msg) {
          if (msg.value !== "") this.text2.textContent = msg.value;
        }.bind(this)
      );
    } catch (err) {
      console.log("DiagnosisDoubleText init failed: " + err);
    }
  };

  emosWS.ADiagnosisDoubleText = ADiagnosisDoubleText;

  function ADiagnosisString(parent, data, plc, writable, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisString",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisString",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisString",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );

    this.callForString = false;
    this.OPCID = this.data.OPCID;
    this.data.OPCID.replace(
      /^([^\[\]]*)((\[(.*))?\])?$/,
      function (m, OPCID, callForString, m3, callType) {
        this.OPCID = OPCID;
        this.callForString = typeof callForString !== "undefined";
      }.bind(this)
    );

    this.plctagVisible = this.textValue = "";
    this.plctag = this.plc + "." + this.OPCID;
    this.text = null;
    this.textColor = this.writable ? "blue" : "black";
    this.strLen = parseInt(this.data.StrLen);
    this.strStart = parseInt(this.data.StrStart);

    ADiagnosisElement.call(this, { data: data, writable: writable });
  }
  ADiagnosisString.prototype = Object.create(ADiagnosisElement.prototype);
  ADiagnosisString.prototype.constructor = ADiagnosisString;

  ADiagnosisString.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      if (typeof this.data.VisibleOPCID !== "undefined") {
        if (this.data.VisibleOPCID !== "") {
          this.plctagVisible =
            this.data.VisibleOPCID === ""
              ? ""
              : this.plc + "." + this.data.VisibleOPCID;
        }
      }

      var properties = this.positionClass[this.data.Position];
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<input class='DiagnosisStringText' type='text' id='" +
          textId +
          "' readonly></p>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      this.text = document.getElementById(textId);
      var updateText = function (text, updateTextAlso) {
        this.text.style["background-color"] = "white";
        this.text.style["color"] = this.textColor;
        this.textValue = text;
        if (updateTextAlso) {
          this.text.value = this.textValue;
        }
      }.bind(this);
      if (this.callForString) {
        var calledString = [],
          plcIsRsLinx = this.diagnosisWindow.PLCType === "2";
        for (var i = 0; i < this.strLen; i++) {
          emosWS.advise(
            this.plctag + "[" + (this.strStart + i) + "]",
            function (msg, index) {
              //if RsLinx convert decimal to ASCII character
              calledString[index] = plcIsRsLinx
                ? String.fromCharCode(msg.value)
                : msg.value;
              updateText(calledString.join(""), true);
            }.bind(this),
            i
          );
        }
      } else {
        emosWS.advise(
          this.plctag,
          function (msg) {
            if (msg.value !== "") {
              if (this.strStart && this.strLen) {
                this.text.value = msg.value.substr(
                  this.strStart - 1,
                  this.strLen
                );
              } else {
                this.text.value = msg.value;
              }
              updateText(msg.value);
            }
          }.bind(this)
        );
      }
      if (this.writable) {
        this.text.style.cursor = "pointer";
        this.text.addEventListener("click", this.onClick.bind(this));
      }
    } catch (err) {
      console.log("DiagnosisString init failed: " + err);
    }
  };

  ADiagnosisString.prototype.onClick = function () {
    ADiagnosisForm.open({
      value: this.textValue,
      unit: "",
      min: this.data.StrStart,
      max: this.data.StrLen,
      plctag: this.plctag,
      text: this.textValue,
      type: AvalueTypes.String,
    });
  };

  ADiagnosisString.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.text.style.cursor = "pointer";
      this.text.style.pointerEvents = "auto";
      this.text.style.color = this.textColor = "blue";
    } else {
      this.text.style.cursor = "auto";
      this.text.style.pointerEvents = "none";
      this.text.style.color = this.textColor = "black";
    }
  };

  emosWS.ADiagnosisString = ADiagnosisString;

  function ADiagnosisStringField(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisString",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisString",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisString",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.text = null;
    this.textValue = "";

    ADiagnosisElement.call(this, { data: data });
  }
  ADiagnosisStringField.prototype = Object.create(ADiagnosisElement.prototype);
  ADiagnosisStringField.prototype.constructor = ADiagnosisStringField;

  ADiagnosisStringField.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<textarea class='DiagnosisStringFieldTextArea' rows='4' id='" +
          textId +
          "' readonly></p>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      this.text = document.getElementById(textId);
      emosWS.advise(
        this.plctag,
        function (msg) {
          if (msg.value !== "") {
            this.text.value = msg.value;
            this.text.style["background-color"] = "white";
            this.textValue = msg.value;
          }
        }.bind(this)
      );
    } catch (err) {
      console.log("DiagnosisString init failed: " + err);
    }
  };

  emosWS.DiagnosisStringField = ADiagnosisStringField;

  function ADiagnosisChildWindow(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: { parent: this.diagnosisWindow.divTypes.LRLeft, css: "DiagnosisText" },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisText",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextLong",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.dataText = this.data.Text === "" ? "." : this.data.Text;
    this.plctag = "";
    this.text = "";
    this.init();
  }

  ADiagnosisChildWindow.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      var textContent = this.data.Name + " " + this.data.Comment + " - ";
      var textIDContent = "TextID: " + this.data.TextID;
      var body = $(
        "<div class='DiagnosisGerneralElement'>" +
          "<svg id='" +
          id +
          "' width='100%' height='20'>" +
          "<rect width='100%' height='20' style='fill:white;stroke-width:1;stroke:grey' />" +
          "<text id='" +
          textId +
          "' x='5' y='15' fill='black'>" +
          textContent +
          textIDContent +
          "</text>" +
          "</svg>" +
          "</div>"
      );
      body.appendTo(this.parentDiv);
      this.text = document.getElementById(textId);

      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = textContent + msg.value;
        }.bind(this),
        this
      );

      new emosWS.ESDiagnosisWindow({
        conditionFunction: function () {
          return {
            DiagnosisLibID: this.diagnosisWindow.DiagnosisLibID,
            PLC: this.diagnosisWindow.PLC,
            ID: this.diagnosisWindow.ID + this.data.OPCID,
            DiagnosisControl: this.data.Name,
            GroupRightIndex: this.diagnosisWindow.GroupRightIndex,
            Enabled: true,
          };
        }.bind(this),
        PLACEHOLDER_USEHAND: true,
        PLACEHOLDER_USESTROKE: false,
        PLACEHOLDER_USEHIDE: false,
        STDPLACEHOLDER_SHAPENAME: id,
        svgTarget: id,
      });
    } catch (err) {
      console.log("DiagnosisChildWindow init failed: " + err);
    }
  };

  emosWS.ADiagnosisChildWindow = ADiagnosisChildWindow;

  function ADiagnosisWindow(configuration) {
    this.conditionFunction = configuration["conditionFunction"];
    this.condition = false;
    this.useHand = configuration["PLACEHOLDER_USEHAND"];
    this.useStroke = configuration["PLACEHOLDER_USESTROKE"];
    this.useHide = configuration["PLACEHOLDER_USEHIDE"];
    this.target = configuration["STDPLACEHOLDER_SHAPENAME"];
    this.svgTarget = configuration["svgTarget"];
    this.DiagnosisLibID = null;
    this.PLC = null;
    this.ID = null;
    this.DiagnosisControl = null;
    this.childWindows = null;
    this.childWindowsData = {};
    this.appendedChildData = false;
    this.GroupRightIndex = null;
    this.Enabled = null;
    this.divTypes = {
      None: 0,
      LRLeft: 1,
      LRRight: 2,
      Long: 3,
      LMRLeft: 4,
      LMRMiddle: 5,
      LMRRight: 6,
    };
    this.dataTypes = { Integer: 0, Real: 1 };
    this.windowData = null;
    this.qualityGood = false;
    this.badQualityTagList = {};
    this.winName = "";
    this.OPCVersionID = "";
    this.OPCVersion = "";
    this.versionList = [];
    this.rootVersion = null;
    this.plcVersion = "";
    this.shape = getSVGElement(this.target);
    this.fill = null;
    this.fillHighLight = "rgb(255, 255, 26)";
    this.rid = null;
    this.textPrefixList = { 1: "T01_", 3: "T03_", 5: "T05_" };
    this.PLCType = null;
    this.initialize();
  }

  ADiagnosisWindow.prototype.updateTagList = function (msg) {
    if (typeof msg !== "undefined") {
      if (emosWS.hasQualityGood(msg)) {
        if (typeof this.badQualityTagList[msg.tag] !== "undefined") {
          delete this.badQualityTagList[msg.tag];
        }
      } else {
        this.badQualityTagList[msg.tag] = 0;
      }
      this.qualityGood = Object.keys(this.badQualityTagList).length === 0;
    }
  };

  ADiagnosisWindow.prototype.getTextPrefix = function () {
    return this.textPrefixList[this.DiagnosisLibID];
  };

  ADiagnosisWindow.prototype.datachangeListener = function (msg, tagId) {
    try {
    } catch (err) {
      console.log("datachangeListener failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.appendWindow = function (id) {
    try {
      this.appendChildData();
      var /*onclose = function () {
                     var msg = {type: "DiagnosisWindowClosed", id: this.rid};
                     window.postMessage(JSON.stringify(msg), "*");
                     }.bind(this),*/
        self = this,
        $newdiv1 = $(
          "<div class='DiagnosisWindow' id='" +
            id +
            "'><div class='DiagnosisHeadOld'></div><div class='DiagnosisBodyOld'></div></div>"
        ),
        title =
          "Name: \t" +
          this.winName +
          "\n" +
          "XML: \t" +
          this.rootVersion.replace(/(..)-(..)/, "__  $1 $2") +
          "\n" +
          "PLC: \t" +
          this.plcVersion.replace(/(.)(..)(..)/, "0$1 $2 $3"),
        newBtn =
          '<a href="#" title="' +
          title +
          '" class="myDialogBtn"><span class="ui-icon ui-icon-alert"></span></a>';

      $("body").append($newdiv1);

      var dialog = $("#" + id)
        .dialog({
          title: this.winName + " : " + this.PLC + this.ID,
          width: 480,
          height: 400,
          resizable: true,
          close: function (event, ui) {
            $(this).dialog("destroy").remove();
            self.terminate();
            //onclose();
          },
          create: function () {
            $(this)
              .prev(".ui-dialog-titlebar")
              .find(".ui-dialog-title")
              .after(newBtn);
          },
          resize: function () {
            if (emosWS.attr.svgobject)
              emosWS.attr.svgobject.style["pointer-events"] = "none";
          },
        })
        .mouseleave(function () {
          if (emosWS.attr.svgobject)
            emosWS.attr.svgobject.style["pointer-events"] = "auto";
        });

      var divs = dialog.find("div");
      this.appendHead(divs[0]);
      this.appendBody(divs[1]);
      //this.highlight();
    } catch (err) {
      console.log("appendWindow failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.appendHead = function (head) {
    try {
      var headData = this.windowData.Head;
      for (var key in headData) {
        var objectData = headData[key];
        if (typeof objectData === "object") {
          var objectType = ADiagnosisCommon.getObjectType(key);
          switch (objectType) {
            case "TopTextLED":
              new ATopTextLED(head, objectData, this.PLC + this.ID, this);
              break;
            default:
              break;
          }
        }
      }
    } catch (err) {
      console.log("appendHead failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.appendBody = function (body) {
    this.appendPageControl(body, this.windowData.PageControl);
  };

  ADiagnosisWindow.prototype.appendPageControl = function (parent, data) {
    try {
      new APageControl(parent, data, this);
    } catch (err) {
      console.log("appendPageControl failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.appendPage = function (
    parent,
    data,
    extra,
    visibleRight,
    tabid,
    tabs
  ) {
    try {
      var parent = parent;
      var data = data;
      var visibleRight = visibleRight;
      parent.LRLeft = null;
      parent.LRRight = null;
      parent.LRLong = null;
      parent.LMRLeft = null;
      parent.LMRMiddle = null;
      parent.LMRRight = null;
      parent.getDiv = function (divType) {
        switch (divType) {
          case this.divTypes.LRLeft:
            if (!parent.LRLeft) {
              var LRLeftId = getElementGlobalID();
              var pageBody = $(
                "<div class='DiagnosisLRLeft' id='" + LRLeftId + "'></div>"
              );
              pageBody.appendTo(parent);
              parent.LRLeft = document.getElementById(LRLeftId);
              parent.LRLong = null;
            }
            return parent.LRLeft;
            break;
          case this.divTypes.LRRight:
            if (!parent.LRRight) {
              var LRRightId = getElementGlobalID();
              var pageBody = $(
                "<div class='DiagnosisLRRight' id='" + LRRightId + "'></div>"
              );
              pageBody.appendTo(parent);
              parent.LRRight = document.getElementById(LRRightId);
              parent.LRLong = null;
            }
            return parent.LRRight;
            break;
          case this.divTypes.Long:
            if (!parent.LRLong) {
              var LRLongId = getElementGlobalID();
              var pageBody = $(
                "<div class='DiagnosisLong' id='" + LRLongId + "'></div>"
              );
              pageBody.appendTo(parent);
              parent.LRLong = document.getElementById(LRLongId);
              parent.LRLeft = null;
              parent.LRRight = null;
              parent.LMRLeft = null;
              parent.LMRMiddle = null;
              parent.LMRRight = null;
            }
            return parent.LRLong;
            break;
          case this.divTypes.LMRLeft:
            if (!parent.LMRLeft) {
              var LMRLeftId = getElementGlobalID();
              var pageBody = $(
                "<div class='DiagnosisLMRLeft' id='" + LMRLeftId + "'></div>"
              );
              pageBody.appendTo(parent);
              parent.LMRLeft = document.getElementById(LMRLeftId);
              parent.LRLong = null;
            }
            return parent.LMRLeft;
            break;
          case this.divTypes.LMRMiddle:
            if (!parent.LMRMiddle) {
              var LMRMiddleId = getElementGlobalID();
              var pageBody = $(
                "<div class='DiagnosisLMRMiddle' id='" +
                  LMRMiddleId +
                  "'></div>"
              );
              pageBody.appendTo(parent);
              parent.LMRMiddle = document.getElementById(LMRMiddleId);
              parent.LRLong = null;
            }
            return parent.LMRMiddle;
            break;
          case this.divTypes.LMRRight:
            if (!parent.LMRRight) {
              var LMRRightId = getElementGlobalID();
              var pageBody = $(
                "<div class='DiagnosisLMRRight' id='" + LMRRightId + "'></div>"
              );
              pageBody.appendTo(parent);
              parent.LMRRight = document.getElementById(LMRRightId);
              parent.LRLong = null;
            }
            return parent.LMRRight;
            break;
          default:
            return null;
            break;
        }
      }.bind(this);

      var updateView = function () {
        if (emosWS.login.au.hasPaintShopRight(visibleRight)) {
          //tabs.tabs("enable", tabid);
          //parent.show();
          parent.get(0).style.display = "block";
        } else {
          //tabs.tabs("disable", tabid);
          //parent.hide();
          parent.get(0).style.display = "none";
        }
      };

      //for (var key in data) {
      sortHashArray(data).forEach(
        function (key) {
          console.log(key);
          var elementData = data[key];
          if (typeof elementData === "object") {
            //var elementID = getElementGlobalID();
            var objectType = ADiagnosisCommon.getObjectType(key);
            //console.info("[appendPage] " + key);
            switch (objectType) {
              case "AlarmClient":
                new AAlarmClient(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  extra
                );
                break;
              case "AddText":
                new ADiagnosisText(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddString":
                new ADiagnosisString(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this
                );
                break;
              case "AddStringInput":
                new ADiagnosisString(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this
                );
                break;
              case "AddStringLong":
                elementData.Position = "Long";
                new ADiagnosisString(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this
                );
                break;
              case "AddStringInputLong":
                elementData.Position = "Long";
                new ADiagnosisString(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this
                );
                break;
              case "AddStringFieldLong":
                elementData.Position = "Long";
                new ADiagnosisStringField(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddTextLong":
              case "AddHeadLine":
                elementData.Position = "Long";
                new ADiagnosisText(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddTextLED":
                new ADiagnosisTextLED(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this
                );
                break;
              case "AddTextLEDLong":
                elementData.Position = "Long";
                new ADiagnosisTextLED(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this
                );
                break;
              case "AddTextInputLED":
                new ADiagnosisTextLED(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this
                );
                break;
              //case "AddTextInputLEDLong":
              case "AddTextLEDInputLong":
                elementData.Position = "Long";
                new ADiagnosisTextLED(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this
                );
                break;
              case "AddTextLEDNiveau":
                new ADiagnosisTextLED(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this
                );
                break;
              case "AddTextInteger":
              case "AddTextReal":
                new ADiagnosisTextNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this
                );
                break;
              case "AddTextIntegerLong":
              case "AddTextRealLong":
                elementData.Position = "Long";
                new ADiagnosisTextNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this
                );
                break;
              case "AddTextIntegerInput":
              case "AddTextRealInput":
              case "AddTextRealInputNiveau":
                new ADiagnosisTextNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this
                );
                break;
              case "AddTextIntegerInputLong":
              case "AddTextRealInputLong":
                elementData.Position = "Long";
                new ADiagnosisTextNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this
                );
                break;
              case "AddTextIntegerIntegerLong":
                elementData.Position = "Long";
                new ADiagnosisTextNumberNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this.dataTypes.Integer,
                  false,
                  this
                );
                break;
              case "AddTextRealRealLong":
                elementData.Position = "Long";
                new ADiagnosisTextNumberNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this.dataTypes.Real,
                  false,
                  this
                );
                break;
              case "AddTextIntegerIntegerInputLong":
                elementData.Position = "Long";
                new ADiagnosisTextNumberNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this.dataTypes.Integer,
                  true,
                  this
                );
                break;
              case "AddTextRealRealInputLong":
                elementData.Position = "Long";
                new ADiagnosisTextNumberNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this.dataTypes.Real,
                  true,
                  this
                );
                break;
              case "AddLEDTextIntegerLong":
              case "AddTextLEDIntegerLong":
              case "AddLEDTextRealLong":
                elementData.Position = "Long";
                new ADiagnosisLedTextNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this
                );
                break;
              case "AddLEDTextIntegerInputLong":
              case "AddTextLEDIntegerInputLong":
              case "AddLEDTextRealInputLong":
                elementData.Position = "Long";
                new ADiagnosisLedTextNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this
                );
                break;
              case "AddLEDTextRealRealLong":
                elementData.Position = "Long";
                new ADiagnosisLedTextNumberNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this
                );
                break;
              case "AddLEDTextRealRealInputLong":
                elementData.Position = "Long";
                new ADiagnosisLedTextNumberNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this
                );
                break;
              case "AddSpace":
                new ADiagnosisSpace(parent, elementData);
                break;
              case "AddSpaceLong":
                elementData.Position = "Long";
                new ADiagnosisSpace(parent, elementData);
                break;
              case "AddBar":
                new ADiagnosisBar(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddBitBar":
                new ADiagnosisBitBar(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "CreateControlNetArray":
                elementData.Position = "Long";
                new ADiagnosisControlNetArray(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddBrowserPage":
                elementData.Position = "Long";
                new ADiagnosisBrowserPage(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddSetpointBar":
                new ADiagnosisSetpointBar(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddSetpointRampBar":
                elementData.Position = "M";
                new ADiagnosisSetpointRampBar(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddPageControl":
                new APageControl(parent, elementData, this);
                break;
              case "AddDoubleTextLong":
                elementData.Position = "Long";
                new ADiagnosisDoubleText(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddTextTimerLong":
                elementData.Position = "Long";
                new ADiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  AtimerTypes.Second,
                  false,
                  this
                );
                break;
              case "AddTextTimerInputLong":
                elementData.Position = "Long";
                new ADiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  AtimerTypes.Second,
                  true,
                  this
                );
                break;
              case "AddTextSiemensDateLong":
                elementData.Position = "Long";
                new ADiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  AtimerTypes.SiemensDate,
                  false,
                  this
                );
                break;
              case "AddTextSiemensDateInputLong":
                elementData.Position = "Long";
                new ADiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  AtimerTypes.SiemensDate,
                  true,
                  this
                );
                break;
              case "AddTextSiemensTimeLong":
                elementData.Position = "Long";
                new ADiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  AtimerTypes.SiemensTimeOfDay,
                  false,
                  this
                );
                break;
              case "AddTextSiemensTimeInputLong":
                elementData.Position = "Long";
                new ADiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  AtimerTypes.SiemensTimeOfDay,
                  true,
                  this
                );
                break;
              case "AddTextSiemens_TIME_TimerLong":
                elementData.Position = "Long";
                new ADiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  AtimerTypes.SiemensTime,
                  false,
                  this
                );
                break;
              case "AddTextSiemens_TIME_TimerInputLong":
                elementData.Position = "Long";
                new ADiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  AtimerTypes.SiemensTime,
                  true,
                  this
                );
                break;
              case "AddTextSiemens_S5TIME_TimerLong":
                elementData.Position = "Long";
                new ADiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  AtimerTypes.SiemensS5Time,
                  false,
                  this
                );
                break;
              case "AddTextSiemens_S5TIME_TimerInputLong":
                elementData.Position = "Long";
                new ADiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  AtimerTypes.SiemensS5Time,
                  true,
                  this
                );
                break;
              case "AddTextSiemens_DATE_AND_TIME_TimerLong":
                elementData.Position = "Long";
                new ADiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  AtimerTypes.SiemensDateAndTime,
                  false,
                  this
                );
                break;
              case "AddTextSiemens_DATE_AND_TIME_TimerInputLong":
                elementData.Position = "Long";
                new ADiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  AtimerTypes.SiemensDateAndTime,
                  true,
                  this
                );
                break;
              case "AddTextDoubleTimerLong":
                elementData.Position = "Long";
                new ADiagnosisTextDoubleTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  false,
                  this
                );
                break;
              case "AddTextDoubleTimerInputLong":
                elementData.Position = "Long";
                new ADiagnosisTextDoubleTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  true,
                  this
                );
                break;
              case "AddTextDoubleTimerLongMin":
                elementData.Position = "Long";
                new ADiagnosisTextDoubleTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  false,
                  this
                );
                break;
              case "AddTextDoubleTimerInputLongMin":
                elementData.Position = "Long";
                new ADiagnosisTextDoubleTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  true,
                  this
                );
                break;

              case "AddChildWindow":
                elementData.Position = "Long";
                new ADiagnosisChildWindow(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;

              default:
                new AGeneralElement(parent, { Text: objectType }, this);
                break;
            }
          }
        }.bind(this)
      );
      updateView();

      emosWS.addEventListener("UserRight", updateView);
    } catch (err) {
      console.log("appendPage failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.appendElement = function (parent, data) {
    try {
      var id = getElementGlobalID();
      var tabshtml = $("<div id='" + id + "'><ul></ul></div>");
      tabshtml.appendTo(parent);
      //var tabs = $("#" + id).tabs();
      var tabs = tabshtml.tabs();
      var ul = tabs.find("ul");
      //for (var key in data) {
      sortHashArray(data).forEach(
        function (key) {
          if (typeof data[key] === "object") {
            console.info("[appendElement] " + key);
            var tabID = id + key;
            $("<li><a href='#" + tabID + "'>" + tabID + "</a></li>").appendTo(
              ul
            );
            var tab = $("<div id='" + tabID + "'></div>");
            tab.appendTo(tabs);
            this.appendElement(tab, data[key]);
          } else {
            $("<p>" + key + " = " + data[key] + "</p>").appendTo(tabs);
          }
        }.bind(this)
      );
      tabs.tabs("refresh");
    } catch (err) {
      console.log("appendElement failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.getNewJSON = function (inode) {
    try {
      var node = inode,
        elements = [],
        params = {},
        newnode = {
          type: "DiagnosisWindow",
          params: params,
          elements: elements,
        };
      for (var key in node) {
        var matched = false,
          elementName = null,
          e = node[key];
        if (typeof e === "object") {
          node[key] = e = this.getNewJSON(e);
        }

        if (["Head", "PageControl"].indexOf(key) > -1) {
          matched = true;
          elementName = key;
        } else {
          key.replace(/\d*-(.*)/, function (m, element) {
            matched = true;
            elementName = element;
          });
        }

        if (!matched) {
          params[key] = e;
        } else {
          e.type = elementName;
          elements.push(e);
        }
      }
      return newnode;
    } catch (err) {
      console.log("convertToNewJSON failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.createDiagnosisWindow = function () {
    try {
      if (this.windowData) {
        var id = getElementGlobalID();
        this.appendWindow(id);
        console.log("createDiagnosisWindow", this.windowData);
      }
    } catch (err) {
      console.log("createDiagnosisWindow failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.informParent = function () {
    var id = new Date().getUTCMilliseconds() + "";
    this.rid = id;
    emosWS.attr.diagnosisMap[id] = this;
    emosWS.informParent({
      type: "OpenDiagnosisWindow",
      id: id,
      PLC: this.PLC,
      Tag: this.ID,
      DiagnosisLibID: this.DiagnosisLibID,
      DiagnosisControl: this.DiagnosisControl,
      GroupRightIndex: this.GroupRightIndex,
      testURL: this.testURL, // um eine URL in das Statusfenster zu laden!!!!!
      data: {
        childWindows: this.childWindows,
        childWindowsData: this.childWindowsData,
        windowData: this.windowData,
        winName: this.winName,
      },
    });
  };

  ADiagnosisWindow.prototype.animate = function () {};

  ADiagnosisWindow.prototype.getTag = function () {
    return this.DiagnosisLibID + "::Name::" + this.DiagnosisControl;
  };

  ADiagnosisWindow.prototype.getTagByCode = function (code) {
    var s = this.DiagnosisLibID + "::Code::";
    code.replace(/([a-zA-Z]*)/, function (m, subcode) {
      s += subcode;
    });
    return s;
  };

  ADiagnosisWindow.prototype.adviseDiagnosisData = function (
    diagnosisControl,
    callback
  ) {
    try {
      if (this.DiagnosisControl.indexOf("null") > -1) return;

      this.setDiagnosisControl0(diagnosisControl);
      this.adviseChildWindows();
      if ([1, 3, 5].indexOf(parseInt(this.DiagnosisLibID)) === -1 && callback) {
        callback();
        return;
      }
      emosWS.advise(
        this.getTag(),
        function (msg) {
          this.winName = this.DiagnosisControl;
          this.windowData = msg.value;
          this.rootVersion = this.windowData.Version;
          this.setDiagnosisControl0(diagnosisControl);
          if (callback)
            setTimeout(function () {
              callback();
            }, 100);

          emosWS.advise(
            this.PLC + this.ID + "." + this.windowData.OPCVersionID,
            function (msg) {
              var version = msg.value;
              //rootVersion = this.rootVersion.replace(/(..)-../, "$1");
              this.plcVersion = version;
              this.PLCType = version.replace(/(.)..../, "$1");
              version.replace(
                /.(\d\d)../,
                function (m, v) {
                  //if (rootVersion === v) {
                  var versionSuffix = "." + v;
                  emosWS.advise(
                    this.getTag() + versionSuffix,
                    function (msg) {
                      if (msg.value.OPCVersionID !== "EMOSDEFAULT") {
                        this.windowData = msg.value;
                        this.winName = this.windowData.Name;
                        this.rootVersion = this.windowData.Version;
                        this.setDiagnosisControl0(diagnosisControl);
                      }
                      if (callback) callback();
                      //console.info(msg);
                    }.bind(this),
                    "",
                    emosWS.tagType.Diagnosis
                  );
                  //} else {
                  //    if (callback)
                  //        callback();
                  //}
                }.bind(this)
              );
            }.bind(this),
            ""
          );
        }.bind(this),
        "",
        emosWS.tagType.Diagnosis
      );
    } catch (err) {
      console.log("ADiagnosisWindow adviseDiagnosisData failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.doCondition = function () {
    try {
      var value = this.conditionFunction();
      this.DiagnosisLibID = value.DiagnosisLibID;
      this.PLC = value.PLC;
      this.ID = value.ID;
      this.DiagnosisControl = value.DiagnosisControl;
      this.GroupRightIndex = value.GroupRightIndex;
      this.Enabled = value.Enabled;
      this.adviseDiagnosisData(value.DiagnosisControl);
    } catch (err) {
      console.log("ADiagnosisWindow doCondition failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.setDiagnosisControl0 = function (s) {
    try {
      if (!s.match(/.htm/) && typeof s !== "undefined") {
        //Separator = ";" or ",": new version
        var isNew = /[,;]/.test(s);
        if (isNew) {
          this.childWindows = s.split(/[,;]/);
          this.DiagnosisControl = this.childWindows.shift();
        } else {
          //Separator = "." : old version
          s.replace(
            /(\w*).?(\w*)?/,
            function (m, fu, childs) {
              this.DiagnosisControl = fu;
              if (childs) {
                childs = childs.match(/([a-zA-Z]+\d*)/g);
                if (childs) this.childWindows = childs;
              }
            }.bind(this)
          );
        }
      }
    } catch (err) {
      console.log("ADiagnosisWindow setDiagnosisControl failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.adviseChildWindows = function () {
    try {
      if (this.childWindows)
        this.childWindows.forEach(
          function (code) {
            emosWS.advise(
              this.getTagByCode(code),
              function (msg) {
                v = msg.value;
                this.childWindowsData[code] = {
                  OPCID: code,
                  Name: v.Name,
                  Comment: v.Comment,
                  TextID: this.ID.substr(1) + code,
                };
              }.bind(this),
              "",
              emosWS.tagType.Diagnosis
            );
          }.bind(this)
        );
    } catch (err) {
      console.log("ADiagnosisWindow adviseChildWindows failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.appendChildData = function () {
    try {
      if (this.childWindows)
        if (
          this.childWindows.length > 0 &&
          this.windowData &&
          !this.appendedChildData
        ) {
          var index = 1000,
            options = (this.windowData.PageControl[index++ + "-AddPageTab"] = {
              Text: "Options",
              TextID: "Options",
            });

          this.childWindows.forEach(
            function (code) {
              options[index++ + "-AddChildWindow"] =
                this.childWindowsData[code];
            }.bind(this)
          );
          this.appendedChildData = true;
        }
    } catch (err) {
      console.log("ADiagnosisWindow adviseChildWindows failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.startAnimate = function () {
    try {
      setEvent(
        this.target,
        "click",
        this.onClick.bind(this),
        "pointer",
        this.svgTarget
      );
    } catch (err) {
      console.log("startAnimate failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.onClick = function () {
    try {
      this.doCondition();
      var self = this;

      if (this.Enabled) {
        if ([1, 2].indexOf(emosWS.attr.DiagnosisWindowMode) > -1) {
          setTimeout(function () {
            self.informParent();
          }, 300);
        }

        if ([0, 2].indexOf(emosWS.attr.DiagnosisWindowMode) > -1) {
          setTimeout(
            function () {
              self.createDiagnosisWindow();
            },
            self.windowData ? 0 : 300
          );
        }
      }
    } catch (err) {
      console.log("ADiagnosisWindow onClick failed: " + err);
    }
  };
  ADiagnosisWindow.prototype.initialize = function () {
    try {
      this.doCondition();
      this.startAnimate();
      console.log();
    } catch (err) {
      console.log("ADiagnosisWindow initialize failed: " + err);
    }
  };

  ADiagnosisWindow.prototype.highlight = function () {
    if (this.shape.style.fill !== this.fillHighLight)
      this.fill = this.shape.style.fill;

    this.shape.style.fill = this.fillHighLight;
  };

  ADiagnosisWindow.prototype.unhighlight = function () {
    if (this.shape.style.fill === this.fillHighLight)
      this.shape.style.fill = this.fill;
  };

  ADiagnosisWindow.prototype.terminate = function () {
    delete this;
  };

  emosWS.ESDiagnosisWindow = ADiagnosisWindow;

  function LanguageText(configuration) {
    emosWS.textNumber++;
    this.textID = configuration["textID"];
    this.target = configuration["target"];

    this.initialize();
    emosWS.dispatchEvent({ type: "HMItext" });
  }

  LanguageText.prototype.datachangeListener = function (msg) {
    try {
      setText(this.target, msg.value);
    } catch (err) {
      console.log("datachangeListener failed: " + err);
    }
  };

  LanguageText.prototype.initialize = function () {
    if (!getSVGElement(this.target)) {
      this.target += ".Text";
    }
    /*if (this.target.indexOf(".Text") < 0) {
            this.target += ".Text";
        }*/
    var self = this;
    emosWS.sendAdviseText(this.textID, "name", function (msg) {
      self.datachangeListener(msg);
    });
  };

  window.LanguageText = LanguageText;
  emosWS.LanguageText = LanguageText;

  var ALink = function (configuration) {
    emosWS.linkNumber++;
    emosWS.links.push(this);
    var page = configuration["page"];
    var shape = configuration["shape"];
    this.page = page;
    setEvent(
      shape,
      "click",
      function () {
        loadHREF(page, "");
      },
      "pointer"
    );
    emosWS.dispatchEvent({ type: "HMIlink" });
  };
  window.ALink = ALink; //temporary
  emosWS.ESLink = ALink;

  var ALinkFrame = function (configuration) {
    var page = configuration["page"];
    var target = configuration["target"];
    var shape = configuration["shape"];
    setEvent(
      shape,
      "click",
      function () {
        loadHREF(page, target);
      },
      "pointer"
    );
  };
  window.ALinkFrame = ALinkFrame; //temporary
  emosWS.ESLinkFrame = ALinkFrame;

  var ALinkDialog = function (configuration) {
    var page = configuration["page"];
    var targetFunction = configuration["target"];
    var shape = configuration["shape"];
    setEvent(shape, "click", onclick, "pointer");
    function onclick() {
      privateCallback = callback;
      targetFunction();
    }

    function callback(type, name, ispecs, replace) {
      var specs = getSpec(ispecs);
      switch (type) {
        case "window":
          window.open(page, name, specs, replace);
          break;
        case "modeless":
          createDialog(page, name, false, specs);
          break;
        case "modal":
          createDialog(page, name, true, specs);
          break;
      }
    }

    function getSpec(specs) {
      var dialogPropertiesMap = {
        dialogHeight: ["height", "string"],
        dialogWidth: ["width", "string"],
        resizable: ["resizable", "boolean"],
        dialogHide: ["hide", "boolean"],
      };

      if (specs && specs !== "") {
        var att = specs.replace(/ |px/g, "").split(";");
        specs = {};
        att.forEach(function (p) {
          var pair = p.split(":");
          if (pair.length === 2) {
            var key = pair[0],
              value = pair[1],
              mappedKey = dialogPropertiesMap[key];
            if (mappedKey) {
              specs[mappedKey[0]] =
                mappedKey[1] === "boolean" ? getBoolean(value) : value;
            }
          }
        });
      }
      return specs;
    }

    function getBoolean(value) {
      return ["yes", "on", "1"].indexOf(value) > -1;
    }

    function createDialog(page, name, imodal, specs) {
      var id = new Date().getUTCMilliseconds();
      var $newdiv1 = $(
        "<div id='" +
          id +
          "'> <iframe style='position:absolute; top:0px; left:0px; width:100%; height:100%; overflow:hidden; background-color: #EEE;border: 0px;display: block; scrolling:no;' src='" +
          page +
          "'> </iframe></div>"
      );
      $("body").append($newdiv1);
      var dialogProperties = {
        modal: imodal,
        title: name,
      };
      for (var property in specs) {
        dialogProperties[property] = specs[property];
      }
      $("#" + id).dialog(dialogProperties);
    }
  };
  window.ALinkDialog = ALinkDialog; //temporary
  emosWS.ESLinkDialog = ALinkDialog;

  var ALinkJavaScript = function (configuration) {
    var script = configuration["javascript"];
    var shape = configuration["shape"];
    setEvent(shape, "click", script, "pointer");
  };
  window.ALinkJavaScript = ALinkJavaScript; //temporary
  emosWS.ESLinkJavaScript = ALinkJavaScript;

  var JSMouseOver = function (configuration) {};
  emosWS.JSMouseOver = JSMouseOver;

  var JSMouseMove = function (configuration) {
    var mouseOverFunction = configuration["PLACEHOLDER_MOUSEOVER"];
    var mouseOutFunction = configuration["PLACEHOLDER_MOUSEOUT"];
    var useMouseOver = configuration["PLACEHOLDER_USEMOUSEOVER"];
    var useMouseOut = configuration["PLACEHOLDER_USEMOUSEOUT"];
    var resolveGroup = configuration["PLACEHOLDER_USEMOUSEOUT"];
    var shape = configuration["shape"];

    if (useMouseOver) {
      setEvent(shape, "mouseover", mouseOverFunction, "default");
    }
    if (useMouseOut) {
      setEvent(shape, "mouseout", mouseOutFunction, "default");
    }
  };
  emosWS.JSMouseMove = JSMouseMove;

  function JSDiagnosisWindow(configuration) {
    var param = configuration.conditionFunction();

    new ADiagnosisWindow({
      conditionFunction: function () {
        var DiagnosisLibID = configuration.PLACEHOLDER_DLLID;
        var PLC = param.PLC;
        var ID = param.ID;
        var DiagnosisControl = param.DCONTROL;
        var GroupRightIndex = configuration.PLACEHOLDER_GROUPRF;
        var Enabled = true;
        return {
          DiagnosisLibID: DiagnosisLibID,
          PLC: PLC,
          ID: ID,
          DiagnosisControl: DiagnosisControl,
          GroupRightIndex: GroupRightIndex,
          Enabled: Enabled,
        };
      },
      PLACEHOLDER_USEHAND: true,
      PLACEHOLDER_USESTROKE: false,
      PLACEHOLDER_USEHIDE: false,
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  }
  emosWS.JSDiagnosisWindow = JSDiagnosisWindow;

  function JSMouseClick(configuration) {
    this.onMouseClick = configuration["PLACEHOLDER_MOUSECLICK"];
    this.enableCondition = configuration["PLACEHOLDER_ENABLECONDITION"];
    this.useEnable = configuration["PLACEHOLDER_USEENABLECONDITION"];
    this.resolveGroup = configuration["PLACEHOLDER_RESOLVEGROUP"];
    this.target = configuration["shape"];
    this.enabled = true;
    ESAnimation.call(this);
  }
  JSMouseClick.prototype = Object.create(ESAnimation.prototype);
  JSMouseClick.prototype.constructor = JSMouseClick;

  JSMouseClick.prototype.mouseClickFunction = function (o, os) {
    try {
      this.onMouseClick(o, os);
    } catch (e) {
      console.error(e);
    }
  };

  JSMouseClick.prototype.enableConditionFunction = function (o, os) {
    try {
      return this.enableCondition(o, os);
    } catch (e) {
      console.error("[JSMouseClick enableConditionFunction] : " + e);
      return false;
    }
  };

  JSMouseClick.prototype.initializeMore = function () {
    if (this.useEnable) {
      var so = emosWS.shapes[this.target];
      this.enabled = so
        ? this.enableConditionFunction(so, [so])
        : this.enableConditionFunction(null, [null]);
    }

    if (this.enabled) {
      var so = emosWS.shapes[this.target];
      if (so) {
        so.addJob(this.mouseClickFunction.bind(this, so, [so]), true, true);
      } else {
        setEvent(
          this.target,
          "click",
          this.mouseClickFunction.bind(this),
          "pointer"
        );
      }
    }
    emosWS.animationData.stillInit = false;
  };

  emosWS.JSMouseClick = JSMouseClick;

  function JSDynamicText(configuration) {
    new ADynamicText({
      conditionFunction: function () {
        var Text = configuration["conditionFunction"]();
        return { Text: Text, Enabled: true };
      },
      PLACEHOLDER_SWAP_USEQUALITY: true,
      PLACEHOLDER_STROKECOLORQUALITYGOOD: "#000000",
      PLACEHOLDER_STROKECOLORQUALITYBAD: "#FF8000",
      PREFIX: configuration["PLACEHOLDER_PREFIX"],
      SUFFIX: configuration["PLACEHOLDER_SUFFIX"],
      STDPLACEHOLDER_SHAPENAME: configuration["shape"],
    });
  }

  emosWS.JSDynamicText = JSDynamicText;

  function JSColorSwap(configuration) {
    new AColorSwap({
      conditionFunction: configuration.conditionFunction,
      PLACEHOLDER_SWAP_FILLCOLOR: configuration.PLACEHOLDER_SWAP_FILLCOLOR,
      PLACEHOLDER_SWAP_STROKECOLOR: configuration.PLACEHOLDER_SWAP_STROKECOLOR,
      PLACEHOLDER_SWAP_VISIBILITY: configuration.PLACEHOLDER_SWAP_VISIBILITY,
      PLACEHOLDER_SWAP_USETRUE: true,
      PLACEHOLDER_SWAP_USEFALSE: configuration.PLACEHOLDER_SWAP_USEELSE,
      PLACEHOLDER_SWAP_USEQUALITY: false,
      PLACEHOLDER_FILLCOLOR: configuration.PLACEHOLDER_FILLCOLOR,
      PLACEHOLDER_FILLCOLORFALSE: configuration.PLACEHOLDER_FILLCOLORELSE,
      PLACEHOLDER_STROKECOLORQUALITYGOOD: "",
      PLACEHOLDER_STROKECOLORQUALITYBAD: "",
      PLACEHOLDER_STROKECOLOR: configuration.PLACEHOLDER_STROKECOLOR,
      PLACEHOLDER_STROKECOLORFALSE: configuration.PLACEHOLDER_STROKECOLORELSE,
      PLACEHOLDER_VISIBILITY: configuration.PLACEHOLDER_VISIBILITY,
      PLACEHOLDER_VISIBILITYFALSE: configuration.PLACEHOLDER_VISIBILITYELSE,
      PLACEHOLDER_SWAP_HIDEIFQUALITYBAD: false,
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  }
  emosWS.JSColorSwap = JSColorSwap;

  function JSColorRange(configuration) {
    new AColorState({
      conditionFunction: configuration.conditionFunction,
      PLACEHOLDER_USEFILLCOLOR: configuration.PLACEHOLDER_SWAP_FILLCOLOR,
      PLACEHOLDER_FILLCOLOR1: configuration.PLACEHOLDER_FILLCOLOR1,
      PLACEHOLDER_FILLCOLOR2: configuration.PLACEHOLDER_FILLCOLOR2,
      PLACEHOLDER_FILLCOLOR3: configuration.PLACEHOLDER_FILLCOLOR3,
      PLACEHOLDER_FILLCOLOR4: configuration.PLACEHOLDER_FILLCOLOR4,
      PLACEHOLDER_FILLCOLOR5: configuration.PLACEHOLDER_FILLCOLOR5,
      PLACEHOLDER_FILLCOLOR6: configuration.PLACEHOLDER_FILLCOLOR5,
      PLACEHOLDER_FILLCOLOR7: configuration.PLACEHOLDER_FILLCOLOR5,
      PLACEHOLDER_FILLCOLOR8: configuration.PLACEHOLDER_FILLCOLOR5,
      PLACEHOLDER_USESTROKECOLOR: configuration.PLACEHOLDER_SWAP_STROKECOLOR,
      PLACEHOLDER_STROKECOLOR1: configuration.PLACEHOLDER_STROKECOLOR1,
      PLACEHOLDER_STROKECOLOR2: configuration.PLACEHOLDER_STROKECOLOR2,
      PLACEHOLDER_STROKECOLOR3: configuration.PLACEHOLDER_STROKECOLOR3,
      PLACEHOLDER_STROKECOLOR4: configuration.PLACEHOLDER_STROKECOLOR4,
      PLACEHOLDER_STROKECOLOR5: configuration.PLACEHOLDER_STROKECOLOR5,
      PLACEHOLDER_STROKECOLOR6: configuration.PLACEHOLDER_STROKECOLOR5,
      PLACEHOLDER_STROKECOLOR7: configuration.PLACEHOLDER_STROKECOLOR5,
      PLACEHOLDER_STROKECOLOR8: configuration.PLACEHOLDER_STROKECOLOR5,
      PLACEHOLDER_USEVISIBILITY: configuration.PLACEHOLDER_SWAP_VISIBILITY,
      PLACEHOLDER_VISIBILITY1: getVisibility(
        configuration.PLACEHOLDER_VISIBILITY1
      ),
      PLACEHOLDER_VISIBILITY2: getVisibility(
        configuration.PLACEHOLDER_VISIBILITY2
      ),
      PLACEHOLDER_VISIBILITY3: getVisibility(
        configuration.PLACEHOLDER_VISIBILITY3
      ),
      PLACEHOLDER_VISIBILITY4: getVisibility(
        configuration.PLACEHOLDER_VISIBILITY4
      ),
      PLACEHOLDER_VISIBILITY5: getVisibility(
        configuration.PLACEHOLDER_VISIBILITY5
      ),
      PLACEHOLDER_VISIBILITY6: getVisibility(
        configuration.PLACEHOLDER_VISIBILITY5
      ),
      PLACEHOLDER_VISIBILITY7: getVisibility(
        configuration.PLACEHOLDER_VISIBILITY5
      ),
      PLACEHOLDER_VISIBILITY8: getVisibility(
        configuration.PLACEHOLDER_VISIBILITY5
      ),
      PLACEHOLDER_LIMIT12: configuration.PLACEHOLDER_LIMIT12,
      PLACEHOLDER_LIMIT23: configuration.PLACEHOLDER_LIMIT23,
      PLACEHOLDER_LIMIT34: configuration.PLACEHOLDER_LIMIT34,
      PLACEHOLDER_LIMIT45: configuration.PLACEHOLDER_LIMIT45,
      PLACEHOLDER_LIMIT56: configuration.PLACEHOLDER_LIMIT45,
      PLACEHOLDER_LIMIT67: configuration.PLACEHOLDER_LIMIT45,
      PLACEHOLDER_LIMIT78: configuration.PLACEHOLDER_LIMIT45,
      PLACEHOLDER_USEQUALITY: false,
      PLACEHOLDER_STROKECOLORQUALITYGOOD: "#000000",
      PLACEHOLDER_STROKECOLORQUALITYBAD: "#FF8000",
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  }
  emosWS.JSColorRange = JSColorRange;

  function JSIOPosition(configuration) {
    var param = configuration.conditionFunction();

    new emosWS.ESPosition({
      conditionFunction: function () {
        var Value = GetTagValueAsDouble(param.TAGNAME);
        var ValueMin = param.VALUEMIN;
        var ValueMax = param.VALUEMAX;
        var ValueLimitMin = ValueMin;
        var ValueLimitMax = ValueMax;
        var PositionMin = param.POSITIONMIN;
        var PositionMax = param.POSITIONMAX;
        var Enabled = true;
        return {
          Value: Value,
          ValueMin: ValueMin,
          ValueMax: ValueMax,
          ValueLimitMin: ValueLimitMin,
          ValueLimitMax: ValueLimitMax,
          PositionMin: PositionMin,
          PositionMax: PositionMax,
          Enabled: Enabled,
        };
      },
      postFunction: function () {},
      PLACEHOLDER_ORIENTATION: param.HORIZONTAL ? "Left" : "Top",
      PLACEHOLDER_ORIENTATIONR: param.HORIZONTAL ? "Right" : "Bottom",
      PLACEHOLDER_ORIENTATIONFLAG: "X",
      PLACEHOLDER_EXPANSION: param.HORIZONTAL ? "Width" : "Height",
      PLACEHOLDER_SWAP_USEQUALITY: false,
      PLACEHOLDER_STROKECOLORQUALITYGOOD: "#000000",
      PLACEHOLDER_STROKECOLORQUALITYBAD: "#FF8000",
      PLACEHOLDER_HIDEIFVALUEEXCESSIVE: false,
      PLACEHOLDER_COMMENT_X: "",
      PLACEHOLDER_COMMENT_Y: "//",
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  }
  emosWS.JSIOPosition = JSIOPosition;

  function JSAPTValveState(configuration) {
    new AColorSwap({
      conditionFunction: function () {
        var param = configuration.conditionFunction();
        return param.VALVESTATE;
      },
      PLACEHOLDER_SWAP_FILLCOLOR: true,
      PLACEHOLDER_SWAP_STROKECOLOR: false,
      PLACEHOLDER_SWAP_VISIBILITY: false,
      PLACEHOLDER_SWAP_USETRUE: true,
      PLACEHOLDER_SWAP_USEFALSE: true,
      PLACEHOLDER_SWAP_USEQUALITY: false,
      PLACEHOLDER_FILLCOLOR: configuration.PLACEHOLDER_VALVECOLOR,
      PLACEHOLDER_FILLCOLORFALSE: configuration.PLACEHOLDER_VALVECOLORELSE,
      PLACEHOLDER_STROKECOLORQUALITYGOOD: "",
      PLACEHOLDER_STROKECOLORQUALITYBAD: "",
      PLACEHOLDER_STROKECOLOR: "",
      PLACEHOLDER_STROKECOLORFALSE: "",
      PLACEHOLDER_VISIBILITY: "",
      PLACEHOLDER_VISIBILITYFALSE: "",
      PLACEHOLDER_SWAP_HIDEIFQUALITYBAD: false,
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  }
  emosWS.JSAPTValveState = JSAPTValveState;

  function JSAPTState(configuration) {
    new AColorState({
      conditionFunction: configuration.conditionFunction,
      PLACEHOLDER_USEFILLCOLOR: true,
      PLACEHOLDER_FILLCOLOR1: configuration.PLACEHOLDER_FILLCOLOR1,
      PLACEHOLDER_FILLCOLOR2: configuration.PLACEHOLDER_FILLCOLOR2,
      PLACEHOLDER_FILLCOLOR3: configuration.PLACEHOLDER_FILLCOLOR3,
      PLACEHOLDER_FILLCOLOR4: configuration.PLACEHOLDER_FILLCOLOR4,
      PLACEHOLDER_FILLCOLOR5: configuration.PLACEHOLDER_FILLCOLOR5,
      PLACEHOLDER_FILLCOLOR6: configuration.PLACEHOLDER_FILLCOLOR6,
      PLACEHOLDER_FILLCOLOR7: configuration.PLACEHOLDER_FILLCOLOR7,
      PLACEHOLDER_FILLCOLOR8: configuration.PLACEHOLDER_FILLCOLOR8,
      PLACEHOLDER_USESTROKECOLOR: false,
      PLACEHOLDER_STROKECOLOR1: "",
      PLACEHOLDER_STROKECOLOR2: "",
      PLACEHOLDER_STROKECOLOR3: "",
      PLACEHOLDER_STROKECOLOR4: "",
      PLACEHOLDER_STROKECOLOR5: "",
      PLACEHOLDER_STROKECOLOR6: "",
      PLACEHOLDER_STROKECOLOR7: "",
      PLACEHOLDER_STROKECOLOR8: "",
      PLACEHOLDER_USEVISIBILITY: true,
      PLACEHOLDER_VISIBILITY1: true,
      PLACEHOLDER_VISIBILITY2: true,
      PLACEHOLDER_VISIBILITY3: true,
      PLACEHOLDER_VISIBILITY4: true,
      PLACEHOLDER_VISIBILITY5: true,
      PLACEHOLDER_VISIBILITY6: true,
      PLACEHOLDER_VISIBILITY7: true,
      PLACEHOLDER_VISIBILITY8: true,
      PLACEHOLDER_LIMIT12: configuration.PLACEHOLDER_LIMIT12,
      PLACEHOLDER_LIMIT23: configuration.PLACEHOLDER_LIMIT23,
      PLACEHOLDER_LIMIT34: configuration.PLACEHOLDER_LIMIT34,
      PLACEHOLDER_LIMIT45: configuration.PLACEHOLDER_LIMIT45,
      PLACEHOLDER_LIMIT56: configuration.PLACEHOLDER_LIMIT56,
      PLACEHOLDER_LIMIT67: configuration.PLACEHOLDER_LIMIT67,
      PLACEHOLDER_LIMIT78: configuration.PLACEHOLDER_LIMIT78,
      PLACEHOLDER_USEQUALITY: false,
      PLACEHOLDER_STROKECOLORQUALITYGOOD: "#000000",
      PLACEHOLDER_STROKECOLORQUALITYBAD: "#FF8000",
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  }
  emosWS.JSAPTState = JSAPTState;

  function JSIOBit(configuration) {
    var tag = configuration.conditionFunction();

    function conditionFunction() {
      var condition = GetTagValueAsBoolean(tag);
      return configuration.PLACEHOLDER_TAGINVERTING === ""
        ? condition
        : !condition;
    }

    if (configuration.PLACEHOLDER_BLINKACTIVE) {
      new AColorBlink({
        conditionFunction: conditionFunction,
        PLACEHOLDER_SWAP_FILLCOLOR: configuration.PLACEHOLDER_SWAP_FILLCOLOR,
        PLACEHOLDER_SWAP_STROKECOLOR: false,
        PLACEHOLDER_SWAP_VISIBILITY: configuration.PLACEHOLDER_SWAP_VISIBILITY,
        PLACEHOLDER_SWAP_USEFALSE: true,
        PLACEHOLDER_SWAP_USEQUALITY:
          configuration.PLACEHOLDER_USEQUALITYPROPERTY,
        PLACEHOLDER_FILLCOLORON: configuration.PLACEHOLDER_FILLCOLORON,
        PLACEHOLDER_FILLCOLOROFF: configuration.PLACEHOLDER_FILLCOLOROFF,
        PLACEHOLDER_FILLCOLORFALSE: configuration.PLACEHOLDER_FILLCOLORNOBLINK,
        PLACEHOLDER_STROKECOLORQUALITYGOOD:
          configuration.PLACEHOLDER_QUALITYCOLORGOOD,
        PLACEHOLDER_STROKECOLORQUALITYBAD:
          configuration.PLACEHOLDER_QUALITYCOLORBAD,
        PLACEHOLDER_STROKECOLORON: "",
        PLACEHOLDER_STROKECOLOROFF: "",
        PLACEHOLDER_STROKECOLORFALSE: "",
        PLACEHOLDER_VISIBILITYON: getVisibility(
          configuration.PLACEHOLDER_VISIBILITYON
        ),
        PLACEHOLDER_VISIBILITYOFF: getVisibility(
          configuration.PLACEHOLDER_VISIBILITYOFF
        ),
        PLACEHOLDER_VISIBILITYFALSE: getVisibility(
          configuration.PLACEHOLDER_VISIBILITYNOBLINK
        ),
        STDPLACEHOLDER_SHAPENAME: configuration.shape,
      });
    } else {
      new AColorSwap({
        conditionFunction: conditionFunction,
        PLACEHOLDER_SWAP_FILLCOLOR: configuration.PLACEHOLDER_SWAP_FILLCOLOR,
        PLACEHOLDER_SWAP_STROKECOLOR: false,
        PLACEHOLDER_SWAP_VISIBILITY: configuration.PLACEHOLDER_SWAP_VISIBILITY,
        PLACEHOLDER_SWAP_USETRUE: true,
        PLACEHOLDER_SWAP_USEFALSE: true,
        PLACEHOLDER_SWAP_USEQUALITY:
          configuration.PLACEHOLDER_USEQUALITYPROPERTY,
        PLACEHOLDER_FILLCOLOR: configuration.PLACEHOLDER_FILLCOLORON,
        PLACEHOLDER_FILLCOLORFALSE: configuration.PLACEHOLDER_FILLCOLOROFF,
        PLACEHOLDER_STROKECOLORQUALITYGOOD:
          configuration.PLACEHOLDER_QUALITYCOLORGOOD,
        PLACEHOLDER_STROKECOLORQUALITYBAD:
          configuration.PLACEHOLDER_QUALITYCOLORBAD,
        PLACEHOLDER_STROKECOLOR: "",
        PLACEHOLDER_STROKECOLORFALSE: "",
        PLACEHOLDER_VISIBILITY: getVisibility(
          configuration.PLACEHOLDER_VISIBILITYON
        ),
        PLACEHOLDER_VISIBILITYFALSE: getVisibility(
          configuration.PLACEHOLDER_VISIBILITYOFF
        ),
        PLACEHOLDER_SWAP_HIDEIFQUALITYBAD: false,
        STDPLACEHOLDER_SHAPENAME: configuration.shape,
      });
    }
  }
  emosWS.JSIOBit = JSIOBit;

  function JSBlink(configuration) {
    new AColorBlink({
      conditionFunction: configuration.conditionFunction,
      PLACEHOLDER_SWAP_FILLCOLOR: configuration.PLACEHOLDER_SWAP_FILLCOLOR,
      PLACEHOLDER_SWAP_STROKECOLOR: configuration.PLACEHOLDER_SWAP_STROKECOLOR,
      PLACEHOLDER_SWAP_VISIBILITY: configuration.PLACEHOLDER_SWAP_VISIBILITY,
      PLACEHOLDER_SWAP_USEFALSE: true,
      PLACEHOLDER_SWAP_USEQUALITY: false,
      PLACEHOLDER_FILLCOLORON: configuration.PLACEHOLDER_FILLCOLORON,
      PLACEHOLDER_FILLCOLOROFF: configuration.PLACEHOLDER_FILLCOLOROFF,
      PLACEHOLDER_FILLCOLORFALSE: configuration.PLACEHOLDER_FILLCOLORNOBLINK,
      PLACEHOLDER_STROKECOLORQUALITYGOOD: "",
      PLACEHOLDER_STROKECOLORQUALITYBAD: "",
      PLACEHOLDER_STROKECOLORON: configuration.PLACEHOLDER_STROKECOLORON,
      PLACEHOLDER_STROKECOLOROFF: configuration.PLACEHOLDER_STROKECOLOROFF,
      PLACEHOLDER_STROKECOLORFALSE:
        configuration.PLACEHOLDER_STROKECOLORNOBLINK,
      PLACEHOLDER_VISIBILITYON: configuration.PLACEHOLDER_VISIBILITYON,
      PLACEHOLDER_VISIBILITYOFF: configuration.PLACEHOLDER_VISIBILITYOFF,
      PLACEHOLDER_VISIBILITYFALSE: configuration.PLACEHOLDER_VISIBILITYNOBLINK,
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  }
  emosWS.JSBlink = JSBlink;

  function JSIOAlarm(configuration) {
    new AAlarm({
      conditionFunction: function () {
        var AlarmGroup = configuration.conditionFunction();
        var Enabled = true;
        var EnabledAck = false;
        return {
          AlarmGroup: AlarmGroup,
          Enabled: Enabled,
          EnabledAck: EnabledAck,
        };
      },
      PLACEHOLDER_NEW_ENABLED: true,
      PLACEHOLDER_NEW_FILLCOLOR: configuration.PLACEHOLDER_ALARMCOLOR0,
      PLACEHOLDER_NEW_BLINKING: configuration.PLACEHOLDER_ALARMBLINK0,
      PLACEHOLDER_NEW_VISIBLE: true,
      PLACEHOLDER_ACK_ENABLED: true,
      PLACEHOLDER_ACK_FILLCOLOR: configuration.PLACEHOLDER_ALARMCOLOR1,
      PLACEHOLDER_ACK_BLINKING: configuration.PLACEHOLDER_ALARMBLINK1,
      PLACEHOLDER_ACK_VISIBLE: true,
      PLACEHOLDER_NO_ENABLED: true,
      PLACEHOLDER_NO_FILLCOLOR: configuration.PLACEHOLDER_ALARMCOLOR2,
      PLACEHOLDER_NO_BLINKING: configuration.PLACEHOLDER_ALARMBLINK2,
      PLACEHOLDER_NO_VISIBLE: true,
      PLACEHOLDER_FILLCOLORNOBLINK:
        configuration.PLACEHOLDER_ALARMCOLORBACKGROUND,
      PLACEHOLDER_SWAP_USEQUALITY: configuration.PLACEHOLDER_USEQUALITYPROPERTY,
      PLACEHOLDER_STROKECOLORQUALITYGOOD:
        configuration.PLACEHOLDER_QUALITYCOLORGOOD,
      PLACEHOLDER_STROKECOLORQUALITYBAD:
        configuration.PLACEHOLDER_QUALITYCOLORBAD,
      PLACEHOLDER_USEHAND: false,
      PLACEHOLDER_USESTROKE: false,
      PLACEHOLDER_USEHIDE: false,
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  }
  emosWS.JSIOAlarm = JSIOAlarm;

  function JSIOMultiAlarm(configuration) {
    var alarms = configuration.conditionFunction();
    var alarmsString = "";
    for (var i = 0, len = alarms.length; i < len; i++) {
      alarmsString += alarms[i] + "; ";
    }
    new emosWS.ESAlarms({
      conditionFunction: function () {
        return { Enabled: true, EnabledAck: false };
      },
      PLACEHOLDER_ALARMGROUPS: alarmsString,
      PLACEHOLDER_NEW_ENABLED: true,
      PLACEHOLDER_NEW_FILLCOLOR: configuration.PLACEHOLDER_ALARMCOLOR0,
      PLACEHOLDER_NEW_BLINKING: configuration.PLACEHOLDER_ALARMBLINK0,
      PLACEHOLDER_NEW_VISIBLE: true,
      PLACEHOLDER_ACK_ENABLED: true,
      PLACEHOLDER_ACK_FILLCOLOR: configuration.PLACEHOLDER_ALARMCOLOR1,
      PLACEHOLDER_ACK_BLINKING: configuration.PLACEHOLDER_ALARMBLINK1,
      PLACEHOLDER_ACK_VISIBLE: true,
      PLACEHOLDER_NO_ENABLED: true,
      PLACEHOLDER_NO_FILLCOLOR: configuration.PLACEHOLDER_ALARMCOLOR2,
      PLACEHOLDER_NO_BLINKING: configuration.PLACEHOLDER_ALARMBLINK2,
      PLACEHOLDER_NO_VISIBLE: true,
      PLACEHOLDER_FILLCOLORNOBLINK:
        configuration.PLACEHOLDER_ALARMCOLORBACKGROUND,
      PLACEHOLDER_SWAP_USEQUALITY: configuration.PLACEHOLDER_USEQUALITYPROPERTY,
      PLACEHOLDER_STROKECOLORQUALITYGOOD:
        configuration.PLACEHOLDER_QUALITYCOLORGOOD,
      PLACEHOLDER_STROKECOLORQUALITYBAD:
        configuration.PLACEHOLDER_QUALITYCOLORBAD,
      PLACEHOLDER_USEHAND: false,
      PLACEHOLDER_USESTROKE: false,
      PLACEHOLDER_USEHIDE: false,
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  }
  emosWS.JSIOMultiAlarm = JSIOMultiAlarm;

  var JSIOMultiAlarmPriority = function (configuration) {};
  emosWS.JSIOMultiAlarmPriority = JSIOMultiAlarmPriority;

  function JSIOAlarmShow(configuration) {
    var svgElement = getSVGElement(configuration.shape);
    if (this.svgElement) {
      var originalFillColor = this.svgElement.getAttribute("fill");
    }

    new AAlarm({
      conditionFunction: function () {
        var AlarmGroup = configuration.conditionFunction();
        var Enabled = true;
        var EnabledAck = false;
        return {
          AlarmGroup: AlarmGroup,
          Enabled: Enabled,
          EnabledAck: EnabledAck,
        };
      },
      PLACEHOLDER_NEW_ENABLED: true,
      PLACEHOLDER_NEW_FILLCOLOR: originalFillColor,
      PLACEHOLDER_NEW_BLINKING: false,
      PLACEHOLDER_NEW_VISIBLE: getVisibility(
        configuration.PLACEHOLDER_VISIBILITY0
      ),
      PLACEHOLDER_ACK_ENABLED: true,
      PLACEHOLDER_ACK_FILLCOLOR: originalFillColor,
      PLACEHOLDER_ACK_BLINKING: false,
      PLACEHOLDER_ACK_VISIBLE: getVisibility(
        configuration.PLACEHOLDER_VISIBILITY1
      ),
      PLACEHOLDER_NO_ENABLED: true,
      PLACEHOLDER_NO_FILLCOLOR: originalFillColor,
      PLACEHOLDER_NO_BLINKING: false,
      PLACEHOLDER_NO_VISIBLE: getVisibility(
        configuration.PLACEHOLDER_VISIBILITY2
      ),
      PLACEHOLDER_FILLCOLORNOBLINK: originalFillColor,
      PLACEHOLDER_SWAP_USEQUALITY: configuration.PLACEHOLDER_USEQUALITYPROPERTY,
      PLACEHOLDER_STROKECOLORQUALITYGOOD:
        configuration.PLACEHOLDER_QUALITYCOLORGOOD,
      PLACEHOLDER_STROKECOLORQUALITYBAD:
        configuration.PLACEHOLDER_QUALITYCOLORBAD,
      PLACEHOLDER_USEHAND: false,
      PLACEHOLDER_USESTROKE: false,
      PLACEHOLDER_USEHIDE: false,
      useVisible: true,
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  }

  emosWS.JSIOAlarmShow = JSIOAlarmShow;

  function JSIORead(configuration) {
    var param = configuration.conditionFunction();
    new ADynamicText({
      conditionFunction: function () {
        var Text = GetTagValueAsString(param.TAGNAME);
        return { Text: Text, Enabled: true };
      },
      PLACEHOLDER_SWAP_USEQUALITY: configuration.PLACEHOLDER_USEQUALITYPROPERTY,
      PLACEHOLDER_STROKECOLORQUALITYGOOD:
        configuration.PLACEHOLDER_QUALITYCOLORGOOD,
      PLACEHOLDER_STROKECOLORQUALITYBAD:
        configuration.PLACEHOLDER_QUALITYCOLORBAD,
      PREFIX: param.PREFIX,
      SUFFIX: param.SUFFIX,
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  }
  emosWS.JSIORead = JSIORead;

  function JSIOClickWrite(configuration) {
    var param = configuration.conditionFunction();
    new AClickWrite({
      conditionFunction: function () {
        var Tag = param.TAGNAME;
        var Value = param.VALUE;
        return { Tag: Tag, Value: Value, Enabled: true };
      },
      PLACEHOLDER_FUNCTION: "",
      PLACEHOLDER_USESTROKE: false,
      PLACEHOLDER_USESHAND: true,
      PLACEHOLDER_USESHIDE: false,
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  }
  emosWS.JSIOClickWrite = JSIOClickWrite;

  function JSIOClickWriteBit(configuration) {
    var tag = configuration.conditionFunction();
    new AClickWriteBit({
      conditionFunction: function () {
        var Tag = tag;
        var BitNr = configuration.PLACEHOLDER_BITNUMBER;
        var Enabled = true;
        return { Tag: Tag, BitNr: BitNr, Enabled: Enabled };
      },
      PLACEHOLDER_FORCE: "",
      PLACEHOLDER_BITMODE: configuration.PLACEHOLDER_BITOPERATION,
      PLACEHOLDER_USESTROKE: false,
      PLACEHOLDER_USESHAND: true,
      PLACEHOLDER_USESHIDE: false,
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  }
  emosWS.JSIOClickWriteBit = JSIOClickWriteBit;

  function JSIOAPTClick(configuration) {
    var actionFunction = configuration.actionFunction;
    var shape = configuration.shape;

    if (configuration.conditionFunction()) {
      setEvent(shape, "click", actionFunction, "pointer");
    }
  }
  emosWS.JSIOAPTClick = JSIOAPTClick;

  var JSIOSize = function (configuration) {
    var param = configuration.conditionFunction();
    var dimension = configuration.PLACEHOLDER_USEWIDTH ? "Width" : "Height";
    var orientation = configuration.PLACEHOLDER_USEWIDTH
      ? configuration.PLACEHOLDER_DIRLEFTUP
        ? "Left"
        : "Right"
      : configuration.PLACEHOLDER_DIRLEFTUP
      ? "Top"
      : "Bottom";
    new ASize({
      conditionFunction: function () {
        var Value = GetTagValueAsDouble(param.TAGNAME);
        var ValueMin = param.VALUEMIN;
        var ValueMax = param.VALUEMAX;
        var ValueLimitMin = ValueMin;
        var ValueLimitMax = ValueMax;
        var SizeFactorMin = param.SIZEFACTORMIN;
        var SizeFactorMax = param.SIZEFACTORMAX;
        var Enabled = true;
        return {
          Value: Value,
          ValueMin: ValueMin,
          ValueMax: ValueMax,
          ValueLimitMin: ValueLimitMin,
          ValueLimitMax: ValueLimitMax,
          SizeFactorMin: SizeFactorMin,
          SizeFactorMax: SizeFactorMax,
          Enabled: Enabled,
        };
      },
      postFunction: function () {},
      PLACEHOLDER_ORIENTATION: orientation,
      PLACEHOLDER_ORIENTATIONFLAG: "X",
      PLACEHOLDER_DIMENSION: dimension,
      PLACEHOLDER_DIRECTIONREVERSE: 0,
      PLACEHOLDER_SWAP_USEQUALITY: false,
      PLACEHOLDER_STROKECOLORQUALITYGOOD: "#000000",
      PLACEHOLDER_STROKECOLORQUALITYBAD: "#ff8000",
      STDPLACEHOLDER_SHAPENAME: configuration.shape,
    });
  };
  emosWS.JSIOSize = JSIOSize;

  var JSDummy = function (configuration) {};
  emosWS.JSDummy = JSDummy;

  function GLC(linecode) {
    emosWS.glcNumber++;
    this.linecode = linecode;
    this.initLineCode = getFunctionFromESFuction(linecode);
    this.lastEvent = null;
    this.init = true;
    this.datachangeListener = this.datachangeListener.bind(this);
    this.initialize = this.initialize.bind(this);
    this.datachangeListener = this.datachangeListener.bind(this);

    this.initialize();
    emosWS.dispatchEvent({ type: "HMIglc" });
  }

  GLC.prototype.datachangeListener = function (msg) {
    try {
      if (typeof this.linecode === "function") {
        emosWS.listenGlobalVariablesChange();
        try {
          this.linecode();
        } catch (e) {
          console.log(e);
        }
        emosWS.callbackGlobalVariablesChange();
      }
    } catch (err) {
      console.log(
        this.constructor.name + ": datachangeListener failed: " + err
      );
    }
  };

  GLC.prototype.initialize = function (value, param, e) {
    try {
      //prevent recursive call
      if (emosWS.currentGLC && emosWS.currentGLC === this) {
        console.log("GLC detected recursive then stop");
        console.log(this);
        return;
      }

      emosWS.currentGLC = this;

      emosWS.animationData.stillInit = this.init;
      emosWS.animationData.callback = this;
      try {
        if (emosWS.animationData.stillInit) {
          this.initLineCode();
        } else {
          emosWS.listenGlobalVariablesChange();
          this.initLineCode();
          emosWS.callbackGlobalVariablesChange();
        }
      } catch (e) {
        console.log(e);
      }
      emosWS.animationData.stillInit = this.init = false;
      emosWS.currentGLC = null;
    } catch (err) {
      console.log(this.constructor.name + ": initialize failed: " + err);
    }
  };
  emosWS.GLC = GLC;

  function HFaultWarning(param) {
    this.id = param["id"];
    var alarmGroup = param["alarmGroup"];
    this.alarmGroups = Array.isArray(alarmGroup) ? alarmGroup : [alarmGroup];

    this.newFaultClass = param["newFaultClass"] || "alert";
    var newFaultEnabled = param["newFaultEnabled"];
    this.newFaultEnabled =
      typeof newFaultEnabled === "undefined" ? true : newFaultEnabled;
    var newFaultBlinking = param["newFaultBlinking"];
    this.newFaultBlinking =
      typeof newFaultBlinking === "undefined" ? true : newFaultBlinking;
    this.newFaultProperty = {
      Enabled: this.newFaultEnabled,
      Blinking: this.newFaultBlinking,
      Class: this.newFaultClass,
    };

    this.ackFaultClass = param["ackFaultClass"] || "alert";
    var ackFaultEnabled = param["ackFaultEnabled"];
    this.ackFaultEnabled =
      typeof ackFaultEnabled === "undefined" ? true : ackFaultEnabled;
    var ackFaultBlinking = param["ackFaultBlinking"];
    this.ackFaultBlinking =
      typeof ackFaultBlinking === "undefined" ? false : ackFaultBlinking;
    this.ackFaultProperty = {
      Enabled: this.ackFaultEnabled,
      Blinking: this.ackFaultBlinking,
      Class: this.ackFaultClass,
    };

    this.newEMSClass = param["newEMSClass"] || "warn";
    var newEMSEnabled = param["newEMSEnabled"];
    this.newEMSEnabled =
      typeof newEMSEnabled === "undefined" ? false : newEMSEnabled;
    var newEMSBlinking = param["newEMSBlinking"];
    this.newEMSBlinking =
      typeof newEMSBlinking === "undefined" ? false : newEMSBlinking;
    this.newEMSProperty = {
      Enabled: this.newEMSEnabled,
      Blinking: this.newEMSBlinking,
      Class: this.newEMSClass,
    };

    this.ackEMSClass = param["ackEMSClass"] || "warn";
    var ackEMSEnabled = param["ackEMSEnabled"];
    this.ackEMSEnabled =
      typeof ackEMSEnabled === "undefined" ? false : ackEMSEnabled;
    var ackEMSBlinking = param["ackEMSBlinking"];
    this.ackEMSBlinking =
      typeof ackEMSBlinking === "undefined" ? false : ackEMSBlinking;
    this.ackEMSProperty = {
      Enabled: this.ackEMSEnabled,
      Blinking: this.ackEMSBlinking,
      Class: this.ackEMSClass,
    };

    this.newWRNClass = param["newWRNClass"] || "warn";
    var newWRNEnabled = param["newWRNEnabled"];
    this.newWRNEnabled =
      typeof newWRNEnabled === "undefined" ? true : newWRNEnabled;
    var newWRNBlinking = param["newWRNBlinking"];
    this.newWRNBlinking =
      typeof newWRNBlinking === "undefined" ? true : newWRNBlinking;
    this.newWRNProperty = {
      Enabled: this.newWRNEnabled,
      Blinking: this.newWRNBlinking,
      Class: this.newWRNClass,
    };

    this.ackWRNClass = param["ackWRNClass"] || "warn";
    var ackWRNEnabled = param["ackWRNEnabled"];
    this.ackWRNEnabled =
      typeof ackWRNEnabled === "undefined" ? true : ackWRNEnabled;
    var ackWRNBlinking = param["ackWRNBlinking"];
    this.ackWRNBlinking =
      typeof ackWRNBlinking === "undefined" ? false : ackWRNBlinking;
    this.ackWRNProperty = {
      Enabled: this.ackWRNEnabled,
      Blinking: this.ackWRNBlinking,
      Class: this.ackWRNClass,
    };

    this.NOClass = param["NOClass"] || "fine";
    var NOEnabled = param["NOEnabled"];
    this.NOEnabled = typeof NOEnabled === "undefined" ? true : NOEnabled;
    var NOBlinking = param["NOBlinking"];
    this.NOBlinking = typeof NOBlinking === "undefined" ? false : NOBlinking;
    this.NOProperty = {
      Enabled: this.NOEnabled,
      Blinking: this.NOBlinking,
      Class: this.NOClass,
    };

    this.stateMap = {
      0: this.newFaultProperty,
      1: this.ackFaultProperty,
      2: this.newEMSProperty,
      3: this.ackEMSProperty,
      4: this.newWRNProperty,
      5: this.ackWRNProperty,
      6: this.NOProperty,
      7: this.NOProperty,
    };

    this.currentProperty = this.stateMap[0];

    this.$htmlElement = $("#" + this.id);

    this.lastClass = "";

    this.alarmStateList = {};
    this.alarmState = null;
    this.alarmValue = null;
    this.interval = 0;
    this.trigger = function () {
      this.animate();
    }.bind(this);
    this.datachangeListener = this.datachangeListener.bind(this);
    this.initialize();
  }

  HFaultWarning.prototype.initialize = function () {
    this.adviseData();
  };

  HFaultWarning.prototype.updateAlarmStateList = function (msg) {
    try {
      if (typeof msg !== "undefined")
        if (typeof msg.classStateRec !== "undefined") {
          var state = {
            value: parseInt(msg.value),
            state: msg.classStateRec.state,
          };
          //console.log("updateAlarmStateList: " + msg.tag + " / value=" + state.value + " /state=" + state.state);
          this.alarmStateList[msg.tag] = state;
          var alarmState = 100,
            alarmValue = 100;
          for (var i in this.alarmStateList) {
            var alarmItem = this.alarmStateList[i];
            if (alarmItem.value < alarmValue) alarmValue = alarmItem.value;
            if (alarmItem.state < alarmState) alarmState = alarmItem.state;
          }
          this.alarmState = alarmState;
          this.alarmValue = alarmValue;
          /*console.log("updateAlarmStateList: alarmgroup number = " + Object.keys(this.alarmStateList).length +
                     " / advisedTag number = " + Object.keys(this.advisedTagList).length);*/
        }
    } catch (err) {
      console.log("updateAlarmStateList failed: " + err);
    }
  };

  HFaultWarning.prototype.datachangeListener = function (msg) {
    if (typeof msg !== "undefined")
      if (typeof msg.classStateRec !== "undefined") {
        this.updateAlarmStateList(msg);
        this.startAnimate(msg);
      }
  };

  HFaultWarning.prototype.changeClass = function (classname) {
    this.$htmlElement.removeClass(this.lastClass).addClass(classname);
    this.lastClass = classname;
  };

  HFaultWarning.prototype.startAnimate = function (msg) {
    try {
      this.currentProperty =
        this.stateMap[this.alarmState] || this.currentProperty;
      if (this.currentProperty.Blinking) {
        if (this.interval === 0) {
          this.interval = 1;
          emosWS.blinkInterval.addListener(this.trigger, false);
        }
      } else {
        this.animate();
      }
    } catch (err) {
      console.log("HFaultWarning startAnimate failed: " + err);
    }
  };
  HFaultWarning.prototype.animate = function () {
    try {
      if (this.currentProperty.Blinking) {
        if (emosWS.blinkInterval.active) {
          this.changeClass(this.currentProperty.Class);
        } else {
          this.changeClass("");
        }
      } else {
        this.changeClass(this.currentProperty.Class);
      }
    } catch (err) {
      console.log("HFaultWarning animate failed: " + err);
    }
  };

  HFaultWarning.prototype.adviseData = function () {
    this.alarmGroups.forEach(
      function (alarmGroup) {
        //this.values[plctag] = null;
        //emosWS.advise(plctag, this.datachangeListener, plctag, emosWS.tagType.IO);
        emosWS.advise(
          alarmGroup,
          this.datachangeListener,
          "",
          emosWS.tagType.Alarm
        );
      }.bind(this)
    );
  };

  HFaultWarning.prototype.terminate = function () {
    emosWS.unadvise(this.alarmGroup + ".Alarm", this.datachangeListener);
    emosWS.blinkInterval.removeListener(this.trigger);
    this.changeClass("");
  };

  emosWS.HTMLFaultWarning = HFaultWarning;

  function HSwap(param) {
    this.id = param["id"];
    var tag = param["plctag"];
    this.plctags = Array.isArray(tag) ? tag : [tag];
    this.values = {};
    var trueBlinking = param["trueBlinking"];
    var falseBlinking = param["falseBlinking"];
    this.trueProperty = {
      Blinking: typeof trueBlinking === "undefined" ? false : trueBlinking,
      Class: param["trueClass"] || "fine",
    };
    this.falseProperty = {
      Blinking: typeof falseBlinking === "undefined" ? true : falseBlinking,
      Class: param["falseClass"] || "warn",
    };

    this.$htmlElement = $("#" + this.id);

    this.currentProperty = this.falseProperty;
    this.interval = 0;
    this.lastClass = "";
    this.trigger = function () {
      this.animate();
    }.bind(this);
    this.datachangeListener = this.datachangeListener.bind(this);
    this.initialize();
  }

  HSwap.prototype.initialize = function () {
    this.adviseData();
  };
  HSwap.prototype.datachangeListener = function (msg, plctag) {
    if (typeof msg !== "undefined") {
      this.values[plctag] = emosWS.fn.GetAsBoolean(msg.value);
      this.currentProperty = this.trueProperty;

      var keys = Object.keys(this.values);
      for (var i = 0, len = keys.length; i < len; i++) {
        if (!this.values[keys[i]]) {
          this.currentProperty = this.falseProperty;
          break;
        }
      }
      this.startAnimate(msg);
    }
  };
  HSwap.prototype.changeClass = function (classname) {
    this.$htmlElement.removeClass(this.lastClass).addClass(classname);
    this.lastClass = classname;
  };
  HSwap.prototype.startAnimate = function () {
    //this.changeClass(this.value ? this.trueClass : this.falseClass);
    try {
      if (this.currentProperty.Blinking) {
        if (this.interval === 0) {
          this.interval = 1;
          emosWS.blinkInterval.addListener(this.trigger, false);
        }
      } else {
        this.animate();
      }
    } catch (err) {
      console.log("HFaultWarning startAnimate failed: " + err);
    }
  };
  HSwap.prototype.animate = function () {
    try {
      if (this.currentProperty.Blinking) {
        if (emosWS.blinkInterval.active) {
          this.changeClass(this.currentProperty.Class);
        } else {
          this.changeClass("");
        }
      } else {
        this.changeClass(this.currentProperty.Class);
      }
    } catch (err) {
      console.log("HFaultWarning animate failed: " + err);
    }
  };
  HSwap.prototype.adviseData = function () {
    this.plctags.forEach(
      function (plctag) {
        this.values[plctag] = null;
        emosWS.advise(
          plctag,
          this.datachangeListener,
          plctag,
          emosWS.tagType.IO
        );
      }.bind(this)
    );
  };

  HSwap.prototype.terminate = function () {
    this.plctags.forEach(function (plctag) {
      emosWS.unadvise(plctag + ".IO", this.datachangeListener);
    });
    emosWS.blinkInterval.removeListener(this.trigger);
    this.changeClass("");
  };
  emosWS.HTMLSwap = HSwap;

  function HSwaps(param) {
    param.plctag = param.plctags;
    HSwap.call(this, param);
  }
  HSwaps.prototype = Object.create(HSwap.prototype);
  HSwaps.prototype.constructor = HSwaps;

  emosWS.HTMLSwaps = HSwaps;
  /* emosWS (instance of a singleton class), provides all APIs to communicate
   * with WebSocket server
   *
   */

  var DiagnosisCommon = (function () {
    function getObjectType(key) {
      return key.substr(key.indexOf("-") + 1);
    }
    return {
      getObjectType: getObjectType,
    };
  })();
  window.DiagnosisCommon = DiagnosisCommon;

  var timerTypes = {
    Second: 0,
    Minute: 1,
    SiemensDate: 3,
    SiemensTimeOfDay: 4,
    SiemensTime: 5,
    SiemensS5Time: 6,
    SiemensDateAndTime: 7,
  };

  function AlarmClient(
    parent,
    data,
    alarmGroup,
    id,
    tab,
    big,
    onAlarmReady,
    tableId
  ) {
    this.onAlarmReady = onAlarmReady;
    this.parent = parent;
    this.data = data;
    this.alarmGroup = alarmGroup;
    this.big = big;
    this.id = id;
    //this.visible = this.data.Visible === "undefined" ? true : this.data.Visible === "2";
    this.tab = tab;
    this.tableId = tableId;
    this.table = null;
    this.alarmRefId = [];
    this.intervalId = null;
    $(this.parent)[0].intervalID = [];
    //if (this.visible)
    this.init();
  }

  AlarmClient.prototype.init = function () {
    try {
      var self = this;
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      var dateId = getElementGlobalID();
      var durationId = getElementGlobalID();
      var groupId = getElementGlobalID();
      var classId = getElementGlobalID();
      var prioId = getElementGlobalID();
      var tagnameId = getElementGlobalID();
      this.alarmId = getElementGlobalID();
      var placeholder;
      var preTable = "";
      var tmpalarmGroup =
        typeof this.alarmGroup === "string"
          ? [this.alarmGroup]
          : this.alarmGroup;

      var tableId;
      if (this.tableId) {
        tableId = this.tableId;
      } else {
        tableId = getElementGlobalID();
        if (this.big) {
          placeholder =
            "<tr style='display:none'>" +
            "<th class='tdBegin' style='width: 7%;' id='" +
            dateId +
            "'> Date</th>" +
            "<th class='tdText' style='width: 30%;' id='" +
            textId +
            "'> Text</th>" +
            "<th class='tdAlarmgroup' style='width: 12%;' id='" +
            groupId +
            "'> Alarmgroup</th>" +
            "<th class='tdTagname' style='width: 12%;' id='" +
            tagnameId +
            "'> Tagname</th>" +
            "<th class='tdPriority' style='width: 3.5%;' id='" +
            prioId +
            "'> Priority</th>" +
            "<th class='tdClassID' style='width: 11%;' id='" +
            classId +
            "'> ClassID</th>" +
            "<th class='tdDuration' style='width: 6%;' id='" +
            durationId +
            "'> Duration</th>";
        } else {
          preTable =
            "<table style='width: 329px;' class='DiagnosisAlarmTableHead'>" +
            "<col width='75%'>" +
            "<col width='25%'>" +
            "<tr>" +
            "<th id='" +
            textId +
            "'>Text</th>" +
            "<th id='" +
            durationId +
            "'>Duration</th>" +
            "</tr></table>";
          placeholder =
            "<col width='75%'>" +
            "<col width='25%'>" +
            "<tr>" +
            "<th>Text</th>" +
            "<th>Duration</th>";
        }
        var body = $(
          "<div class='DiagnosisAlarmClient' id='" +
            id +
            "'>" +
            //                    "<div class='addMess'></div>" +
            preTable +
            "<table style='width: calc(100% + 4px)' class='DiagnosisAlarmTable Groupbox' id='" +
            tableId +
            "'>" +
            placeholder +
            "</tr>" +
            "</table>" +
            "</div>"
        );
        var myClass = "";
        //              if(urAlarmHandling !== "1"){
        //                  myClass = "noAction";
        //              }
        $("<span/>", {
          class: "emosbutton quit " + myClass,
          click: function () {
            if (!$(this).hasClass("noAction")) {
              for (var i = 0; i < tmpalarmGroup.length; i++) {
                emosWS.poke(tmpalarmGroup[i] + this.id + ".Alarm", 1);
              }
            }
          },
        }).appendTo(body);
        body.appendTo(this.parent);

        var text = document.getElementById(textId);
        var duration = document.getElementById(durationId);
        this.getHeaderText("T04_Text", text);
        this.getHeaderText("T04_Duration", duration);
      }

      this.table = document.getElementById(tableId);
      for (var i = 0; i < tmpalarmGroup.length; i++) {
        this.alarmRefId[i] = emosWS.sendAdviseAlarmText(
          tmpalarmGroup[i] + this.id,
          emosWS.getLanguage(),
          this.datachangeListener.bind(this),
          ""
        );
      }
      //alarmTextId = emosWS.sendAdviseAlarmText(this.alarmGroup, emosWS.getLanguage(), this.datachangeListener.bind(this), "");
      emosWS.addEventListener("language", this.onLanguage.bind(this));

      this.parent.on("remove", function () {
        self.terminate();
      });
    } catch (err) {
      console.log("AlarmClient init failed: " + err);
    }
  };

  AlarmClient.prototype.onLanguage = function () {
    this.clearTable();
  };

  AlarmClient.prototype.terminate = function () {
    clearInterval(this.intervalId);
    for (var i = 0; i < this.alarmRefId.length; i++) {
      emosWS.unadviseById(this.alarmRefId[i]);
    }
    delete this;
  };

  AlarmClient.prototype.clearTable = function () {
    for (var i = 1; i < this.table.rows.length; i++) {
      this.table.deleteRow(i);
    }
  };

  AlarmClient.prototype.getHeaderText = function (textID, header) {
    emosWS.sendAdviseText(textID, "name", function (msg) {
      if (msg.value !== "") header.textContent = msg.value;
    });
  };

  AlarmClient.prototype.getStyleClass = function (msg) {
    var className = "alarmTable";

    switch (msg.classID) {
      case "1":
        className += " alarm";
        break;
      case "2":
        className += " warning";
        break;
    }
    return className;
  };

  AlarmClient.prototype.getTabStyleClass = function (msg) {
    return msg.classID === "1"
      ? "DiagnosisPageTextAlarm"
      : "DiagnosisPageTextWarning";
  };

  AlarmClient.prototype.updateInterval = function () {
    if (this.table.rows.length === 0) {
      if (this.intervalId) {
        clearInterval(this.intervalId);
      }
    } else {
      if (!this.intervalId) {
        this.intervalId = setInterval(
          this.updateDurationColumn.bind(this),
          1000
        );
      }
    }
  };

  AlarmClient.prototype.updateDurationColumn = function () {
    for (var i = 1, len = this.table.rows.length; i < len; i++) {
      var row = this.table.rows[i],
        msg = row.msg,
        dcell = row.durationCell;
      if (dcell) dcell.textContent = this.convertToDate(msg.beginTime);
    }
  };

  AlarmClient.prototype.datachangeListener = function (msg) {
    try {
      if (msg.type === "alarmText" && msg.tagname !== "internal") {
        this.updateTable(msg);

        if (!this.big) this.updateInterval();
      }
    } catch (err) {
      console.log("AlarmClient datachangeListener failed: " + err);
    }
  };

  AlarmClient.prototype.updateTable = function (msg) {
    for (var i = this.table.rows.length; i > 0; i--) {
      var index = i - 1,
        myRow = this.table.rows[index],
        rowMsg = myRow.msg;
      if (
        rowMsg &&
        rowMsg.alarmGroup === msg.alarmGroup &&
        rowMsg.tagname === msg.tagname
      ) {
        this.table.deleteRow(index);
        break;
      }
    }

    if (msg.alarmType !== "3RTN") {
      this.addTableRow(msg);
    }
  };

  AlarmClient.prototype.addTableRow = function (msg) {
    var newDate = this.getLocalTime(msg.date, msg.time);
    msg.date = newDate[0];
    msg.time = newDate[1];
    msg.dateTime = msg.date + " " + msg.time;
    msg.beginTime = this.convertToTimestamp(msg.date, msg.time);
    var row = this.table.insertRow(1);
    row.className = this.getStyleClass(msg);
    //this.tab.className = this.getTabStyleClass(msg);
    if (this.big) {
      var cell1 = row.insertCell(0);
      var cell2 = row.insertCell(1);
      var cell3 = row.insertCell(2);
      var cell4 = row.insertCell(3);
      var cell5 = row.insertCell(4);
      var cell6 = row.insertCell(5);
      //var cell7 = row.insertCell(6);
      cell1.textContent = msg.date + ", " + msg.time.split(",")[0];
      cell2.textContent = msg.alarmText;
      cell3.textContent = msg.alarmGroup;
      cell4.textContent = msg.tagname;
      cell5.textContent = msg.priority;

      cell1.className = "tdBegin";
      cell2.className = "tdText";
      cell3.className = "tdArea";
      cell4.className = "tdTagname";
      cell5.className = "tdPriority";
      cell6.className =
        "tdClass C" +
        (msg.classID.length > 1 ? msg.classID : "0" + msg.classID);
      //cell7.className = 'tdDuration';
      //row.durationCell = cell7;
    } else {
      this.parent[0].actMessages = true;
      var cell1 = row.insertCell(0);
      var cell2 = row.insertCell(1);
      cell1.textContent = msg.alarmText + "\n" + msg.alarmGroup;
      row.durationCell = cell2;
      if (this.onAlarmReady) {
        try {
          this.onAlarmReady();
        } catch (e) {}
      }
    }
    row.msg = msg;
    if (!this.big)
      row.durationCell.textContent = this.convertToDate(msg.beginTime);
  };

  AlarmClient.prototype.getLocalTime = function (date, time) {
    try {
      if (date === "") {
        return ["", ""];
      }

      var dateList = date.split(".");
      var timeList = time.split(":");
      var secondList = timeList[2].split(",");
      var newDate = new Date(
        dateList[1] +
          "/" +
          dateList[0] +
          "/" +
          dateList[2] +
          " " +
          timeList[0] +
          ":" +
          timeList[1] +
          ":" +
          secondList[0] +
          " UTC"
      );
      var iDate = newDate.getDate();
      iDate = iDate < 10 ? "0" + iDate : iDate;
      var iMonth = newDate.getMonth() + 1;
      iMonth = iMonth < 10 ? "0" + iMonth : iMonth;
      var iHours = newDate.getHours();
      iHours = iHours < 10 ? "0" + iHours : iHours;
      var iMinutes = newDate.getMinutes();
      iMinutes = iMinutes < 10 ? "0" + iMinutes : iMinutes;
      var iSeconds = newDate.getSeconds();
      iSeconds = iSeconds < 10 ? "0" + iSeconds : iSeconds;
      var oDate = newDate.getFullYear() + "-" + iMonth + "-" + iDate;
      var oTime =
        iHours + ":" + iMinutes + ":" + iSeconds + "," + secondList[1];
      return [oDate, oTime];
    } catch (err) {
      console.log("getLocalTime() failed: " + err);
    }
  };

  AlarmClient.prototype.convertToDate = function (time, withoutDays) {
    try {
      if (time === "") {
        return "";
      }
      var current = new Date().getTime();
      var totalSec = parseInt((current - time) / 1000);
      var days = parseInt(totalSec / 86400);
      var hours = parseInt(totalSec / 3600) % 24;
      var minutes = parseInt(totalSec / 60) % 60;
      var seconds = totalSec % 60;
      //return days + ":" + hours + ":" + minutes + ":" + seconds;
      if (withoutDays) {
        return (
          (hours < 10 ? "0" + hours : hours) +
          ":" +
          (minutes < 10 ? "0" + minutes : minutes) +
          ":" +
          (seconds < 10 ? "0" + seconds : seconds)
        );
      } else {
        return (
          days +
          ":" +
          (hours < 10 ? "0" + hours : hours) +
          ":" +
          (minutes < 10 ? "0" + minutes : minutes) +
          ":" +
          (seconds < 10 ? "0" + seconds : seconds)
        );
      }
    } catch (err) {
      console.log("convertToDate() failed: " + err);
    }
  };

  AlarmClient.prototype.convertToTimestamp = function (date, time) {
    try {
      if (date === "") {
        return "";
      }

      var dateList = date.split("-");
      var timeList = time.split(":");
      var secondList = timeList[2].split(",");
      return new Date(
        dateList[1] +
          "/" +
          dateList[2] +
          "/" +
          dateList[0] +
          " " +
          timeList[0] +
          ":" +
          timeList[1] +
          ":" +
          secondList[0]
      ).getTime();
      return new Date(date + " " + time);
    } catch (err) {
      console.log("convertToTime() failed: " + err);
    }
  };

  emosWS.AlarmClient = AlarmClient;

  function RestAlarmClient(
    parent,
    data,
    onRestAlarmReady,
    motherTable,
    tableId
  ) {
    this.parent = parent;
    this.onRestAlarmReady = onRestAlarmReady;
    this.data = data;
    this.motherTable = motherTable;
    $(this.parent)[0].AlarmingtdPriority = [];
    $(this.parent)[0].AlarmingtdClass = [];
    $(this.parent)[0].AlarmingtdArea = [];
    $(this.parent)[0].OperatingtdPriority = [];
    $(this.parent)[0].OperatingtdClass = [];
    $(this.parent)[0].OperatingtdArea = [];
    this.tableId = tableId;
    this.init();
  }

  RestAlarmClient.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      var beginId = getElementGlobalID();
      var durationId = getElementGlobalID();
      var endId = getElementGlobalID();
      var shiftId = getElementGlobalID();
      var classId = getElementGlobalID();
      var prioId = getElementGlobalID();
      var areaId = getElementGlobalID();
      this.alarmId = getElementGlobalID();
      var commentId = getElementGlobalID();
      var editorId = getElementGlobalID();
      var countId = getElementGlobalID();

      var tableId;
      if (this.tableId) {
        tableId = this.tableId;
      } else {
        tableId = getElementGlobalID();
        var placeholder;
        placeholder =
          "<tr style='display:none;'>" +
          "<th class='tdBegin' style='width: 6%;' id='" +
          beginId +
          "'> </th>" +
          "<th class='tdEnd' style='width: 6%;' id='" +
          endId +
          "'> </th>" +
          "<th class='tdShift' style='width: 3%;' id='" +
          shiftId +
          "'> </th>" +
          "<th class='tdText' style='width: 33%;' id='" +
          textId +
          "'> </th>" +
          "<th class='tdArea' style='width: 12%;' id='" +
          areaId +
          "'> </th>" +
          "<th class='tdPriority' style='width: 3%;' id='" +
          prioId +
          "'> </th>" +
          "<th class='tdClass' style='width: 3%;' id='" +
          classId +
          "'> </th>" +
          "<th class='tdDuration' style='width: 5%;' id='" +
          durationId +
          "'> </th>" +
          "<th class='tdComment' style='width: 12%;' id='" +
          commentId +
          "'> </th>" +
          "<th class='tdEditor' style='width: 12%;' id='" +
          editorId +
          "'> </th>" +
          "<th class='tdCount' style='width: 5%;' id='" +
          countId +
          "'> </th>";

        var body = $(
          "<div class='DiagnosisRestAlarmClient' id='" +
            id +
            "'>" +
            //                    "<div class='addMess'></div>" +
            "<table style='width: 100%' class='DiagnosisRestAlarmTable Groupbox' id='" +
            tableId +
            "'>" +
            placeholder +
            "</tr>" +
            "</table>" +
            "</div>"
        );
        body.appendTo(this.parent);
      }
      this.table = document.getElementById(tableId);
      this.addTableRow();
    } catch (err) {
      console.log("RestAlarmClient init failed: " + err);
    }
  };
  RestAlarmClient.prototype.addTableRow = function () {
    var self = this;
    var i = self.table.rows.length;

    $.each(this.data, function (key, val) {
      var row = self.table.insertRow(i);
      row.className = "alarmTable " + val.type + " " + val.status;
      var cell1 = row.insertCell(0);
      var cell2 = row.insertCell(1);
      var cell3 = row.insertCell(2);
      var cell4 = row.insertCell(3);
      var cell5 = row.insertCell(4);
      var cell6 = row.insertCell(5);
      var cell7 = row.insertCell(6);
      var cell8 = row.insertCell(7);
      var cell9 = row.insertCell(8);
      var cell10 = row.insertCell(9);
      var cell11 = row.insertCell(10);
      var begindate;
      if (val.beginDate) {
        //                var tmpDate = Date.parse(val.beginDate);
        begindate = new Date(val.beginDate);
      }
      var enddate;
      if (val.endDate) {
        //                var tmpDate1 = Date.parse(val.endDate);
        enddate = new Date(val.endDate); //.toLocaleString();
        enddate =
          enddate.toLocaleDateString(myLocalTime) +
          ", " +
          enddate.toLocaleTimeString(myLocalTime, { hour12: show12hTime });
      } else {
        enddate = "";
      }

      //APT Alarming
      var text = val.text;
      if (text === "N/A" && val.comment)
        text = checkAPTPattern(val.comment) ? val.comment + " â¼" : val.text;

      var x1 = val.duration.split(":");
      var result =
        (x1[0] < 10 ? "0" + x1[0] : x1[0]) +
        ":" +
        (x1[1] < 10 && x1[1].length === 1 ? "0" + x1[1] : x1[1]) +
        ":" +
        (x1[2] < 10 && x1[2].length === 1 ? "0" + x1[2] : x1[2]);
      cell1.textContent =
        begindate.toLocaleDateString(myLocalTime) +
        ", " +
        begindate.toLocaleTimeString(myLocalTime, { hour12: show12hTime }); //begindate.toLocaleString();
      cell2.textContent = enddate;
      cell3.textContent = val.shift;
      cell4.textContent = text;
      cell5.textContent = val.area;
      cell6.textContent = val.priority;
      cell7.textContent = val.class;
      cell8.textContent = result;
      cell9.textContent = val.comment;
      cell10.textContent = val.lastEdit;

      cell1.className = "tdBegin";
      cell2.className = "tdEnd";
      cell3.className = "tdShift";
      cell4.className = "tdText";
      cell5.className = "tdArea";
      cell6.className = "tdPriority";
      cell7.className = "tdClass C" + val.class;
      cell8.className = "tdDuration";
      cell9.className = "tdComment";
      cell10.className = "tdEditor";
      cell11.className = "tdCount";

      if (val.count) {
        var valueProzent = (100 * val.count) / self.data[0].count;
        var progress =
          "<div class='topTenStatus' style='position: absolute; margin-top:2px;'>" +
          "<div class='maintenanceProgress'>" +
          "<div class='topTenBar topTenGrey' style='width:" +
          valueProzent +
          "%; color:black;'>" +
          +val.count +
          "</div></div></div>";
        $(progress).appendTo(cell11);
      }

      var tmpNum = Number(val.class);
      if (tmpNum >= 10 && tmpNum <= 19) {
        self.parent[0].OperatingtdPriority.push(val.priority);
        self.parent[0].OperatingtdClass.push(val.class);
        self.parent[0].OperatingtdArea.push(val.area);
      } else {
        self.parent[0].AlarmingtdPriority.push(val.priority);
        self.parent[0].AlarmingtdClass.push(val.class);
        self.parent[0].AlarmingtdArea.push(val.area);
      }
      i++;
    });
    if (this.onRestAlarmReady) {
      try {
        this.onRestAlarmReady(this.motherTable);
      } catch (e) {
        console.log(e);
      }
    }
  };
  emosWS.RestAlarmClient = RestAlarmClient;

  function RestParametrizingClient(
    parent,
    data,
    onRestParamReady,
    motherTable
  ) {
    this.parent = parent;
    this.onRestParamReady = onRestParamReady;
    this.data = data;
    this.motherTable = motherTable;
    $(this.parent)[0].ParametrizingtdIONode = [];
    $(this.parent)[0].ParametrizingtdIOItem = [];
    this.init();
  }

  RestParametrizingClient.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      var beginId = getElementGlobalID();
      var durationId = getElementGlobalID();
      var tableId = getElementGlobalID();
      var endId = getElementGlobalID();
      var shiftId = getElementGlobalID();
      var classId = getElementGlobalID();
      var prioId = getElementGlobalID();
      var areaId = getElementGlobalID();
      this.alarmId = getElementGlobalID();
      var commentId = getElementGlobalID();
      var editorId = getElementGlobalID();
      var placeholder;
      placeholder =
        "<tr style='display:none;'>" +
        "<th class='tdDTOriginal' style='width: 6%;' id='" +
        beginId +
        "'> </th>" +
        "<th class='tdDTLogged' style='width: 6%;' id='" +
        endId +
        "'> </th>" +
        "<th class='tdApplication' style='width: 3%;' id='" +
        shiftId +
        "'> </th>" +
        "<th class='tdIONode' style='width: 33%;' id='" +
        textId +
        "'> </th>" +
        "<th class='tdIOItem' style='width: 12%;' id='" +
        areaId +
        "'> </th>" +
        "<th class='tdOldValue' style='width: 3%;' id='" +
        prioId +
        "'> </th>" +
        "<th class='tdNewValue' style='width: 3%;' id='" +
        classId +
        "'> </th>" +
        "<th class='tdComment' style='width: 12%;' id='" +
        commentId +
        "'> </th>" +
        "<th class='tdUser' style='width: 12%;' id='" +
        editorId +
        "'> </th>";
      var body = $(
        "<div class='DiagnosisRestParamClient' id='" +
          id +
          "'>" +
          //                    "<div class='addMess'></div>" +
          "<table style='width: 100%' class='DiagnosisRestParamTable Groupbox' id='" +
          tableId +
          "'>" +
          placeholder +
          "</tr>" +
          "</table>" +
          "</div>"
      );
      body.appendTo(this.parent);
      this.table = document.getElementById(tableId);
      this.addTableRow();
    } catch (err) {
      console.log("RestParamClient init failed: " + err);
    }
  };
  RestParametrizingClient.prototype.addTableRow = function () {
    var i = 1;
    var self = this;

    $.each(this.data, function (key, val) {
      var row = self.table.insertRow(i);
      row.className = "alarmTable ";
      var cell1 = row.insertCell(0);
      var cell2 = row.insertCell(1);
      var cell3 = row.insertCell(2);
      var cell4 = row.insertCell(3);
      var cell5 = row.insertCell(4);
      var cell6 = row.insertCell(5);
      var cell7 = row.insertCell(6);
      var cell8 = row.insertCell(7);
      var cell9 = row.insertCell(8);
      var utcDts;
      if (val.utcDts) {
        utcDts = new Date(val.utcDts);
      }
      var logDts;
      if (val.logDts) {
        logDts = new Date(val.logDts);
        logDts =
          logDts.toLocaleDateString(myLocalTime) +
          ", " +
          logDts.toLocaleTimeString(myLocalTime, { hour12: show12hTime });
      } else {
        logDts = "";
      }
      cell1.textContent =
        utcDts.toLocaleDateString(myLocalTime) +
        ", " +
        utcDts.toLocaleTimeString(myLocalTime, { hour12: show12hTime }); //begindate.toLocaleString();
      cell2.textContent = logDts;
      cell3.textContent = val.application;
      cell4.textContent = val.ionode;
      cell5.textContent = val.ioitem;
      cell6.textContent = val.oldValue;
      cell7.textContent = val.newValue;
      cell8.textContent = val.comment;
      cell9.textContent = val.userid;

      cell1.className = "tdDTOriginal";
      cell2.className = "tdDTLogged";
      cell3.className = "tdApplication";
      cell4.className = "tdIONode";
      cell5.className = "tdIOItem";
      cell6.className = "tdOldValue";
      cell7.className = "tdNewValue";
      cell8.className = "tdComment";
      cell9.className = "tdUser";

      self.parent[0].ParametrizingtdIONode.push(val.ionode);
      self.parent[0].ParametrizingtdIOItem.push(val.ioitem);

      i++;
    });
    if (this.onRestParamReady) {
      try {
        this.onRestParamReady(this.motherTable);
      } catch (e) {
        console.log(e);
      }
    }
  };
  emosWS.RestParametrizingClient = RestParametrizingClient;

  var GeneralElement = function (parent, data) {
    var id = getElementGlobalID();
    var body = $(
      "<div class='DiagnosisGerneralElement' id='" +
        id +
        "'>" +
        "<svg width='100%' height='20'>" +
        "<rect width='100%' height='20' style='fill:white;stroke-width:1;stroke:grey' />" +
        "<text x='5' y='15' fill='black'>" +
        data.Text +
        "</text>" +
        "</svg>" +
        "</div>"
    );
    body.appendTo(parent);
  };

  function DiagnosisElement(param) {
    this.data = param.data;
    this.writable = param.writable;
    this.panel = null;
    this.visibleRight = parseInt(this.data.VisibleAtRight);
    this.visibleOPC = this.data.VisibleOPCID;
    this.userRight = parseInt(this.data.UserRight);
    this.UNKOWN = "???";
    this.visible = true;
    this.opcvisible = true;
    this.hasPaintShopRight = true;

    this.initialize();
  }

  DiagnosisElement.prototype.getUnitSymbol = function () {
    switch (this.unit) {
      case emosWS.unitID.Metric:
        return " " + this.data.UnitMetric;
      case emosWS.unitID.UnitImperial:
        return " " + this.data.UnitImperial;
      case emosWS.unitID.UnitLocale:
        return " " + this.data.UnitLocale;
      default:
        return "";
    }
  };

  DiagnosisElement.prototype.setInputRange = function (src, dst) {
    if (src && dst) {
      dst.InputMin = src.input_min;
      dst.InputMax = src.input_max;
      if (dst.IntInputMin) {
        dst.IntInputMin = dst.InputMin;
        dst.IntInputMax = dst.InputMax;
      } else if (dst.RealInputMin) {
        dst.RealInputMin = dst.InputMin;
        dst.RealInputMax = dst.InputMax;
      } else if (dst.IntTimeMin) {
        dst.IntTimeMin = dst.InputMin;
        dst.IntTimeMax = dst.InputMax;
      }
    }
  };

  DiagnosisElement.prototype.updateView = function () {
    try {
      if (this.visibleRight) {
        this.hasPaintShopRight = emosWS.login.au.hasPaintShopRight(
          this.visibleRight
        );
        this.setVisibility();
        //this.panel.get(0).style.visibility = emosWS.login.au.hasPaintShopRight(this.visibleRight) ? "visible" : "hidden";
      }
      if (this.writable) {
        this.updateWrite();
      }
    } catch (err) {
      console.log(this.constructor.name + ": updateView failed: " + err);
    }
  };

  DiagnosisElement.prototype.initialize = function () {
    this.init();
    this.afterInit();
  };

  DiagnosisElement.prototype.init = function () {};

  DiagnosisElement.prototype.updateWrite = function () {};

  DiagnosisElement.prototype.unitListener = function () {};

  DiagnosisElement.prototype.getValue = function (value) {
    try {
      /*var
             d = this.data,
             factor = 1;
             if (d.FactorPLC) {
             factor = this.unit === emosWS.unitID.Metric ? d.FactorMetric :
             (this.unit === emosWS.unitID.UnitImperial ? d.FactorImperial : d.FactorLocale);
             return value * d.FactorPLC * factor;
             }*/
      return value;
    } catch (err) {
      console.error("[DiagnosisElement getValue] : " + err);
      return value;
    }
  };

  DiagnosisElement.prototype.afterInit = function () {
    this.updateView();
    if (!(isNaN(this.userRight) && isNaN(this.visibleRight))) {
      emosWS.addEventListener("UserRight", this.updateView.bind(this));
    }

    if (this.data.VisibleOPCID && this.data.VisibleOPCID !== "") {
      this.parseVisibilityOPCTags(
        this.data.VisibleOPCID,
        function (msg) {
          this.opcvisible = GetAsBoolean(msg.value);
          this.setVisibility();
        }.bind(this)
      );
    }
    emosWS.addEventListener(
      "unit",
      function (unitID) {
        this.unit = unitID;
        this.unitListener(unitID);
      }.bind(this)
    );
  };

  DiagnosisElement.prototype.parseVisibilityOPCTags = function (s, callback) {
    /*
     * Formular Parser for Visibility OPC Tags
     * It is now possible to input more then one OPC tags for the Visibility OPC Tag field.
     * The tags can connect with OR (use the â|â symbol) and AND (use the â&â symbol)
     * To invert values, use NOT in front of the visibility tag: ("NOT SB.S2436_OffShift")
     * Also it is possible to use bracket with no limit.
     *
     * Example:
     * SB.S7311_ILM1 & SB.S7312_ILM2 & (SB.S7313_ILM3 | SB.S7314_ILM4) & NOT SB.S7315_ILM5
     */

    //replace: & -> && , | -> || , NOT -> !
    [
      [" & ", " && "],
      [" | ", " || "],
      ["NOT ", "! "],
    ].forEach(function (pair) {
      s = s.split(pair[0]).join(pair[1]);
    });

    //get tags
    var tagMap = {};
    s.split(/[ &|!\(\)]/).forEach(function (tag) {
      if (tag !== "") {
        tagMap[tag] = null;
      }
    });

    //when data comming, parse string to value and callback if possible
    var parseValues = function (itag, ivalue) {
      tagMap[itag] = ivalue;

      //check if all tag values are available, else quit.
      for (var tag in tagMap) {
        if (tagMap[tag] === null) return;
      }

      //then start parsing values: in string s, relacing the tag by its value
      var parseString = s;
      for (var tag in tagMap) {
        parseString = parseString.replace(tag, tagMap[tag]);
      }

      //then eval the string to get value and callback
      var value = true;
      try {
        value = eval(parseString);
        callback({ value: value });
      } catch (e) {}
    };

    //advise data
    for (var tag in tagMap) {
      emosWS.advise(
        this.plc + "." + tag,
        function (msg, mytag) {
          parseValues(mytag, GetAsBoolean(msg.value));
        },
        tag,
        emosWS.tagType.IO
      );
    }
  };

  DiagnosisElement.prototype.adviseProperty = function (
    plctag,
    callback,
    param
  ) {
    emosWS.advise(
      plctag,
      function (msg, p) {
        try {
          if (msg.value) {
            var v = msg.value,
              d = this.data;
            d.Precision = v.disp_prec || d.Precision;
            if (v.met_baseunit !== this.UNKOWN)
              d.UnitMetric = v.met_baseunit || d.UnitMetric;
            if (v.imp_baseunit !== this.UNKOWN)
              d.UnitImperial = v.imp_baseunit || d.UnitImperial;
            if (v.loc_baseunit !== this.UNKOWN)
              d.UnitLocale = v.loc_baseunit || d.UnitLocale;
            d.FactorMetric = v.met_factor || d.FactorMetric;
            d.FactorImperial = v.imp_factor || d.FactorImperial;
            d.FactorLocale = v.loc_factor || d.FactorImperial;
            d.FactorPLC = v.plc_factor;
            d.TextKey = v.textkey;
            if (d.ByteInputMin) d.ByteInputMin = v.input_min || d.ByteInputMin;
            if (d.ByteInputMax) d.ByteInputMax = v.input_max || d.ByteInputMax;
            if (d.IntInputMin) d.IntInputMin = v.input_min || d.IntInputMin;
            if (d.IntInputMax) d.IntInputMax = v.input_max || d.IntInputMax;
            if (d.RealInputMin) d.RealInputMin = v.input_min || d.RealInputMin;
            if (d.RealInputMax) d.RealInputMax = v.input_max || d.RealInputMax;
            callback(msg, p);
          }
        } catch (err) {
          console.error("[DiagnosisElement adviseProperty callback] : " + err);
        }
      }.bind(this),
      param,
      emosWS.tagType.Property
    );
  };

  DiagnosisElement.prototype.setVisibility = function () {
    this.visible = this.opcvisible && this.hasPaintShopRight;
    try {
      if (!this.panel.get(0).classList.contains("priv"))
        this.panel.get(0).style.display = this.visible ? "block" : "none";
    } catch (e) {
      console.error("[DiagnosisElement setVisibility] : " + e);
    }
  };

  function DiagnosisText(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;

    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.Groupbox,
        css: "DiagnosisText",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.Groupbox,
        css: "DiagnosisText",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisText",
      },
      //"Long": {parent: this.diagnosisWindow.divTypes.LRRight, css: "DiagnosisTextLong"}
    };

    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.dataText = this.data.Text === "" ? "." : this.data.Text;
    this.plctag = "";
    this.text = "";
    DiagnosisElement.call(this, { data: data });
  }
  DiagnosisText.prototype = Object.create(DiagnosisElement.prototype);
  DiagnosisText.prototype.constructor = DiagnosisText;

  DiagnosisText.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      if (typeof this.data.VisibleOPCID !== "undefined") {
        if (this.data.VisibleOPCID !== "") {
          this.plctag =
            this.data.VisibleOPCID === ""
              ? ""
              : this.plc + "." + this.data.OPCID;
        }
      }
      //            if(this.data.TextID === 'MS.M1000_Funct'){
      //                $(this.parentDiv).addClass('specClass');
      //                console.log(this.parentDiv)
      //                $(this.parentDiv).insertBefore('.DiagnosisLRRight.specClass');
      //            }
      var properties = this.positionClass[this.data.Position];
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          //"<p id='" + textId + "'>" + data.Text + "</p>" +
          "<p id='" +
          textId +
          "'>" +
          this.dataText +
          "</p>" +
          "</div>"
      ));
      //body.appendTo(properties.parent);
      if (this.data.showHide === true) {
        $(this.parentDiv).addClass("showBlock");
        $(this.parentDiv).find(".showhideblockbutton").addClass("closeBlock");
      } else if (this.data.showHide === false) {
        $(this.parentDiv).addClass("hideBlock");
        $(this.parentDiv).find(".showhideblockbutton").addClass("openBlock");
      } else {
        $(this.parentDiv).addClass("showBlock");
        $(this.parentDiv).find(".showhideblockbutton").addClass("closeBlock");
      }
      body.appendTo(this.parentDiv);
      this.text = document.getElementById(textId);
      if (this.plctag !== "") {
        emosWS.advise(
          this.plctag,
          function (msg) {
            try {
              var visible = GetAsBoolean(msg.value);
              this.text.style.visibility = visible ? "visible" : "hidden";
            } catch (err) {
              console.log("DiagnosisText datachangeListener failed: " + err);
            }
          }.bind(this),
          "",
          emosWS.tagType.IO
        );
      }

      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
    } catch (err) {
      console.log("DiagnosisText init failed: " + err);
    }
  };

  emosWS.DiagnosisText = DiagnosisText;

  function PageControl(parent, data, diagnosisWindow, subtabs) {
    this.parent = parent;
    this.data = data;
    this.diagnosisWindow = diagnosisWindow;
    this.diagnosisWindow.plcVersion = "";
    this.subtabs = subtabs;
    this.init();
  }

  PageControl.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      //            var scrollLeft = getElementGlobalID();
      //            var scrollRight = getElementGlobalID();
      var pageHead = getElementGlobalID();
      var pageHeadLine = getElementGlobalID();
      //var body = $("<div class='DiagnosisPageControl diatabs' id='" + id + "'><div class='pager'><span class='pagerHead' id='" + pageHead + "'><span id='" + pageHeadLine + "' class='pagerHeadLine'></span></span></div><ul><br class='cl' /></ul></div>");
      var body = $(
        "<div class='DiagnosisPageControl diatabs' id='" +
          id +
          "'><div class='pager'><span class='pagerHead' id='" +
          pageHead +
          "'><input maxlength='15' id='" +
          pageHeadLine +
          "' class='pagerHeadLine getKeypad keyboardInputInitiator' disabled></span></div><ul><br class='cl' /></ul></div>"
      );
      //console.log(Object.keys(this.data).length)
      body.appendTo(this.parent);
      var tabs = body.tabs();
      var ul = tabs.find("ul");
      var tabid = 0;
      if (!this.diagnosisWindow.Private) {
        this.diagnosisWindow.Private = "true";
      }
      if (!this.diagnosisWindow.Summary) {
        this.diagnosisWindow.Summary = "true";
      }
      if (this.diagnosisWindow.additionalClass !== "privateOverlay") {
        try {
          if (this.diagnosisWindow.Private === "true") {
            this.data["1999990-AddPageTab"] = {
              "1999991-AddPageControl": {
                "1999992-AddPageTab": {
                  Text: "Private1",
                  TextID: "Private1",
                },
              },
              Text: "Private",
              TextID: "Private",
            };
          }

          if (
            this.diagnosisWindow.additionalClass !== "statusWelcome" &&
            this.diagnosisWindow.additionalClass !== "statusWelcome act" &&
            this.diagnosisWindow.Summary === "true"
          ) {
            this.data["1999993-AddPageTab"] = {
              "1999994-AddPageControl": {
                "1999995-AddPageTab": {
                  Text: "Summaries",
                  TextID: "Summaries",
                },
              },
              Text: "Duerr",
              TextID: "Duerr",
            };
          }
          //                    this.data['1999996-AddPageTab'] = {
          //                        "1999997-AddPageControl": {
          //                        "1999998-AddPageTab":{
          //                            "Text":"Scanner",
          //                            "TextID":"Scanner"
          //                            }
          //                        },
          //                        "Text":"Scanner",
          //                        "TextID":"Scanner"
          //                        };
        } catch (e) {
          console.log(e);
        }
      }

      //for (var key in this.data) {
      var keys = sortHashArray(this.data);
      for (var i = keys.length - 1; i > -1; i--) {
        var alarmId = getElementGlobalID();
        var key = keys[i];
        var tabData = this.data[key];
        if (key === "1000-AddPageTab") {
          $(this.parent)
            .closest(".diagnose")
            .find(".copyTab")
            .addClass("childWin");
          break;
        }

        if (typeof tabData === "object") {
          //&& DiagnosisCommon.getObjectType(key) != ''
          tabid++;
          var tabID = getElementGlobalID();
          var objectType = DiagnosisCommon.getObjectType(key);
          var tabTitle = "";
          switch (objectType) {
            case "AddPageTab":
              tabTitle = tabData.Text;
              break;
            default: //Messages
              tabTitle = objectType;
              tabData.TextID = "Messages";
              break;
          }
          var tabTextId = getElementGlobalID();
          $(
            "<li id='" +
              alarmId +
              "' title='" +
              tabTitle +
              "' class='emosbutton " +
              tabTitle +
              " tab" +
              tabid +
              "'><a href='#" +
              tabID +
              "'></a><span><span class='warn_image'></span></span></li>"
          ).prependTo(ul);
          if (tabTitle === "Messages") {
            new emosWS.HTMLFaultWarning({
              id: alarmId,
              alarmGroup: this.diagnosisWindow.PLC + this.diagnosisWindow.ID,
            });
          }
          //<span id='" + tabTextId + "'>" + tabTitle + "</span>
          //                    var tab = $("<div class='DiagnosisPageBlank dPage " + tabTitle + "' id='" + tabID + "'></div>");
          if (
            this.parent.parents("#center").length > 0 &&
            tabTitle === "Private"
          ) {
            //                        $('#' + pageHead).append('<div class="radiobox hideme"><label><input type="radio" name="privTabs" value="privat" onchange="togglePrivPub(\'privat\',\'' + id +'\');" checked="checked">show private</label><label><input type="radio" name="privTabs" value="public" onchange="togglePrivPub(\'public\',\'' + id +'\');">show public</label>');
            $("#" + pageHead).append(
              '<div class="radiobox hideme"><span class="emosbutton showPrivate">show Private</span></div>'
            );
          }
          var tab = $("<div/>", {
            class: "DiagnosisPageBlank dPage " + tabTitle,
            id: tabID,
          });

          if (tabTitle === "Chronology") {
            var placeholderBtn = $("<div/>", {
              class: "placeholderBtn",
            }).appendTo(tabs);
            $("<span/>", {
              class: "emosbutton quitChrono",
              click: function () {
                $(this)
                  .closest(".DiagnosisPageControl")
                  .find(".DiagnosisPageBlank.dPage.Chronology")
                  .find(".DiagnosisAlarmClient")
                  .remove();
                new ChronologyHistory(
                  $(this).parent().find(".DiagnosisPageBlank.dPage.Chronology"),
                  true
                );
              },
            }).appendTo(placeholderBtn);
          }

          if (
            this.diagnosisWindow.additionalClass === "statusWelcome" &&
            tabTitle === "Messages"
          ) {
            $(tab)[0].head = "Actual Alarms";
            $(tab)[0].headId = "T00_0036";
          } else {
            $(tab)[0].head = tabTitle;
            $(tab)[0].headId =
              this.diagnosisWindow.getTextPrefix() + tabData.TextID;
          }

          $(tab)[0].tabNum = tabid;
          tab.appendTo(tabs);

          var tabText = document.getElementById(tabTextId);
          //                    emosWS.sendAdviseText(this.diagnosisWindow.getTextPrefix() + tabData.TextID, "name", function (msg, itabText) {
          //                        if (msg.value !== "")
          //                            itabText.textContent = msg.value;
          //                    }, tabText);
          if (!tabData.Visible || tabData.Visible === "2") {
            this.diagnosisWindow.appendPage(
              tab,
              tabData,
              tabText,
              parseInt(tabData.VisibleAtRight || "0"),
              tabid,
              tabs
            );

            var addClass = "";
            if (tab.children(".diasubtabs").length > 0) {
              tab.closest(".DiagnosisFooter").addClass("subpage");
            }
          }
        }
      }
      tabs.tabs("refresh");
      tabs.tabs({ active: 0 });
    } catch (err) {
      console.log("PageControl failed: " + err);
    }
  };

  emosWS.PageControl = PageControl;

  function SubPageControl(parent, data, diagnosisWindow, subtabs, plcversion) {
    this.parent = parent;
    this.data = data;
    this.diagnosisWindow = diagnosisWindow;
    this.subtabs = subtabs;
    this.plcversion = plcversion;
    this.myText = diagnosisWindow.myText ? diagnosisWindow.myText : "";
    this.init();
  }

  SubPageControl.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var scrollLeft = getElementGlobalID();
      var scrollRight = getElementGlobalID();
      var pageHead = getElementGlobalID();
      var pageTable = getElementGlobalID();
      var body = $(
        "<div class='DiagnosisPageControl diasubtabs' id='" + id + "'></div>"
      );
      $(body)[0].tabNumbers = Object.keys(this.data).length;
      $(body)[0].myText = this.myText;
      var visiClass = "hideme";

      if (this.parent[0].classList.contains("DiagnosisSubPageBlank")) {
        $(body).addClass("subsubPage");
        var tabParent = this.parent.find($(".Groupbox:visible:last"));
        tabParent.append(body);
        //                tab.appendTo(tabParent);
      } else if (this.parent[0].classList.contains("overlayContentElements")) {
        $(body).addClass("subsubPage");
        var tabParent = this.parent.find($(".Groupbox:last"));
        tabParent.append(body);
      } else {
        body.appendTo(this.parent);
      }

      var tabs = body;
      var tabid = 0;
      //for (var key in this.data) {
      var keys = sortHashArray(this.data);
      var footer = $(
        '<div class="DiagnosisFooter">' +
          '<span class="footerHead"></span>' +
          '<spanclass="scrollLeft"></span>' +
          '<span class="scrollRight"></span>' +
          '<span class="scrollUp"></span><span class="scrollDown active"></span>' +
          "</div>)"
      );
      for (var i = 0, len = keys.length; i < len; i++) {
        var key = keys[i];

        var tabData = this.data[key];
        if (typeof tabData === "object") {
          tabid++;
          var tabID = getElementGlobalID();
          var objectType = DiagnosisCommon.getObjectType(key);

          var tabTitle = "";
          switch (objectType) {
            case "AddPageTab":
              tabTitle = tabData.Text;
              break;
            default: //Messages
              tabTitle = objectType;
              tabData.TextID = "Messages";
              break;
          }
          //var addTable;
          var tabTextId = getElementGlobalID();
          var addTable;
          var addTable1;
          var bevorTable;
          var myClass = tabTitle;

          var tab;
          if (this.parent[0].classList.contains("DiagnosisSubPageBlank")) {
            tab = $(
              "<div class='emosbutton subPageOverlay subsubPage' id='" +
                tabID +
                "' data-pos='" +
                myClass +
                "'><span>" +
                tabTitle +
                "</span><div class='subsubpageOverlay'><div class='blindHead'></div><div class='overlayContent'><div class='closeTabs closeSubTabs emosbutton'></div><div class='pagerHead pagerHeadLine'>" +
                tabTitle +
                "</div><div class='overlayContentElements'></div></div>"
            );
          } else if (
            this.parent[0].classList.contains("overlayContentElements")
          ) {
            tab = $(
              "<div class='emosbutton subPageOverlay subsubsubPage' id='" +
                tabID +
                "' data-pos='" +
                myClass +
                "'><span>" +
                tabTitle +
                "</span><div class='subsubsubpageOverlay'><div class='blindHead'></div><div class='overlayContent'><div class='closeTabs closeSubTabs emosbutton'></div><div class='pagerHead pagerHeadLine'>" +
                tabTitle +
                "</div><div class='overlayContentElements'></div></div>"
            );
          } else {
            tab = $(
              "<div class='DiagnosisSubPageBlank dPage' id='" +
                tabID +
                "' data-pos='" +
                myClass +
                "'></div>"
            );
          }

          var viewName = "";
          if (
            tabTitle.includes("Private") ||
            tabTitle.includes("Public") ||
            this.diagnosisWindow.additionalClass === "privateOverlay"
          ) {
            //  === 'Private1'
            $("#contextMenu").empty();
            $(
              '<li class="subContext contextlast context"><a href="#">Copy to new private Tab</a></li>'
            ).appendTo("#contextMenu");
            $(
              '<li class="subContext elementdelete"><a href="#">delete element from Tab</a></li>'
            ).appendTo("#contextMenu");
            $(
              '<li class="subContext context"><a class="first" href="#' +
                tabID +
                '">Copy to Tab ' +
                myClass +
                "</a></li>"
            ).insertBefore("#contextMenu .contextlast");

            if (this.diagnosisWindow.additionalClass === "privateOverlay") {
              bevorTable = $(
                '<div class="radio"><label><input type="radio" name="view" value="compact" onchange="emosWS.SubPageControl.prototype.changeOverlayView(this);" checked="checked">comfort</label><label><input type="radio" name="view" value="comfort" onchange="emosWS.SubPageControl.prototype.changeOverlayView(this);">compact</label></div>'
              );
            } else {
              bevorTable = $(
                '<div class="radio"><label><input type="radio" name="view" value="compact" onchange="emosWS.SubPageControl.prototype.changeView(this);" checked="checked">compact</label><label><input type="radio" name="view" value="comfort" onchange="emosWS.SubPageControl.prototype.changeView(this);">comfort</label></div>'
              );
            }

            addTable = $(
              "<table cellspacing='0' class='privTable' id='" +
                pageTable +
                "'><colgroup><col width='210'><col width='70'><col width='70'></colgroup><tbody class='tBody'><tr class='noBorder'><th>Name</th><th>Format</th><th>Value</th></tr></tbody></table>"
            );
            if (tabData["MyPlace"] && tabData["MyPlace"] === "privateOverlay") {
              if (tabData["PosCounter"] === 0) {
                bevorTable.appendTo(tab);
              } else {
                $('<div class="radio empty"></div>').appendTo(tab);
              }
            } else {
              bevorTable.appendTo(tab);
            }
            tab.append(
              '<label class="publishcheck ' +
                visiClass +
                '"><input class="plantcheckbox privatecheckbox" type="checkbox" name="topublish" value="" ><span></span></label>'
            );
            addTable.appendTo(tab);
          } else if (tabTitle === "Summaries") {
            //                        addTable = $("<div/>", {
            //                            "class": "addMess"
            //                        });
            //                        addTable.append('<div class="DiagnosisText">Releases</div>');
            //                        addTable.appendTo(tab);

            addTable1 = $("<div/>", {
              class: "addMess1",
            });
            addTable1.append('<div class="DiagnosisText">Releases</div>');
            addTable1.appendTo(tab);

            var tmpContainer = $("<div/>", {
              class: "Groupbox ",
            });

            tmpContainer.append('<div class="DiagnosisText">Diagnose</div>');
            tmpContainer.append(
              '<span class="xtext1">PLC</span><span class="xtext2">' +
                this.diagnosisWindow.PLC +
                "</span><br>"
            );
            tmpContainer.append(
              '<span class="xtext1">ID</span><span class="xtext2">' +
                this.diagnosisWindow.ID +
                "</span><br>"
            );
            tmpContainer.append(
              '<span class="xtext1">FU</span><span class="xtext2">' +
                this.diagnosisWindow.winName +
                "</span><br>"
            );
            tmpContainer.append(
              '<span class="xtext1">PLC Version</span><span class="xtext2 plcversion"></span><br>'
            );
            tmpContainer.append(
              '<span class="xtext1">HMI Versions</span><span class="xtext2 hmiversions">' +
                this.diagnosisWindow.windowData.Version.replace(
                  /(..)-(..)/,
                  "__  $1 $2"
                ) +
                "</span><br>"
            );

            var tmpButton = $("<div/>", {
              class: "emosbutton welcome ",
              text: "i",
              click: function () {
                emosWS.debug.show();
              },
            });
            tmpButton.appendTo(tmpContainer);
            tmpContainer.append(
              '<span class="infobuttontext">Communication Diagnosis</span>'
            );
            tmpContainer.appendTo(tab);
            //                        var tmpContainer = $("<div/>", {
            //                            "class": "Groupbox "
            //                        });
            //                        tmpContainer.append('<div class="DiagnosisText">Communication Diagnosis</div>');

            //                        tmpContainer.appendTo(tab);

            //                        var tmpContainer = $("<div/>", {
            //                            "class": "Groupbox ecodoku"
            //                        });
            //                        tmpContainer.append('<div class="DiagnosisText">EcoDocu</div>');
            //                        tmpContainer.appendTo(tab);
          }
          //                    else if(tabTitle === 'Scanner'){
          //                        bevorTable = null;
          //                        addTable = $("<div/>", {
          //                            "id": "generateQR",
          //                            "class": "emosbutton",
          //                            "text" : "Generate QR-Code"
          //                        });
          //                        addTable.appendTo(tab);
          //                    }

          $(tab)[0].head = tabTitle;
          $(tab)[0].headId =
            this.diagnosisWindow.getTextPrefix() + tabData.TextID;
          $(tab)[0].tabNum = tabid;

          tab.appendTo(tabs);

          var tabText = document.getElementById(tabTextId);
          //                    emosWS.sendAdviseText(this.diagnosisWindow.getTextPrefix() + tabData.TextID, "name", function (msg, itabText) {
          //                        if (msg.value !== "")
          //                            itabText.textContent = msg.value;
          //                    }, tabText);
          //

          if (!tabData.Visible || tabData.Visible === "2") {
            if (tab.hasClass("subsubPage")) {
              this.diagnosisWindow.appendPage(
                tab.find(".subsubpageOverlay .overlayContentElements"),
                tabData,
                tabText,
                parseInt(tabData.VisibleAtRight || "0"),
                tabid,
                tabs
              );
            } else if (tab.hasClass("subsubsubPage")) {
              this.diagnosisWindow.appendPage(
                tab.find(".subsubsubpageOverlay .overlayContentElements"),
                tabData,
                tabText,
                parseInt(tabData.VisibleAtRight || "0"),
                tabid,
                tabs
              );
            } else {
              this.diagnosisWindow.appendPage(
                tab,
                tabData,
                tabText,
                parseInt(tabData.VisibleAtRight || "0"),
                tabid,
                tabs
              );
            }

            if (
              tabid === 1 ||
              tab.hasClass("subsubPage") ||
              tab.hasClass("subsubsubPage")
            ) {
              $("#" + tab.attr("id")).show();
            } else {
              $("#" + tab.attr("id")).css({ display: "none", right: -500 });
            }
          }
        }
        if (tab.hasClass("subsubPage") && i === len - 1) {
          tabs
            .find(".subsubpageOverlay .overlayContent")
            .append(
              '<div class="subFooter">' +
                '<span class="scrollUp"></span><span class="scrollDown active"></span>' +
                "</div></div></div>"
            );
        }
        //                if(tab.hasClass('subsubsubPage') && i === len - 1) {
        //                    tabs.find('.subsubsubpageOverlay .overlayContentElements').append('<div class="subFooter">' +
        //                    '<span class="scrollUp"></span><span class="scrollDown active"></span>' +
        //                    '</div></div></div>');
        //                }
      }
    } catch (err) {
      console.log("SubPageControl failed: " + err);
    }
  };
  SubPageControl.prototype.changeView = function (self) {
    $(".comfort").toggle();
    $("input[value=" + self.value + "]").prop("checked", true);
    //        $(self).closest('.dPage').find('.comfort').toggle();
  };
  SubPageControl.prototype.changeOverlayView = function (self) {
    $(".compact").toggle();
    $(".subcompact").toggle();
    $("input[value=" + self.value + "]").prop("checked", true);
    //        $(self).closest('.dPage').find('.comfort').toggle();
  };

  emosWS.SubPageControl = SubPageControl;

  function AddSubTab(parent, myName, myText) {
    //data, diagnosisWindow, subtabs
    //this.parent = parent;
    //        this.data = data;
    //        this.diagnosisWindow = diagnosisWindow;
    //        this.subtabs = subtabs;
    this.parent = parent; //$('.diagnose').find('.dPage.Private .diasubtabs');
    this.myName = myName;
    this.myText = myText;
    this.init();
  }

  AddSubTab.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var pageHead = getElementGlobalID();
      var pageTable = getElementGlobalID();
      var numberOfSub = this.parent.find(".DiagnosisSubPageBlank").length + 1;
      var myChecked = "";
      var myText = "";
      var visiClass = "hideme";
      if (!this.myName || this.myName === "undefined") {
        this.myName = "Private" + numberOfSub;
      }
      var bevorTable =
        '<div class="radio"><label><input type="radio" name="view' +
        numberOfSub +
        '" value="compact" onchange="emosWS.SubPageControl.prototype.changeView(this);" checked="checked">compact</label><label><input type="radio" name="view' +
        numberOfSub +
        '" value="comfort" onchange="emosWS.SubPageControl.prototype.changeView(this);">comfort</label></div>';
      var bevorTable2 =
        '<label class="publishcheck ' +
        visiClass +
        '"><input class="plantcheckbox privatecheckbox" type="checkbox" name="topublish" value=""><span></span></label>';

      var body = $(
        "<div class='DiagnosisSubPageBlank dPage' id='" +
          id +
          "' data-pos='" +
          this.myName +
          "'>" +
          bevorTable +
          bevorTable2 +
          "<table cellspacing='0' class='privTable' id='" +
          pageTable +
          "'><colgroup><col width='210'><col width='70'><col width='70'></colgroup><tr class='noBorder'><th>Name</th><th>Format</th><th>Value</th></tr></table></div>"
      );
      //$(body)[0].tabNumbers = Object.keys(this.data).length;

      $(this.parent)[0].tabNumbers = numberOfSub;
      $(body)[0].head = this.myName;
      $(body)[0].headId = "Private" + numberOfSub;
      $(body)[0].tabNum = numberOfSub;
      body.appendTo(this.parent);
      $("#" + id).css({ display: "none", right: -500 });
      var inarray = false;
      var self = this;
      $.each($("#contextMenu li"), function (key, val) {
        if ($(val).text() === "Copy to Tab " + self.myName) {
          inarray = true;
        }
      });
      if (
        (emosWS.isAdmin() && myText === "Private" && !inarray) ||
        (emosWS.isAdmin() && !inarray)
      ) {
        $(
          '<li class="subContext context"><a href="#' +
            id +
            '">Copy to Tab ' +
            this.myName +
            "</a></li>"
        ).insertBefore("#contextMenu .contextlast");
      }
    } catch (err) {
      console.log("AddTab failed: " + err);
    }
  };

  emosWS.AddSubTab = AddSubTab;

  /* DiagnosisTimer class: the base class for Diagnosis timer data
   *
   * @param {type} stringValue
   * @returns {DiagnosisTimer}
   */
  //function DiagnosisTimer(stringValue) {
  var DiagnosisTimer = function (stringValue) {
    this.data = null;
    this.setValue(stringValue);
  };

  /* Set timer value
   *
   * @param {type} value
   * @returns {DiagnosisTimer.prototype.decode.Anonym$24}
   */
  DiagnosisTimer.prototype.setValue = function (value) {
    this.data = this.decode(value);
  };

  /* Decode timer value from IOManager and return decoded data
   *
   * @param {type} value
   * @returns {DiagnosisTimer.prototype.decode.Anonym$23}
   */
  DiagnosisTimer.prototype.decode = function (value) {
    return { value: value };
  };

  /* Return the encoded the data which can be written to IOM
   *
   * @returns {DiagnosisTimer.prototype.data}
   */
  DiagnosisTimer.prototype.encode = function () {
    return this.data.value;
  };

  /* Return the data
   *
   * @returns {DiagnosisTimer.prototype.data}
   */
  DiagnosisTimer.prototype.getData = function () {
    return this.data;
  };

  /* Return the presentation string
   *
   * @returns {DiagnosisTimer.prototype.data.value}
   */
  DiagnosisTimer.prototype.toString = function () {
    return this.data.value;
  };

  /* Format number in 2 digits format
   *
   * @param {type} number
   * @returns {Number}
   */
  DiagnosisTimer.prototype.formatNumber = function (number) {
    return number < 10
      ? (100 + number).toString().slice(-2)
      : number.toString();
  };

  /* DiagnosisTimerSecond (extends DiagnosisTimer): Timer in second value
   *
   * @param {type} value
   * @returns {DiagnosisTimerSecond}
   */
  var DiagnosisTimerSecond = function (value, plcBase, visuBase) {
    this.plcBase = plcBase;
    this.visuBase = visuBase;
    DiagnosisTimer.call(this, value);
  };

  DiagnosisTimerSecond.prototype = Object.create(DiagnosisTimer.prototype);
  DiagnosisTimerSecond.prototype.constructor = DiagnosisTimerSecond;
  DiagnosisTimerSecond.prototype.decode = function (value) {
    if (this.visuBase === "ms") {
      var msecond = parseInt(value) * (this.plcBase === "ms" ? 1 : 1000);
      var minute = Math.floor(msecond / 60000);
      msecond -= minute * 60000;
      var second = Math.floor(msecond / 1000);
      msecond -= second * 1000;
      msecond = Math.round(msecond);

      return { value: value, minute: minute, second: second, msecond: msecond };
    } else {
      var second = parseInt(value) / (this.plcBase === "ms" ? 1000 : 1);
      var hour = Math.floor(second / 3600);
      second -= hour * 3600;
      var minute = Math.floor(second / 60);
      second -= minute * 60;
      second = Math.round(second);

      return { value: value, hour: hour, minute: minute, second: second };
    }
  };
  DiagnosisTimerSecond.prototype.encode = function (param) {
    if (this.visuBase === "ms") {
      this.data.minute = parseInt(param.minute);
      this.data.second = parseInt(param.second);
      this.data.msecond = parseInt(param.msecond);
      this.data.value =
        (this.data.minute * 60000 +
          this.data.second * 1000 +
          this.data.msecond) /
        (this.plcBase === "ms" ? 1 : 1000);
    } else {
      this.data.hour = parseInt(param.hour);
      this.data.minute = parseInt(param.minute);
      this.data.second = parseInt(param.second);
      this.data.value =
        (this.data.hour * 3600 + this.data.minute * 60 + this.data.second) *
        (this.plcBase === "ms" ? 1000 : 1);
    }
    return this.data.value;
  };

  DiagnosisTimerSecond.prototype.toString = function () {
    if (this.visuBase === "ms") {
      var time = "";
      var unit = "";
      if (this.data.minute !== 0) {
        time += this.formatNumber(this.data.minute) + ":";
        unit += "m:";
      }
      if (!(this.data.minute === 0 && this.data.second === 0)) {
        time += this.formatNumber(this.data.second) + ":";
        unit += "s:";
      }
      time += this.formatNumber(this.data.msecond);
      unit += "ms";
      return time + " " + unit;
    } else {
      var time = "";
      var unit = "";
      if (this.data.hour !== 0) {
        time += this.formatNumber(this.data.hour) + ":";
        unit += "h:";
      }
      if (!(this.data.hour === 0 && this.data.minute === 0)) {
        time += this.formatNumber(this.data.minute) + ":";
        unit += "m:";
      }
      time += this.formatNumber(this.data.second);
      unit += "s";
      return time + " " + unit;
    }
  };

  /* DiagnosisTimerMinute (extends DiagnosisTimer): Timer in minute value
   *
   * @param {type} value
   * @returns {DiagnosisTimerMinute}
   */
  var DiagnosisTimerMinute = function (value) {
    DiagnosisTimer.call(this, value);
  };

  DiagnosisTimerMinute.prototype = Object.create(DiagnosisTimer.prototype);
  DiagnosisTimerMinute.prototype.constructor = DiagnosisTimerMinute;
  DiagnosisTimerMinute.prototype.decode = function (minuteString) {
    var minute = parseInt(minuteString);
    var day = Math.floor(minute / 1440);
    minute -= day * 1440;
    var hour = Math.floor(minute / 60);
    minute -= hour * 60;

    return { value: minuteString, day: day, hour: hour, minute: minute };
  };
  DiagnosisTimerMinute.prototype.encode = function (param) {
    this.data.day = parseInt(param.day);
    this.data.hour = parseInt(param.hour);
    this.data.minute = parseInt(param.minute);
    this.data.value =
      this.data.day * 1440 + this.data.hour * 60 + this.data.minute;
    return this.data.value;
  };

  DiagnosisTimerMinute.prototype.toString = function () {
    var time = "";
    var unit = "";
    if (this.data.day !== 0) {
      time += formatNumber(this.data.day) + ":";
      unit += "d:";
    }
    if (!(this.data.day === 0 && this.data.minute === 0)) {
      time += formatNumber(this.data.hour) + ":";
      unit += "h:";
    }
    time += formatNumber(this.data.minute);
    unit += "m";
    return time + " " + unit;
  };

  /* DiagnosisTimerSiemensDate (extends DiagnosisTimer): Timer in Siemens
   * Date value
   *
   * @param {type} value
   * @returns {DiagnosisTimerSiemensDate}
   */
  var DiagnosisTimerSiemensDate = function (value) {
    DiagnosisTimer.call(this, value);
  };

  DiagnosisTimerSiemensDate.prototype = Object.create(DiagnosisTimer.prototype);
  DiagnosisTimerSiemensDate.prototype.constructor = DiagnosisTimerSiemensDate;
  DiagnosisTimerSiemensDate.prototype.decode = function (dateString) {
    try {
      var year = 1989;
      var month = 12;
      var day = 30;

      var pattern = /(.*?)-(.*?)-(.*?)$/;
      var result = dateString.replace(
        pattern,
        function (match, iyear, imonth, iday) {
          year = parseInt(iyear);
          month = parseInt(imonth);
          day = parseInt(iday);
        }
      );
      return { value: dateString, year: year, month: month, day: day };
    } catch (err) {
      return { value: dateString, year: year, month: month, day: day };
    }
  };
  DiagnosisTimerSiemensDate.prototype.encode = function (param) {
    this.data.year = param.year;
    this.data.month = param.month;
    this.data.day = param.day;
    this.data.value =
      param.year +
      "-" +
      this.formatNumber(param.month) +
      "-" +
      this.formatNumber(param.day);
    return this.data.value;
  };
  DiagnosisTimerSiemensDate.prototype.toString = function () {
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
    ];
    return (
      (this.data.day < 10 ? "0" + this.data.day : this.data.day) +
      " " +
      months[this.data.month - 1] +
      " " +
      this.data.year
    );
  };

  /* DiagnosisTimerSiemensTimeOfDate (extends DiagnosisTimer): Timer in Siemens
   * TimeOfDate value
   *
   * @param {type} value
   * @returns {DiagnosisTimerSiemensTimeOfDate}
   */
  var DiagnosisTimerSiemensTimeOfDate = function (value) {
    DiagnosisTimer.call(this, value);
  };
  DiagnosisTimerSiemensTimeOfDate.prototype = Object.create(
    DiagnosisTimer.prototype
  );
  DiagnosisTimerSiemensTimeOfDate.prototype.constructor =
    DiagnosisTimerSiemensTimeOfDate;
  DiagnosisTimerSiemensTimeOfDate.prototype.decode = function (timeString) {
    try {
      var hour = 12;
      var minute = 0;
      var second = 0;

      var pattern = /(.*?):(.*?):(.*?)\.(.*?)$/;
      var result = timeString.replace(
        pattern,
        function (match, ihour, iminute, isecond, ims) {
          hour = parseInt(ihour);
          minute = parseInt(iminute);
          second = parseInt(isecond);
        }
      );
      return { value: timeString, hour: hour, minute: minute, second: second };
    } catch (err) {
      return { value: timeString, hour: hour, minute: minute, second: second };
    }
  };
  DiagnosisTimerSiemensTimeOfDate.prototype.encode = function (param) {
    this.data.hour = param.hour;
    this.data.minute = param.minute;
    this.data.second = param.second;
    this.data.value =
      param.hour + ":" + param.minute + ":" + param.second + ".0";
    return this.data.value;
  };
  DiagnosisTimerSiemensTimeOfDate.prototype.toString = function () {
    var AMPM = "AM";
    var hour = this.data.hour;
    if (hour > 12) {
      hour -= 12;
      AMPM = "PM";
    }
    return (
      hour +
      ":" +
      (this.data.minute < 10 ? "0" + this.data.minute : this.data.minute) +
      ":" +
      (this.data.second < 10 ? "0" + this.data.second : this.data.second) +
      " " +
      AMPM
    );
  };

  /* DiagnosisTimerSiemensTime (extends DiagnosisTimer): Timer in Siemens
   * Time value
   *
   * @param {type} value
   * @returns {DiagnosisTimerSiemensTime}
   */
  var DiagnosisTimerSiemensTime = function (value) {
    DiagnosisTimer.call(this, value);
  };
  DiagnosisTimerSiemensTime.prototype = Object.create(DiagnosisTimer.prototype);
  DiagnosisTimerSiemensTime.prototype.constructor = DiagnosisTimerSiemensTime;
  DiagnosisTimerSiemensTime.prototype.decode = function (timeString) {
    try {
      var day = 0;
      var hour = 0;
      var minute = 0;
      var second = 0;
      var ms = 0;

      var pattern = /(\d+D)?(\d+H)?(\d+M)?(\d+S)?(\d+MS)?$/;
      var self = this;
      var result = timeString.replace(
        pattern,
        function (match, iday, ihour, iminute, isecond, ims) {
          day = self.getNumberFromString(iday);
          hour = self.getNumberFromString(ihour);
          minute = self.getNumberFromString(iminute);
          second = self.getNumberFromString(isecond);
          ms = self.getNumberFromString(ims);
        }
      );
      return {
        value: timeString,
        day: day,
        hour: hour,
        minute: minute,
        second: second,
        ms: ms,
      };
    } catch (err) {
      return {
        value: timeString,
        day: day,
        hour: hour,
        minute: minute,
        second: second,
        ms: ms,
      };
    }
  };
  DiagnosisTimerSiemensTime.prototype.encode = function (param) {
    this.data.day = param.days;
    this.data.hour = param.hour;
    this.data.minute = param.minute;
    this.data.second = param.second;
    this.data.ms = param.ms;

    this.data.value =
      param.days +
      "D" +
      param.hour +
      "H" +
      param.minute +
      "M" +
      param.second +
      "S" +
      param.ms +
      "MS";
    return this.data.value;
  };
  DiagnosisTimerSiemensTime.prototype.toString = function () {
    var time = "";
    var unit = "";
    var prior = false;
    if (this.data.day !== 0) {
      time += this.data.day;
      unit += "d";
      prior = true;
    }
    if (
      !(this.data.day === 0 && this.data.hour === 0) &&
      !(
        this.data.hour === 0 &&
        this.data.minute === 0 &&
        this.data.second === 0 &&
        this.data.ms === 0
      )
    ) {
      var sign = prior ? ":" : "";
      time +=
        sign + (this.data.hour < 10 ? "0" + this.data.hour : this.data.hour);
      unit += sign + "h";
      prior = true;
    }
    if (
      !(
        this.data.day === 0 &&
        this.data.hour === 0 &&
        this.data.minute === 0
      ) &&
      !(this.data.minute === 0 && this.data.second === 0 && this.data.ms === 0)
    ) {
      //if (minute !== 0) {
      var sign = prior ? ":" : "";
      time +=
        sign +
        (this.data.minute < 10 ? "0" + this.data.minute : this.data.minute);
      unit += sign + "m";
      prior = true;
    }
    if (
      !(
        this.data.day === 0 &&
        this.data.hour === 0 &&
        this.data.minute === 0 &&
        this.data.second === 0
      ) &&
      !(this.data.second === 0 && this.data.ms === 0)
    ) {
      //if (second !== 0) {
      var sign = prior ? ":" : "";
      time +=
        sign +
        (this.data.second < 10 ? "0" + this.data.second : this.data.second);
      unit += sign + "s";
      prior = true;
    }
    if (
      !(
        this.data.day === 0 &&
        this.data.hour === 0 &&
        this.data.minute === 0 &&
        this.data.second === 0
      ) ||
      this.data.ms !== 0
    ) {
      //if (ms !== 0) {
      var sign = prior ? ":" : "";
      time += sign + (this.data.ms < 10 ? "0" + this.data.ms : this.data.ms);
      unit += sign + "ms";
    }

    var out = time + " " + unit;
    return out === " " ? "0 s" : out;
  };
  DiagnosisTimerSiemensTime.prototype.getNumberFromString = function (iString) {
    var result = 0;
    try {
      if (typeof iString !== "undefined") {
        var pattern = /(\d+)/;
        result = parseInt(iString.match(pattern)[0]);
      }
      return result;
    } catch (err) {
      return result;
    }
  };

  var DiagnosisTimerSiemensS5Time = function (value) {
    DiagnosisTimerSiemensTime.call(this, value);
  };
  DiagnosisTimerSiemensS5Time.prototype = Object.create(
    DiagnosisTimerSiemensTime.prototype
  );
  DiagnosisTimerSiemensS5Time.prototype.constructor =
    DiagnosisTimerSiemensS5Time;
  DiagnosisTimerSiemensS5Time.prototype.encode = function (param) {
    this.data.hour = param.hour;
    this.data.minute = param.minute;
    this.data.second = param.second;
    this.data.ms = param.ms;

    this.data.value =
      param.hour +
      "H" +
      param.minute +
      "M" +
      param.second +
      "S" +
      param.ms +
      "MS";
    return this.data.value;
  };
  DiagnosisTimerSiemensS5Time.prototype.toString = function () {
    var time = "";
    var unit = "";
    var prior = false;
    this.data.day = 0;

    if (
      !(this.data.day === 0 && this.data.hour === 0) &&
      !(
        this.data.hour === 0 &&
        this.data.minute === 0 &&
        this.data.second === 0 &&
        this.data.ms === 0
      )
    ) {
      var sign = prior ? ":" : "";
      time +=
        sign + (this.data.hour < 10 ? "0" + this.data.hour : this.data.hour);
      unit += sign + "h";
      prior = true;
    }
    if (
      !(
        this.data.day === 0 &&
        this.data.hour === 0 &&
        this.data.minute === 0
      ) &&
      !(this.data.minute === 0 && this.data.second === 0 && this.data.ms === 0)
    ) {
      //if (minute !== 0) {
      var sign = prior ? ":" : "";
      time +=
        sign +
        (this.data.minute < 10 ? "0" + this.data.minute : this.data.minute);
      unit += sign + "m";
      prior = true;
    }
    if (
      !(
        this.data.day === 0 &&
        this.data.hour === 0 &&
        this.data.minute === 0 &&
        this.data.second === 0
      ) &&
      !(this.data.second === 0 && this.data.ms === 0)
    ) {
      //if (second !== 0) {
      var sign = prior ? ":" : "";
      time +=
        sign +
        (this.data.second < 10 ? "0" + this.data.second : this.data.second);
      unit += sign + "s";
      prior = true;
    }
    if (
      !(
        this.data.day === 0 &&
        this.data.hour === 0 &&
        this.data.minute === 0 &&
        this.data.second === 0
      ) ||
      this.data.ms !== 0
    ) {
      //if (ms !== 0) {
      var sign = prior ? ":" : "";
      time += sign + (this.data.ms < 10 ? "0" + this.data.ms : this.data.ms);
      unit += sign + "ms";
    }

    var out = time + " " + unit;
    return out === " " ? "0 s" : out;
  };

  /* DiagnosisTimerSiemensDateAndTime (extends DiagnosisTimer): Timer in Siemens
   * DateAndTime value
   *
   * @param {type} value
   * @returns {DiagnosisTimerSiemensDateAndTime}
   */
  var DiagnosisTimerSiemensDateAndTime = function (value) {
    DiagnosisTimer.call(this, value);
  };
  DiagnosisTimerSiemensDateAndTime.prototype = Object.create(
    DiagnosisTimer.prototype
  );
  DiagnosisTimerSiemensDateAndTime.prototype.constructor =
    DiagnosisTimerSiemensDateAndTime;
  DiagnosisTimerSiemensDateAndTime.prototype.decode = function (
    datetimeString
  ) {
    try {
      if (!datetimeString) return;

      var seperatedPosition = datetimeString.lastIndexOf("-");
      var dateString = datetimeString.substring(0, seperatedPosition);
      var timeString = datetimeString.substring(seperatedPosition + 1);

      this.date = new DiagnosisTimerSiemensDate(dateString);
      this.time = new DiagnosisTimerSiemensTimeOfDate(timeString);

      var dateData = this.date.getData();
      var timeData = this.time.getData();
      var out = $.extend({}, dateData, timeData);
      out.value = datetimeString;

      return out;
    } catch (err) {
      console.log(
        "DiagnosisTimerSiemensDateAndTime.prototype.decode failed: " + err
      );
    }
  };
  DiagnosisTimerSiemensDateAndTime.prototype.encode = function (param) {
    this.data.year = param.year;
    this.data.month = param.month;
    this.data.day = param.day;

    this.data.hour = param.hour;
    this.data.minute = param.minute;
    this.data.second = param.second;

    this.data.value =
      param.year +
      "-" +
      this.formatNumber(param.month) +
      "-" +
      this.formatNumber(param.day) +
      "-" +
      param.hour +
      ":" +
      param.minute +
      ":" +
      param.second +
      ".0";
    return this.data.value;
  };
  DiagnosisTimerSiemensDateAndTime.prototype.toString = function () {
    return this.date.toString() + " " + this.time.toString();
  };

  /* List of color used in Diagnosis elements
   *
   * @type type
   */
  var colorList = {
    G: "green",
    R: "red",
    X: "black",
    B: "blue",
    O: "lightgrey",
    P: "pink",
    Y: "yellow",
  };

  function AddDataToSubTab(
    parent,
    data,
    plc,
    key,
    writable,
    myPrivId,
    myPrivOverlay,
    elementCount
  ) {
    this.parent = parent;
    this.data = data;
    this.valueInSecond = data.valueInSecond;
    this.writable = data.writable;
    this.myKey = key;
    this.objectType = DiagnosisCommon.getObjectType(key);
    this.textValue = "";
    this.myPrivOverlay = myPrivOverlay;
    this.hoursValue = this.minutesValue = this.secondsValue = null;
    this.elementCount = elementCount;
    this.plc = plc;
    //        this.plctag = plc + "." + this.data.OPCID;
    //        this.plctag2 = plc + "." + this.data.OPCID2;
    //        this.plctagLed = this.plc + "." + this.data.LEDOPCID;
    if (this.data.OPCID) this.plctag = this.plc + "." + this.data.OPCID;
    if (this.data.OPCID2) this.plctag2 = this.plc + "." + this.data.OPCID2;
    if (this.data.LEDOPCID)
      this.plctagLed = this.plc + "." + this.data.LEDOPCID;

    if (this.data.writeTagWR1)
      this.writeLeft = this.plc + "." + this.data.writeTagWR1;
    if (this.data.readTagRD1)
      this.readLeft = this.plc + "." + this.data.readTagRD1;
    if (this.data.writeTagWR2)
      this.writeRight = this.plc + "." + this.data.writeTagWR2;
    if (this.data.writeTagWR3)
      this.writeMiddle = this.plc + "." + this.data.writeTagWR2;
    this.writeRight = this.plc + "." + this.data.writeTagWR3;
    if (this.data.readTagRD2)
      this.readRight = this.plc + "." + this.data.readTagRD2;
    if (this.data.readTagRD4) {
      this.readLeft = false;
      this.readRight = false;
      this.read1 = this.plc + "." + this.data.readTagRD1;
      this.read2 = this.plc + "." + this.data.readTagRD2;
      this.read3 = this.plc + "." + this.data.readTagRD3;
      this.read4 = this.plc + "." + this.data.readTagRD4;
    }
    this.led = this.LEDValue = this.writeRect = null;
    this.emosAdviceElement = null;
    this.myPrivId = myPrivId;
    this.unit = emosWS.getUnit();
    this.textPrefixList = { 1: "T01_", 3: "T03_", 5: "T05_" };
    this.icon = this.data.leftIcon ? this.data.leftIcon : "on";
    if (this.writable) {
      this.classelist = this.icon + " emosbutton";
    }
    //this.init();
    DiagnosisElement.call(this, { data: data, writable: this.writable });
  }

  AddDataToSubTab.prototype = Object.create(DiagnosisElement.prototype);
  AddDataToSubTab.prototype.constructor = AddDataToSubTab;

  AddDataToSubTab.prototype.setTimerValue = function () {
    switch (this.type) {
      case timerTypes.Second:
        this.plcBase = this.data.Base || "s";
        this.visuBase = this.data.VisuBase || "s";
        this.timerValue = new DiagnosisTimerSecond(
          0,
          this.plcBase,
          this.visuBase
        ); //new DiagnosisTimerSecond();
        break;

      case timerTypes.Minute:
        this.timerValue = new DiagnosisTimerMinute();
        break;

      case timerTypes.SiemensDate:
        this.timerValue = new DiagnosisTimerSiemensDate();
        break;

      case timerTypes.SiemensTimeOfDay:
        this.timerValue = new DiagnosisTimerSiemensTimeOfDate();
        break;

      case timerTypes.SiemensTime:
        this.timerValue = new DiagnosisTimerSiemensTime();
        break;

      case timerTypes.SiemensS5Time:
        this.timerValue = new DiagnosisTimerSiemensS5Time();
        break;

      case timerTypes.SiemensDateAndTime:
        this.timerValue = new DiagnosisTimerSiemensDateAndTime();
        break;

      default:
        this.timerValue = new DiagnosisTimer();
        break;
    }
  };
  AddDataToSubTab.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var ledId = getElementGlobalID();
      this.ledID = ledId;
      var ledId1 = getElementGlobalID();
      this.ledID1 = ledId1;
      var ledId2 = getElementGlobalID();
      this.ledID2 = ledId2;
      var ledId3 = getElementGlobalID();
      this.ledID3 = ledId3;
      var ledId4 = getElementGlobalID();
      this.ledID4 = ledId4;
      var ledId5 = getElementGlobalID();
      this.ledID5 = ledId5;
      var ledId6 = getElementGlobalID();
      this.ledID6 = ledId6;
      var ledId7 = getElementGlobalID();
      this.ledID7 = ledId7;
      var textId = getElementGlobalID();
      var textId1 = getElementGlobalID();
      var plcId = getElementGlobalID();
      var writeRectId = getElementGlobalID();
      var writeRectId2 = getElementGlobalID();
      var writeRectId3 = getElementGlobalID();
      var writeRectId4 = getElementGlobalID();
      var writeRectId5 = getElementGlobalID();
      var cancelbuttonId = getElementGlobalID();
      var savebuttonId = getElementGlobalID();
      var previewId = getElementGlobalID();
      var act = getElementGlobalID();
      var setP = getElementGlobalID();
      var numberId = getElementGlobalID();
      var number2Id = getElementGlobalID();
      var number3Id = getElementGlobalID();
      var number4Id = getElementGlobalID();
      var number5Id = getElementGlobalID();
      var hoursId0 = getElementGlobalID();
      var minutesId0 = getElementGlobalID();
      var secondsId0 = getElementGlobalID();
      var hoursId = getElementGlobalID();
      var minutesId = getElementGlobalID();
      var secondsId = getElementGlobalID();
      var hoursId2 = getElementGlobalID();
      var minutesId2 = getElementGlobalID();
      var secondsId2 = getElementGlobalID();
      var hoursId3 = getElementGlobalID();
      var minutesId3 = getElementGlobalID();
      var secondsId3 = getElementGlobalID();
      var placeholder;
      var hasplc2 = false;
      var hasplcLed = false;
      var tableValue;
      var elemFormat;
      var multiName;
      var multiGroup = false;

      switch (this.objectType) {
        case "AddTextLED":
        case "AddTextLEDLong":
        case "AddTextInputLED":
        case "AddTextLEDInputLong":
        case "AddTextLEDNiveau":
          var myWritable = this.data.writable ? "writable" : "notwritable";
          placeholder =
            "<span id='" +
            ledId +
            "' class='" +
            this.classelist +
            " orange " +
            myWritable +
            "'></span><div class='textLed'><span id='" +
            textId +
            "'>" +
            this.data.Text +
            "</span></div><br style='clear:both;' />";
          this.emosAdviceElement = "emosWS.DiagnosisTextLED.prototype";
          tableValue =
            "<span id='" + ledId1 + "' class='orange notwritable'></span>";
          elemFormat = "binary";
          break;
        case "AddCommandFeedback1WR1RD":
        case "AddCommandFeedback2WR1RD":
        case "AddCommandFeedback2WR2RD":
          multiGroup = true;
          elemFormat = "<div>binary</div>";
          tableValue =
            "<div id='" +
            ledId3 +
            "' class='orange notwritable' style='display:block;float:none;'></div>";
          multiName = "<div>" + this.data.readTagRD1 + "</div>";
          if (this.data.readTagRD2) {
            multiName += "<div>" + this.data.readTagRD2 + "</div>";
            //                        elemFormat += '<div>binary</div>';
            tableValue +=
              "<div id='" +
              ledId4 +
              "' class='orange notwritable' style='display:block;float:none;'></div>";
          }
          placeholder =
            "<span id='" +
            ledId +
            "' class='emosbutton links " +
            this.data.leftIcon +
            "'></span>" +
            "<span id='" +
            ledId2 +
            "' class='emosbutton rechts " +
            this.data.rightIcon +
            "'></span>" +
            "<div class='textLed'>" +
            "<span id='" +
            textId +
            "'>" +
            this.data.Text +
            "</span>" +
            "</div>" +
            "<br style='clear:both;' />";
          this.emosAdviceElement = "emosWS.CommandFeedback2WR2RD.prototype";
          break;
        case "AddSpecialPurposeCentralStart":
          multiGroup = true;
          elemFormat = "<div>binary</div>";
          tableValue =
            "<div id='" +
            ledId4 +
            "' class='orange notwritable' style='display:block;float:none;'></div>";
          multiName = "<div>" + this.data.readTagRD1 + "</div>";
          if (this.data.readTagRD2) {
            multiName += "<div>" + this.data.readTagRD2 + "</div>";
            //                        elemFormat += '<div>binary</div>';
            tableValue +=
              "<div id='" +
              ledId5 +
              "' class='orange notwritable' style='display:block;float:none;'></div><div id='" +
              ledId6 +
              "' class='orange notwritable' style='display:block;float:none;'></div>";
          }
          placeholder =
            "<span id='" +
            ledId +
            "' class='emosbutton halblinks off writable'></span>" +
            "<span id='" +
            ledId2 +
            "' class='emosbutton mitte off_time writable'></span>" +
            "<span id='" +
            ledId3 +
            "' class='emosbutton halbrechts plantStartStop writable'></span>" +
            "<div class='textLed smallerText'>" +
            "<span id='" +
            textId +
            "'>" +
            this.data.Text +
            "</span>" +
            "</div><br class='cl'>";
          this.emosAdviceElement =
            "emosWS.SpecialPurposeCentralStart.prototype";
          break;
        case "AddCommandFeedback1WR2RD":
          multiGroup = true;
          elemFormat = "<div>binary</div>";
          tableValue =
            "<div id='" +
            ledId3 +
            "' class='orange notwritable' style='display:block;float:none;'></div>";
          multiName = "<div>" + this.data.readTagRD1 + "</div>";
          if (this.data.readTagRD2) {
            multiName += "<div>" + this.data.readTagRD2 + "</div>";
            //                        elemFormat += '<div>binary</div>';
            tableValue +=
              "<div id='" +
              ledId4 +
              "' class='orange notwritable' style='display:block;float:none;'></div>";
          }
          placeholder =
            "<span id='" +
            ledId +
            "' class='emosbutton notactive links " +
            this.data.leftIcon +
            "'></span>" +
            "<span id='" +
            ledId2 +
            "' class='emosbutton rechts " +
            this.data.rightIcon +
            "'></span>" +
            "<div class='textLed'>" +
            "<span id='" +
            textId +
            "'>" +
            this.data.Text +
            "</span>" +
            "</div>" +
            "<br style='clear:both;' />";
          this.emosAdviceElement = "emosWS.CommandFeedback1WR2RD.prototype";

          break;
        case "AddCommandFeedback3WR4RD":
          multiGroup = true;
          elemFormat = "<div>binary</div>";
          tableValue =
            "<div id='" +
            ledId4 +
            "' class='orange notwritable' style='display:block;float:none;'></div>" +
            "<div id='" +
            ledId5 +
            "' class='orange notwritable' style='display:block;float:none;'></div>" +
            "<div id='" +
            ledId6 +
            "' class='orange notwritable' style='display:block;float:none;'></div>";
          multiName =
            "<div>" +
            this.data.readTagRD1 +
            "</div>" +
            "<div>" +
            this.data.readTagRD2 +
            "</div>" +
            "<div>" +
            this.data.readTagRD3 +
            "</div>" +
            "<div>" +
            this.data.readTagRD4 +
            "</div>";
          placeholder =
            "<span id='" +
            ledId +
            "' class='emosbutton halblinks " +
            this.data.leftIcon +
            "'></span>" +
            "<span id='" +
            ledId2 +
            "' class='emosbutton mitte " +
            this.data.middleIcon +
            "'></span>" +
            "<span id='" +
            ledId3 +
            "' class='emosbutton halbrechts " +
            this.data.rightIcon +
            "'></span>" +
            "<div class='textLed smallerText'>" +
            "<span id='" +
            textId +
            "'>" +
            this.data.Text +
            "</span>" +
            "</div><br class='cl'>";
          this.emosAdviceElement = "emosWS.CommandFeedback3WR4RD.prototype";
          break;
        case "AddStringInput":
        case "AddString":
        case "AddStringLong":
        case "AddStringInputLong":
          placeholder =
            "<span class='DiagnosisNumberLRTextTextSVG plcTag'>PLC_Tag:" +
            this.plctag +
            "</span><span id='" +
            savebuttonId +
            "' class='savebutton  emosbutton'></span><span id='" +
            cancelbuttonId +
            "' class='cancelbutton  emosbutton'></span><span id='" +
            writeRectId +
            "' class='writebutton getKeypad keyboardInputInitiator emosbutton'></span><br class='cl'>";
          placeholder +=
            "<span style='display: inline-block;margin-top: 10px;' class='DiagnosisNumberLRTextNumberSVG orange' id='" +
            textId +
            "'>" +
            this.textValue +
            "</span>";
          placeholder +=
            "<div class='DiagnosisStringButtons' style='margin-top:20px;padding-top: 0;'>";
          placeholder +=
            "<input lang='' maxlength=" +
            this.data.StrLen +
            " pattern='.{" +
            this.data.StrStart +
            "," +
            this.data.StrLen +
            "}' class='DiagnosisNumberLRTextNumberSVG preview keyboardInput' type='text' id='" +
            previewId +
            "' required></p>";
          placeholder += "</div>";

          this.emosAdviceElement = "emosWS.DiagnosisString.prototype";
          tableValue =
            "<span class='DiagnosisNumberLRTextNumberSVG orange' id='" +
            textId1 +
            "'>" +
            this.textValue +
            "</span>";
          elemFormat = "alphanum";
          break;
        case "AddTextDoubleTimerLong":
        case "AddTextDoubleTimerInputLong":
        case "AddTextDoubleTimerLongMin":
        case "AddTextDoubleTimerInputLongMin":
          placeholder =
            "<span class='DiagnosisNumberLRTextTextSVG' id='" +
            textId +
            "'>" +
            this.data.Text +
            "</span><span id='" +
            savebuttonId +
            "' class='savemebutton emosbutton'></span><span id='" +
            cancelbuttonId +
            "' class='cancelbutton emosbutton'></span><span id='" +
            writeRectId2 +
            "' class='writebutton emosbutton'></span><br class='cl'>" +
            "<div class='grey'><span class='pickertext' id='" +
            act +
            "'>Actual Value</span><span class='pickertime' id='" +
            numberId +
            "'><span class='pickertime hours orange' id='" +
            hoursId0 +
            "'>" +
            this.hoursValue +
            "</span><span class='doppelpunkt'>:</span><span class='pickertime minutes orange' id='" +
            minutesId0 +
            "'>" +
            this.minutesValue +
            "</span><span class='doppelpunkt'>:</span><span class='pickertime seconds orange' id='" +
            secondsId0 +
            "'>" +
            this.secondsValue +
            "</span></span></div>" +
            "<div style='padding: 3px;'><span class='pickertext' id='" +
            setP +
            "'>Setpoint</span><span id='" +
            number2Id +
            "' class='pickertime'><span class='pickertime hours orange' id='" +
            hoursId +
            "'>" +
            this.hoursValue +
            "</span><span class='doppelpunkt'>:</span><span class='pickertime minutes orange' id='" +
            minutesId +
            "'>" +
            this.minutesValue +
            "</span><span class='doppelpunkt'>:</span><span class='pickertime seconds orange' id='" +
            secondsId +
            "'>" +
            this.secondsValue +
            "</span></span></div>";
          this.emosAdviceElement = "emosWS.DiagnosisTextDoubleTimer.prototype";
          this.timerValue = this.valueInSecond
            ? new DiagnosisTimerSecond()
            : new DiagnosisTimerMinute();
          hasplc2 = true;
          tableValue =
            "&nbsp;<span id='" +
            hoursId3 +
            "'>" +
            this.hoursValue +
            "</span><span>:</span><span id='" +
            minutesId3 +
            "'>" +
            this.minutesValue +
            "</span><span>:</span><span id='" +
            secondsId3 +
            "'>" +
            this.secondsValue +
            "</span><br>";
          tableValue +=
            "(<span id='" +
            hoursId2 +
            "'>" +
            this.hoursValue +
            "</span><span>:</span><span id='" +
            minutesId2 +
            "'>" +
            this.minutesValue +
            "</span><span>:</span><span id='" +
            secondsId2 +
            "'>" +
            this.secondsValue +
            "</span>)";
          elemFormat = "hh:mm:ss";
          break;
        case "AddTextInteger":
        case "AddTextReal":
        case "AddTextIntegerLong":
        case "AddTextRealLong":
        case "AddTextIntegerInput":
        case "AddTextRealInput":
        case "AddTextRealInputNiveau":
        case "AddTextIntegerInputLong":
        case "AddTextRealInputLong":
          placeholder =
            "<span class='DiagnosisNumberLRTextTextSVG textfeld' id='" +
            textId +
            "'>" +
            this.data.Text +
            "</span><span id='" +
            savebuttonId +
            "' class='savebutton emosbutton'></span><span id='" +
            cancelbuttonId +
            "' class='cancelbutton emosbutton'></span><span id='" +
            writeRectId3 +
            "' class='writebutton getpad emosbutton'></span>" +
            "<form onsubmit='return false'>" +
            "<span class='DiagnosisNumberLRTextNumberSVG textfeld orange' oninput='this.form.amountRange.value=this.value; this.form.preview.value=this.value' id='" +
            numberId +
            "' data-value='" +
            this.numberValue +
            "'>" +
            this.value +
            emosWS.DiagnosisTextNumber.prototype.getUnitSymbol() +
            "</span>" +
            "<div class='DiagnosisStringButtons'>" +
            "</form>" +
            "</div>";
          this.emosAdviceElement = "emosWS.DiagnosisTextNumber.prototype";
          tableValue =
            "<span id='" +
            number4Id +
            "'>" +
            this.value +
            emosWS.DiagnosisTextNumber.prototype.getUnitSymbol() +
            "</span>";
          elemFormat = "integer";
          break;
        case "AddLEDTextIntegerLong":
        case "AddTextLEDIntegerLong":
        case "AddLEDTextRealLong":
        case "AddLEDTextIntegerInputLong":
        case "AddTextLEDIntegerInputLong":
        case "AddLEDTextRealInputLong":
          if (this.writable) {
            this.inputfield = true;
            placeholder =
              "<div style='float: right;position: absolute;right: 20px;'><span style='display: none;' class='DiagnosisNumberLRTextTextSVG'></span><span id='" +
              savebuttonId +
              "' class='savebutton emosbutton'></span><span id='" +
              cancelbuttonId +
              "' class='cancelbutton emosbutton'></span><span id='" +
              writeRectId4 +
              "' class='writebutton getpad emosbutton'></span><br class='cl'></div>" +
              "<span class='messageCircle' id='" +
              ledId +
              "'></span>" +
              "<span class='DiagnosisNumberLRTextText' id='" +
              textId +
              "'>" +
              this.data.Text +
              "</span>" +
              "<form onsubmit='return false' style='float:left; padding-top: 5px;'>" +
              "<span class='DiagnosisNumberLRTextNumberSVG textfeld' oninput='this.form.amountRange.value=this.value; this.form.preview.value=this.value' id='" +
              numberId +
              "' data-value='" +
              this.numberValue +
              "'>" +
              this.value +
              emosWS.DiagnosisLedTextNumber.prototype.getUnitSymbol() +
              "</span>" +
              "<div class='DiagnosisStringButtons'>" +
              "</form>" +
              "</div>";
          } else {
            this.inputfield = false;
            placeholder =
              "<span id='" +
              numberId +
              "' class='DiagnosisNumbers without'></span>" +
              "<span class='messageCircle without' id='" +
              ledId +
              "'></span>" +
              "<span class='DiagnosisNumberLRTextText without' id='" +
              textId +
              "'>" +
              this.data.Text +
              "</span><span id='" +
              writeRectId4 +
              "'></span>" +
              "<br class='cl' />";
          }
          this.emosAdviceElement = "emosWS.DiagnosisLedTextNumber.prototype";
          hasplcLed = true;
          tableValue =
            "<span id='" +
            number5Id +
            "'>" +
            this.value +
            emosWS.DiagnosisTextNumber.prototype.getUnitSymbol() +
            "</span>";
          elemFormat = "float";
          break;
        case "AddTextIntegerIntegerLong":
        case "AddTextRealRealLong":
        case "AddTextIntegerIntegerInputLong":
        case "AddTextRealRealInputLong":
          placeholder =
            "<span class='DiagnosisNumberLRTextTextSVG' style='float:none;' id='" +
            textId +
            "'>" +
            this.data.Text +
            "</span>" +
            "<div style='float:left;margin-right: 55px;'>" +
            "<span style='display: block;' id='" +
            act +
            "'>Actual Value</span>" +
            "<span style='display: block;' class='DiagnosisNumberLRTextNumberSVG' id='" +
            numberId +
            "' data-value='" +
            this.numberValue +
            "'>" +
            this.numberValue +
            emosWS.DiagnosisTextNumberNumber.prototype.getUnitSymbol() +
            "</span>" +
            "</div>" +
            "<form onsubmit='return false' class='textnumnum'>" +
            "<span style='display: block;' id='" +
            setP +
            "'>Setpoint</span>" +
            "<span style='display: block; float:left;' class='DiagnosisNumberLRTextNumberSVG textfeld orange' oninput='this.form.amountRange.value=this.value; this.form.preview.value=this.value' id='" +
            number2Id +
            "' data-value='" +
            this.number2Value +
            "'>" +
            this.number2Value +
            emosWS.DiagnosisTextNumberNumber.prototype.getUnitSymbol() +
            "</span><span id='" +
            savebuttonId +
            "' class='savebutton second emosbutton'></span><span id='" +
            cancelbuttonId +
            "' class='cancelbutton emosbutton'></span><span id='" +
            writeRectId5 +
            "' class='writebutton getpad emosbutton'></span><br class='cl'>" +
            "<div class='DiagnosisStringButtons'>" +
            "</form>" +
            "</div>";
          this.emosAdviceElement = "emosWS.DiagnosisTextNumberNumber.prototype";
          hasplc2 = true;
          tableValue =
            "<span id='" +
            number3Id +
            "' data-value='" +
            this.number2Value +
            "'>" +
            this.number2Value +
            emosWS.DiagnosisTextNumberNumber.prototype.getUnitSymbol() +
            "</span>";
          elemFormat = "integer";
          break;
        case "AddTextTimerInputLong":
        case "AddTextSiemensDateInputLong":
        case "AddTextSiemens_TIME_TimerLong":
        case "AddTextSiemensTimeInputLong":
        case "AddTextSiemens_TIME_TimerInputLong":
        case "AddTextSiemens_S5TIME_TimerInputLong":
        case "AddTextSiemens_DATE_AND_TIME_TimerInputLong":
          placeholder =
            "<span class='DiagnosisNumberLRTextTextSVG' id='" +
            textId +
            "'>" +
            this.data.Text +
            "</span><span id='" +
            savebuttonId +
            "' class='savemebutton emosbutton'></span><span id='" +
            cancelbuttonId +
            "' class='cancelbutton emosbutton'></span><span id='" +
            writeRectId2 +
            "' class='writebutton emosbutton'></span><br class='cl'>" +
            "<span id='" +
            numberId +
            "' class='pickertime'><span class='pickertime hours orange' id='" +
            hoursId +
            "'>" +
            this.hoursValue +
            "</span><span class='doppelpunkt'>:</span><span class='pickertime minutes orange' id='" +
            minutesId +
            "'>" +
            this.minutesValue +
            "</span><span class='doppelpunkt'>:</span><span class='pickertime seconds orange' id='" +
            secondsId +
            "'>" +
            this.secondsValue +
            "</span></span></div>";
          this.emosAdviceElement = "emosWS.DiagnosisTextTimer.prototype";
          tableValue =
            "<span id='" +
            number2Id +
            "' class='pickertime'><span id='" +
            hoursId2 +
            "'>" +
            this.hoursValue +
            "</span><span>:</span><span id='" +
            minutesId2 +
            "'>" +
            this.minutesValue +
            "</span><span>:</span><span id='" +
            secondsId2 +
            "'>" +
            this.secondsValue +
            "</span></span>";
          elemFormat = "hh:mm:ss";
          if (this.objectType === "AddTextTimerInputLong") {
            this.type = timerTypes.Second;
          } else if (this.objectType === "AddTextSiemensDateInputLong") {
            this.type = timerTypes.SiemensDate;
          } else if (this.objectType === "AddTextSiemensTimeInputLong") {
            this.type = timerTypes.SiemensTimeOfDay;
          } else if (this.objectType === "AddTextSiemens_TIME_TimerInputLong") {
            this.type = timerTypes.SiemensTime;
          } else if (
            this.objectType === "AddTextSiemens_S5TIME_TimerInputLong"
          ) {
            this.type = timerTypes.SiemensS5Time;
          } else if (
            this.objectType === "AddTextSiemens_DATE_AND_TIME_TimerInputLong"
          ) {
            this.type = timerTypes.SiemensDateAndTime;
          }
          this.setTimerValue();
      }
      var addClass;
      if (this.parent.find("tr.compact").length % 2 === 0) {
        addClass = "odd";
      } else {
        addClass = "even";
      }
      var firstTR =
        "<tr data-group=" +
        this.elementCount +
        " class='parentsbox priv compact " +
        addClass +
        "'>";
      var trGroup =
        "<td class='tdFirst'>" + this.plc + " " + this.data.OPCID + "</td>";
      if (multiGroup) {
        firstTR =
          "<tr data-group=" +
          this.elementCount +
          " class='parentsbox priv compact noBottom " +
          addClass +
          "'><td colspan = '3'>" +
          this.plc +
          " " +
          this.data.OPCID +
          "</td></tr><tr data-group=" +
          this.elementCount +
          " class='parentsbox priv subcompact " +
          addClass +
          "'>";
        trGroup = "<td class='tdFirst'>" + multiName + "</td>";
      }

      if (!this.myPrivOverlay) {
        this.panel = $(
          firstTR +
            trGroup +
            "<td class='tdSecond'>" +
            elemFormat +
            "</td>" +
            "<td class='tdThird'>" +
            tableValue +
            "</td>" +
            "</tr>" +
            "<tr data-group=" +
            this.elementCount +
            " style='display:none;' class='priv comfort'><td colspan='3'>" +
            "<div data-group=" +
            this.elementCount +
            " class='Groupbox parentsbox priv' id='" +
            id +
            "'>" +
            placeholder +
            "<br style='clear:both;' />" +
            "</div>" +
            "</td></tr>"
        );
      } else {
        firstTR =
          "<tr data-group=" +
          this.elementCount +
          " class='parentsbox priv compact " +
          addClass +
          "'>";
        trGroup =
          "<td class='tdFirst' colspan = '3'>" +
          this.plc +
          " " +
          this.data.OPCID +
          "</td>";
        this.panel = $(
          "<tr data-group=" +
            this.elementCount +
            " class='dragbox'><td colspan='3' style='border:none;'>" +
            "<table cellpadding='0' cellspacing='0' style='border:none;'>" +
            firstTR +
            trGroup +
            //                    "<td class='tdSecond'>"+ elemFormat +"</td>" +
            //                    "<td class='tdThird'>"+ tableValue +"</td>" +
            "</tr>" +
            "<tr data-group=" +
            this.elementCount +
            " class='priv comfort'><td colspan='3'>" +
            "<div data-group=" +
            this.elementCount +
            " class='Groupbox parentsbox priv' id='" +
            id +
            "'>" +
            placeholder +
            //                    "<br style='clear:both;' />" +
            "</div>" +
            "</td></tr></table></td></tr>"
        );
        this.parent.find("colgroup col:nth-child(1)").attr("width", "200");
        this.parent.find("colgroup col:nth-child(2)").attr("width", "55");
        this.parent.find("colgroup col:nth-child(3)").attr("width", "55");
        this.parent.find("tr.noBorder").remove(); //.replaceWith( "<tr class='bottomBorder'><th>Elementlist</th></tr>" );
        //this.panel.find('tr.compact, tr.subcompact').hide();
      }

      this.panel[0].myData = this.data;
      this.panel[0].myKey = this.myKey;
      this.panel[0].myPLC = this.plc;
      this.panel[0].myPrivId = this.myPrivId;
      this.panel.find(".Groupbox")[0].myData = this.data;
      this.panel.appendTo(this.parent);

      this.writeRectId = writeRectId;
      this.writeRectId2 = writeRectId2;
      this.writeRectId3 = writeRectId3;
      this.writeRectId4 = writeRectId4;
      this.writeRectId5 = writeRectId5;
      this.textId = textId;
      this.led = document.getElementById(ledId);
      this.led1 = document.getElementById(ledId1);
      this.led2 = document.getElementById(ledId2);
      this.text = document.getElementById(textId);
      this.text1 = document.getElementById(textId1);
      this.writeRect1 = document.getElementById(id);
      this.id = id;

      this.cancelbutton = document.getElementById(cancelbuttonId);
      this.savebutton = document.getElementById(savebuttonId);
      this.number = document.getElementById(numberId);
      this.number2 = document.getElementById(number2Id);
      this.number3 = document.getElementById(number3Id);
      this.number4 = document.getElementById(number4Id);
      this.number5 = document.getElementById(number5Id);
      this.hours0 = document.getElementById(hoursId0);
      this.minutes0 = document.getElementById(minutesId0);
      this.seconds0 = document.getElementById(secondsId0);
      this.hours = document.getElementById(hoursId);
      this.minutes = document.getElementById(minutesId);
      this.seconds = document.getElementById(secondsId);
      this.hours2 = document.getElementById(hoursId2);
      this.minutes2 = document.getElementById(minutesId2);
      this.seconds2 = document.getElementById(secondsId2);
      this.hours3 = document.getElementById(hoursId3);
      this.minutes3 = document.getElementById(minutesId3);
      this.seconds3 = document.getElementById(secondsId3);
      this.writeRect = document.getElementById(writeRectId);
      this.writeRect2 = document.getElementById(writeRectId2);
      this.writeRect3 = document.getElementById(writeRectId3);
      this.writeRect4 = document.getElementById(writeRectId4);
      this.writeRect5 = document.getElementById(writeRectId5);
      this.act = act;
      this.setP = setP;
      if (this.plctag && !this.readLeft && !this.read1) {
        emosWS.advise(
          this.plctag,
          eval(this.emosAdviceElement).datachangeListener.bind(this),
          "",
          emosWS.tagType.IO
        );
      }
      if (hasplc2) {
        emosWS.advise(
          this.plctag2,
          eval(this.emosAdviceElement).datachange2Listener.bind(this),
          "",
          emosWS.tagType.IO
        );
      }
      if (hasplcLed) {
        emosWS.advise(
          this.plctagLed,
          eval(this.emosAdviceElement).datachangeLedListener.bind(this),
          "",
          emosWS.tagType.IO
        );
      }
      if (this.readLeft) {
        emosWS.advise(
          this.readLeft,
          eval(this.emosAdviceElement).datachangeListenerLeft.bind(this),
          "",
          emosWS.tagType.IO
        );
      }
      if (this.readRight) {
        emosWS.advise(
          this.readRight,
          eval(this.emosAdviceElement).datachangeListenerRight.bind(this),
          "",
          emosWS.tagType.IO
        );
      }
      if (this.read4) {
        emosWS.advise(
          this.read1,
          eval(this.emosAdviceElement).datachangeListener1.bind(this),
          "",
          emosWS.tagType.IO
        );
        emosWS.advise(
          this.read2,
          eval(this.emosAdviceElement).datachangeListener2.bind(this),
          "",
          emosWS.tagType.IO
        );
        emosWS.advise(
          this.read3,
          eval(this.emosAdviceElement).datachangeListener4.bind(this),
          "",
          emosWS.tagType.IO
        );
        emosWS.advise(
          this.read4,
          eval(this.emosAdviceElement).datachangeListener3.bind(this),
          "",
          emosWS.tagType.IO
        );
      }
      this.getAdviceText();

      //            emosWS.sendAdviseText(this.diagnosisWindow.getTextPrefix() + this.data.TextID, "name", function (msg) {
      //                if (msg.value !== "")
      //                    this.text.textContent = msg.value;
      //            }.bind(this));
      eval(this.emosAdviceElement).getWritable(this);
    } catch (err) {
      console.log("adddata init failed: " + err);
    }
  };
  AddDataToSubTab.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      $("#" + this.id)
        .find(".emosbutton")
        .removeClass("disabled");
    } else {
      $("#" + this.id).find(".emosbutton");
      // .addClass("disabled");
    }
    //        eval(this.emosAdviceElement).updateWrite.bind(this);
  };
  AddDataToSubTab.prototype.getAdviceText = function () {
    emosWS.sendAdviseText(
      this.textPrefixList[this.data.DiagnosisLibID] + this.data.TextID,
      "name",
      function (msg) {
        if (msg.value !== "") {
          this.text.textContent = msg.value;
        }
      }.bind(this),
      this
    );
    emosWS.sendAdviseText(
      this.textPrefixList[this.data.DiagnosisLibID] + "Setpoint",
      "name",
      function (msg) {
        $("#" + this.setP).text(msg.value + ":");
      },
      this
    );
    emosWS.sendAdviseText(
      this.textPrefixList[this.data.DiagnosisLibID] + "ActualValue",
      "name",
      function (msg) {
        $("#" + this.act).text(msg.value + ":");
      },
      this
    );
  };

  emosWS.AddDataToSubTab = AddDataToSubTab;

  function TopTextLED(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = "DiagnosisTopText"; //{"M": "DiagnosisTopTextLEDMIDDLE", "L": "DiagnosisTopTextLEDLEFT", "R": "DiagnosisTopTextLEDRIGHT"};
    this.plctag = this.plc + "." + this.data.OPCID;
    this.led = this.led1 = this.border = this.text = this.text1 = null;
    DiagnosisElement.call(this, { data: data });
  }
  TopTextLED.prototype = Object.create(DiagnosisElement.prototype);
  TopTextLED.prototype.constructor = TopTextLED;

  TopTextLED.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var ledId = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      //            var id1 = getElementGlobalID();
      //            var ledId1 = getElementGlobalID();
      //            var textId1 = getElementGlobalID();

      var body = (this.panel = $(
        "<div class='" +
          this.positionClass +
          "' id='" +
          id +
          "'>" +
          "<span class='messageCircle orange' id='" +
          ledId +
          "'></span>" +
          "<span id='" +
          textId +
          "'>" +
          this.data.Text +
          "</span>" +
          "</div>"
      ));

      //            var topled = $("<div class='" + this.positionClass + "' id='" + id1 + "'>" +
      //                    "<span class='messageCircle orange' id='" + ledId1 + "'></span>" +
      //                    "<span id='" + textId1 + "'>" + this.data.Text + "</span>" +
      //                    "</div>");
      body.appendTo(this.parent);
      //            console.log(this.parent)
      //            this.diagnosisWindow.topLed += topled;
      this.led = document.getElementById(ledId);
      this.text = document.getElementById(textId);
      //            this.led1 = document.getElementById(ledId1);
      //            this.text1 = document.getElementById(textId1);
      this.border = document.getElementById(borderId);
      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") {
            this.text.textContent = msg.value;
            //                    this.text1.textContent = msg.value;
          }
        }.bind(this),
        this
      );
    } catch (err) {
      console.log("TopTextLED init failed: " + err);
    }
  };

  TopTextLED.prototype.datachangeListener = function (msg) {
    try {
      var value = GetAsBoolean(msg.value);
      var fillColor = colorList[value ? this.data.OnLED : this.data.OffLED];
      //this.led.setAttribute("fill", fillColor);
      this.led.className = "messageCircle " + fillColor;
      //            this.led1.className = 'messageCircle ' + fillColor;
      //this.led.style.background = fillColor;
    } catch (err) {
      console.log("TopTextLED datachangeListener failed: " + err);
    }
  };
  emosWS.TopTextLED = TopTextLED;

  function DiagnosisSetpointRampBar(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LMRLeft,
        css: "DiagnosisBar parentsbox",
      },
      M: {
        parent: this.diagnosisWindow.divTypes.LMRMiddle,
        css: "DiagnosisBar parentsbox",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LMRRight,
        css: "DiagnosisBar parentsbox",
      },
    };
    this.min = 0;
    this.max = 100;
    this.ymin = 2; //15;
    this.percent0 = 80; //67;
    this.plctag = this.plc + "." + this.data.OPCID;
    this.plctagRamp = this.plc + "." + this.data.OPCRampID;
    this.visibleOPC = this.plc + "." + this.data.OPCRampVisibleID;
    this.opcvisible = true;
    this.parentDiv =
      this.numberValue =
      this.bar =
      this.lineValue =
      this.lineValue2 =
      this.lineValueR =
      this.lineValueR2 =
      this.text =
      this.number =
      this.numberR =
      this.unitText =
        null;
    this.unit = emosWS.getUnit();
    this.panel = null;
    this.init();
  }

  DiagnosisSetpointRampBar.prototype.getBarValue = function (numberValue) {
    if (numberValue < this.min) {
      numberValue = this.min;
    } else if (numberValue > this.max) {
      numberValue = this.max;
    }

    var p =
      this.ymin +
      ((100 - ((numberValue - this.min) / (this.max - this.min)) * 100) *
        this.percent0) /
        100 +
      "%";
    return p;
  };

  DiagnosisSetpointRampBar.prototype.getBarDegreeText = function (percent) {
    return (
      "- " +
      (this.min + ((this.max - this.min) * percent) / 100) +
      this.unitText
    );
  };

  DiagnosisSetpointRampBar.prototype.getUnitSymbol = function () {
    switch (this.unit) {
      case emosWS.unitID.Metric:
        return " " + this.data.UnitMetric;
      case emosWS.unitID.UnitImperial:
        return " " + this.data.UnitImperial;
      case emosWS.unitID.UnitLocale:
        return " " + this.data.UnitLocale;
      default:
        return "";
    }
  };

  DiagnosisSetpointRampBar.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var svgMainId = getElementGlobalID();
      var numberId = getElementGlobalID();
      var barId = getElementGlobalID();
      var textId = getElementGlobalID();
      var lineValueId = getElementGlobalID();
      var lineValueId2 = getElementGlobalID();
      var barText0Id = getElementGlobalID();
      var barText25Id = getElementGlobalID();
      var barText50Id = getElementGlobalID();
      var barText75Id = getElementGlobalID();
      var barText100Id = getElementGlobalID();
      var svgRampId = getElementGlobalID();
      var number2Id = getElementGlobalID();
      var bar2Id = getElementGlobalID();
      var line2ValueId = getElementGlobalID();
      var line2ValueId2 = getElementGlobalID();
      this.parentDiv = this.parent.getDiv(
        this.positionClass[this.data.Position].parent
      );
      var properties = this.positionClass[this.data.Position];
      this.unitText = this.getUnitSymbol();
      //var writeRect = writable ? "<rect width='20' height='20' x='180' style='fill:lightgrey;'/>" : "";
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisRampBarTextSVG' style='display: block;'>" +
          "<text id='" +
          textId +
          "' x='50%' y='17px' fill='black' text-anchor='middle' font-weight='bold'>" +
          this.data.Text +
          "</text>" +
          "</svg>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisRampBarSVG' id='" +
          svgRampId +
          "' style='margin-left: 20px'>" +
          //"<rect id='" + bar2Id + "' x='58%' y='" + ymin + "%' width='40%' height='" + percent0 + "%' style='fill:lightgrey;stroke-width:1;stroke:black' />" +
          "<rect class='DiagnosisRampBar' id='" +
          bar2Id +
          "' x='58%' y='" +
          this.ymin +
          "%' width='40%' height='" +
          this.percent0 +
          "%' />" +
          "<line id='" +
          line2ValueId +
          "' x1='58.5%' y1='15%' x2='97.5%' y2='15%' style='stroke-width:5;stroke:#95bfd8'/>" +
          //                    "<line id='" + line2ValueId2 + "' x1='58%' y1='15%' x2='98%' y2='15%' style='stroke-width:1;stroke:black'/>" +
          "<rect x='1px' width='50px' height='15' y='85%' style='fill:white;stroke-width:0.5;stroke:grey'/>" +
          "<text id='" +
          number2Id +
          "' x='30px' y='91%' text-anchor='middle' fill='orange'>" +
          this.numberValue +
          "</text>" +
          "</svg>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisRampBarSVG' id='" +
          svgMainId +
          "'>" +
          //"<text id='" + textId + "' x='50%' y='10%' fill='black' text-anchor='middle' font-weight='bold'>" + data.Text + "</text>" +
          //"<rect id='" + barId + "' x='1%' y='" + ymin + "%' width='40%' height='" + percent0 + "%' style='fill:lightgrey;stroke-width:1;stroke:black' />" +
          "<rect class='DiagnosisRampBar' id='" +
          barId +
          "' x='1%' y='" +
          this.ymin +
          "%' width='40%' height='" +
          this.percent0 +
          "%' />" +
          "<line id='" +
          lineValueId +
          "' x1='1.5%' y1='15%' x2='40.5%' y2='15%' style='stroke-width:5;stroke:#95bfd8'/>" +
          //                    "<line id='" + lineValueId2 + "' x1='1%' y1='15%' x2='41%' y2='15%' style='stroke-width:1;stroke:black'/>" +
          "<rect x='1px' width='50px' height='15' y='85%' style='fill:white;stroke-width:0.5;stroke:grey'/>" +
          "<text id='" +
          numberId +
          "' x='30px' y='91%' text-anchor='middle' fill='orange'>" +
          this.numberValue +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText0Id +
          "' x='40%' y='80.5%'>" +
          this.getBarDegreeText(0) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText25Id +
          "' x='40%' y='60.5%'>" +
          this.getBarDegreeText(25) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText50Id +
          "' x='40%' y='41.5%'>" +
          this.getBarDegreeText(50) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText75Id +
          "' x='40%' y='21.5%'>" +
          this.getBarDegreeText(75) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText100Id +
          "' x='40%' y='3.5%'>" +
          this.getBarDegreeText(100) +
          "</text>" +
          "</svg>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.numberR = document.getElementById(number2Id);
      this.text = document.getElementById(textId);
      this.bar = document.getElementById(barId);
      this.lineValue = document.getElementById(lineValueId);
      this.lineValue2 = document.getElementById(lineValueId2);
      this.lineValueR = document.getElementById(line2ValueId);
      this.lineValueR2 = document.getElementById(line2ValueId2);
      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.advise(
        this.plctagRamp,
        this.datachangeRampListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      emosWS.advise(
        this.visibleOPC,
        function (msg) {
          this.opcvisible = GetAsBoolean(msg.value);
          this.setVisibility();
        }.bind(this),
        "",
        emosWS.tagType.IO
      );
    } catch (err) {
      console.log("DiagnosisBar init failed: " + err);
    }
  };

  DiagnosisSetpointRampBar.prototype.setVisibility = function () {
    //        this.panel.get(0).style.display = this.opcvisible ? "block" : "none";
  };

  DiagnosisSetpointRampBar.prototype.datachangeListener = function (msg) {
    try {
      //            this.numberValue = GetAsInteger(msg.value);
      //            this.numberValue = msg.value;
      if (this.data.Precision) {
        this.numberValue = parseFloat(msg.value).toFixed(this.data.Precision);
      } else {
        this.numberValue = GetAsInteger(msg.value);
      }
      this.number.setAttribute("fill", "#6c6c6c");
      this.number.textContent = this.numberValue + this.getUnitSymbol();
      var lineValuePosition = this.getBarValue(this.numberValue);
      this.lineValue.setAttribute("y1", lineValuePosition);
      this.lineValue.setAttribute("y2", lineValuePosition);
      this.lineValue2.setAttribute("y1", lineValuePosition);
      this.lineValue2.setAttribute("y2", lineValuePosition);
    } catch (err) {
      console.log("DiagnosisSetpointRampBar datachangeListener failed: " + err);
    }
  };

  DiagnosisSetpointRampBar.prototype.datachangeRampListener = function (msg) {
    try {
      //            var numberValue = GetAsInteger(msg.value);
      var numberValue = msg.value;
      this.numberR.setAttribute("fill", "#6c6c6c");
      this.numberR.textContent = numberValue + this.getUnitSymbol();
      var lineValuePosition = this.getBarValue(numberValue);
      this.lineValueR.setAttribute("y1", lineValuePosition);
      this.lineValueR.setAttribute("y2", lineValuePosition);
      this.lineValueR2.setAttribute("y1", lineValuePosition);
      this.lineValueR2.setAttribute("y2", lineValuePosition);
    } catch (err) {
      console.log(
        "DiagnosisSetpointRampBar datachangeRampListener failed: " + err
      );
    }
  };
  emosWS.DiagnosisSetpointRampBar = DiagnosisSetpointRampBar;

  function DiagnosisSetpointBar(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LMRLeft,
        css: "DiagnosisBar parentsbox",
      },
      M: {
        parent: this.diagnosisWindow.divTypes.LMRMiddle,
        css: "DiagnosisBar parentsbox",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LMRRight,
        css: "DiagnosisBar parentsbox",
      },
    };
    this.min = 0;
    this.max = 100;
    this.ymin = 15;
    this.percent0 = 67;
    this.plctag = this.plc + "." + this.data.OPCID;
    this.parentDiv =
      this.numberValue =
      this.bar =
      this.lineValue =
      this.lineValue2 =
      this.text =
      this.number =
      this.unitText =
        null;
    this.unit = emosWS.getUnit();
    this.init();
  }

  DiagnosisSetpointBar.prototype.getBarValue = function () {
    if (this.numberValue < this.min) {
      this.numberValue = this.min;
    } else if (this.numberValue > this.max) {
      this.numberValue = this.max;
    }

    var p =
      this.ymin +
      ((100 - ((this.numberValue - this.min) / (this.max - this.min)) * 100) *
        this.percent0) /
        100 +
      "%";
    console.log("plctag=" + this.plctag + " / bar value % = " + p);
    return p;
  };

  DiagnosisSetpointBar.prototype.getBarDegreeText = function (percent) {
    return (
      "- " +
      (this.min + ((this.max - this.min) * percent) / 100) +
      this.unitText
    );
  };

  DiagnosisSetpointBar.prototype.getUnitSymbol = function () {
    switch (this.unit) {
      case emosWS.unitID.Metric:
        return " " + this.data.UnitMetric;
      case emosWS.unitID.UnitImperial:
        return " " + this.data.UnitImperial;
      case emosWS.unitID.UnitLocale:
        return " " + this.data.UnitLocale;
      default:
        return "";
    }
  };

  DiagnosisSetpointBar.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var numberId = getElementGlobalID();
      var barId = getElementGlobalID();
      var textId = getElementGlobalID();
      var lineValueId = getElementGlobalID();
      var lineValueId2 = getElementGlobalID();
      var barText0Id = getElementGlobalID();
      var barText25Id = getElementGlobalID();
      var barText50Id = getElementGlobalID();
      var barText75Id = getElementGlobalID();
      var barText100Id = getElementGlobalID();
      this.parentDiv = this.parent.getDiv(
        this.positionClass[this.data.Position].parent
      );
      var properties = this.positionClass[this.data.Position];
      this.unitText = this.getUnitSymbol();
      var body = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisBarSVG'>" +
          "<text id='" +
          textId +
          "' x='50%' y='10%' fill='black' text-anchor='middle' font-weight='bold'>" +
          this.data.Text +
          "</text>" +
          "<rect id='" +
          barId +
          "' x='40%' y='" +
          this.ymin +
          "%' width='20%' height='" +
          this.percent0 +
          "%' style='fill:white;stroke-width:1;stroke:black' />" +
          "<line id='" +
          lineValueId +
          "' x1='40.5%' y1='15%' x2='59.5%' y2='15%' style='stroke-width:5;stroke:yellow'/>" +
          "<line id='" +
          lineValueId2 +
          "' x1='40%' y1='15%' x2='60%' y2='15%' style='stroke-width:1;stroke:black'/>" +
          "<rect x='20%' width='60%' height='15' y='87%' style='fill:white;stroke-width:0.5;stroke:grey'/>" +
          "<text id='" +
          numberId +
          "' x='50%' y='92%' text-anchor='middle' fill='orange'>" +
          this.numberValue +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText0Id +
          "' x='60%' y='83.5%'>" +
          this.getBarDegreeText(0) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText25Id +
          "' x='60%' y='66.75%'>" +
          this.getBarDegreeText(25) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText50Id +
          "' x='60%' y='50%'>" +
          this.getBarDegreeText(50) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText75Id +
          "' x='60%' y='33.25%'>" +
          this.getBarDegreeText(75) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText100Id +
          "' x='60%' y='16.5%'>" +
          this.getBarDegreeText(100) +
          "</text>" +
          "</svg>" +
          "</div>"
      );
      //body.appendTo(properties.parent);
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.text = document.getElementById(textId);
      this.bar = document.getElementById(barId);
      this.lineValue = document.getElementById(lineValueId);
      this.lineValue2 = document.getElementById(lineValueId2);
      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
    } catch (err) {
      console.log("DiagnosisBar init failed: " + err);
    }
  };

  DiagnosisSetpointBar.prototype.datachangeListener = function (msg) {
    try {
      this.numberValue = GetAsInteger(msg.value);
      this.number.setAttribute("fill", "#6c6c6c");
      this.number.textContent = this.numberValue + this.getUnitSymbol();
      var lineValuePosition = this.getBarValue();
      this.lineValue.setAttribute("y1", lineValuePosition);
      this.lineValue.setAttribute("y2", lineValuePosition);
      this.lineValue2.setAttribute("y1", lineValuePosition);
      this.lineValue2.setAttribute("y2", lineValuePosition);
    } catch (err) {
      console.log("TopTextLED datachangeListener failed: " + err);
    }
  };

  emosWS.DiagnosisSetpointBar = DiagnosisSetpointBar;

  function DiagnosisBar(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LMRLeft,
        css: "DiagnosisBar parentsbox",
      },
      M: {
        parent: this.diagnosisWindow.divTypes.LMRMiddle,
        css: "DiagnosisBar parentsbox",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LMRRight,
        css: "DiagnosisBar parentsbox",
      },
    };
    this.min = 0;
    this.max = 100;
    this.percent0 = 67;
    this.plctag = this.plc + "." + this.data.OPCID;
    this.parentDiv =
      this.numberValue =
      this.bar =
      this.barValue =
      this.text =
      this.number =
      this.unitText =
        null;
    this.unit = emosWS.getUnit();

    this.init();
  }
  DiagnosisBar.prototype.getBarValue = function () {
    if (this.numberValue < this.min) {
      this.numberValue = this.min;
    } else if (this.numberValue > this.max) {
      this.numberValue = max;
    }

    var p =
      ((100 - ((this.numberValue - this.min) / (this.max - this.min)) * 100) *
        this.percent0) /
        100 +
      "%";
    //console.log("plctag=" + this.plctag + " / bar value % = " + p);
    return p;
  };

  DiagnosisBar.prototype.getBarDegreeText = function (percent) {
    return (
      "- " +
      (this.min + ((this.max - this.min) * percent) / 100) +
      this.unitText
    );
  };

  DiagnosisBar.prototype.getUnitSymbol = function () {
    switch (this.unit) {
      case emosWS.unitID.Metric:
        return " " + this.data.UnitMetric;
      case emosWS.unitID.UnitImperial:
        return " " + this.data.UnitImperial;
      case emosWS.unitID.UnitLocale:
        return " " + this.data.UnitLocale;
      default:
        return "";
    }
  };

  DiagnosisBar.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var numberId = getElementGlobalID();
      var barId = getElementGlobalID();
      var textId = getElementGlobalID();
      var barValueId = getElementGlobalID();
      var barText0Id = getElementGlobalID();
      var barText25Id = getElementGlobalID();
      var barText50Id = getElementGlobalID();
      var barText75Id = getElementGlobalID();
      var barText100Id = getElementGlobalID();
      this.parentDiv = this.parent.getDiv(
        this.positionClass[this.data.Position].parent
      );
      var properties = this.positionClass[this.data.Position];
      this.unitText = this.getUnitSymbol();
      var body = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisBarSVG'>" +
          "<text id='" +
          textId +
          "' x='50%' y='10%' fill='black' text-anchor='middle' font-weight='bold'>" +
          this.data.Text +
          "</text>" +
          "<rect id='" +
          barId +
          "' x='40%' y='15%' width='20%' height='67%' style='fill:#3b4654' />" +
          "<rect id='" +
          barValueId +
          "' x='40%' y='15%' width='20%' height='35%' style='fill:#d9dee2'/>" +
          "<rect x='20%' width='60%' height='15' y='87%' style='fill:white;stroke-width:0.5;stroke:grey'/>" +
          "<text id='" +
          numberId +
          "' x='50%' y='92%' text-anchor='middle' fill='orange'>" +
          this.numberValue +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText0Id +
          "' x='60%' y='83.5%'>" +
          this.getBarDegreeText(0) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText25Id +
          "' x='60%' y='66.75%'>" +
          this.getBarDegreeText(25) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText50Id +
          "' x='60%' y='50%'>" +
          this.getBarDegreeText(50) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText75Id +
          "' x='60%' y='33.25%'>" +
          this.getBarDegreeText(75) +
          "</text>" +
          "<text class='DiagnosisBarDegreeText' id='" +
          barText100Id +
          "' x='60%' y='16.5%'>" +
          this.getBarDegreeText(100) +
          "</text>" +
          "</svg>" +
          "</div>"
      );
      //body.appendTo(properties.parent);
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.text = document.getElementById(textId);
      this.bar = document.getElementById(barId);
      this.barValue = document.getElementById(barValueId);
      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
    } catch (err) {
      console.log("DiagnosisBar init failed: " + err);
    }
  };

  DiagnosisBar.prototype.datachangeListener = function (msg) {
    try {
      //            this.numberValue = GetAsInteger(msg.value);
      //            this.numberValue = msg.value;
      if (this.data.Precision) {
        this.numberValue = parseFloat(msg.value).toFixed(this.data.Precision);
      } else {
        this.numberValue = GetAsInteger(msg.value);
      }
      this.number.setAttribute("fill", "#6c6c6c");
      this.number.textContent = this.numberValue + this.getUnitSymbol();
      this.barValue.setAttribute("height", this.getBarValue());
    } catch (err) {
      console.log("TopTextLED datachangeListener failed: " + err);
    }
  };

  emosWS.DiagnosisBar = DiagnosisBar;

  function DiagnosisSpace(parent, data) {
    this.data = data;
    this.positionClass = {
      L: { parent: parent.LRLeft },
      R: { parent: parent.LRRight },
      Long: { parent: parent.LRLong },
    };
    this.init();
  }

  DiagnosisSpace.prototype.init = function () {
    try {
      var properties = this.positionClass[this.data.Position];
      var body = $("<div class='DiagnosisSpace'></div>");
      body.appendTo(properties.parent);
    } catch (err) {
      console.log("DiagnosisSpace init failed: " + err);
    }
  };
  emosWS.DiagnosisSpace = DiagnosisSpace;

  var valueTypes = {
    Integer: 0,
    Float: 1,
    TimeInSecond: 2,
    TimeInMinute: 3,
    String: 4,
  };

  /* Provides dialogs to modify a given value in Diagnosis window
   *
   * @type Function|_L464.Anonym$35
   */
  var DiagnosisForm = (function () {
    var myDialog;
    var params;
    var numberValueHTML,
      dateHTML,
      unitHTML,
      minHTML,
      midHTML,
      maxHTML,
      plctagHTML,
      textHTML,
      dayHTML,
      hourHTML,
      minuteHTML,
      secondHTML,
      numberPicker,
      timePicker,
      dayPicker,
      hourPicker,
      minutePicker,
      secondPicker,
      stringPicker,
      value;
    //var dialogTypes = {Integer: 0, Real: 1, TimeInSecond: 2, TimeInMinute: 3};
    window.addEventListener("load", initialize, false);
    function initialize() {
      appendFormNumber();
    }

    function changeValue() {
      switch (params.type) {
        case valueTypes.TimeInSecond:
        case valueTypes.TimeInMinute:
          var day = dayHTML.val();
          var hour = hourHTML.val();
          var minute = minuteHTML.val();
          var second = secondHTML.val();
          value = params.value.encode({
            day: day,
            hour: hour,
            minute: minute,
            second: second,
          });
          break;

        case valueTypes.String:
          value = stringPicker.val();
          break;

        default:
          value = numberValueHTML.val();
          break;
      }

      emosWS.poke(params.plctag, value);
      myDialog.dialog("close");

      if (typeof params.callback !== "undefined") {
        params.callback(value);
      }
    }

    function getDialog() {
      return myDialog;
    }

    function appendFormNumber() {
      try {
        var formNumberId = getElementGlobalID();
        var plctagId = getElementGlobalID();
        var textId = getElementGlobalID();
        var minId = getElementGlobalID();
        var midId = getElementGlobalID();
        var maxId = getElementGlobalID();
        var numberId = getElementGlobalID();
        var unitId = getElementGlobalID();
        var numberPickerId = getElementGlobalID();

        var timePickerId = getElementGlobalID();
        var dayPickerId = getElementGlobalID();
        var hourPickerId = getElementGlobalID();
        var minutePickerId = getElementGlobalID();
        var secondPickerId = getElementGlobalID();
        var dayId = getElementGlobalID();
        var hourId = getElementGlobalID();
        var minuteId = getElementGlobalID();
        var secondId = getElementGlobalID();
        var stringPickerId = getElementGlobalID();

        var timePickerCode = //zeiteingaben
          "<div class='vertical controls' id='" +
          timePickerId +
          "'>" +
          "   <span id='" +
          dayPickerId +
          "'><input id='" +
          dayId +
          "'>d</span>" +
          "   <span id='" +
          hourPickerId +
          "'><input id='" +
          hourId +
          "'>h</span>" +
          "   <span id='" +
          minutePickerId +
          "'><input id='" +
          minuteId +
          "'>m</span>" +
          "   <span id='" +
          secondPickerId +
          "'><input id='" +
          secondId +
          "'>s</span>" +
          "</div>";

        var stringPickerCode =
          "<div class='DiagnosisStringEdit'><textarea rows='4' id='" +
          stringPickerId +
          "'</textarea></div>";

        var $formNumber = $(
          "<div id='" +
            formNumberId +
            "'>" +
            "   <div class='DiagnosisExtraContent'>" +
            "       <p id='" +
            plctagId +
            "'>plc.tag</p>" +
            "       <p id='" +
            textId +
            "'>text</p>" +
            "   <table style='width:100%; text-align:center'><tr>" +
            "       <td id='" +
            minId +
            "'>Min</td>" +
            "       <td>..............</td>" +
            "       <td id='" +
            midId +
            "'>.</td>" +
            "       <td>..............</td>" +
            "       <td id='" +
            maxId +
            "'>Max</td>" +
            "   <tr></table>" +
            "   </div>" +
            "   <form>" +
            "       <div class='DiagnosisDatePickerContainer'>" +
            "           <div class='DiagnosisDatePickerCenter'>" +
            "               <span id='" +
            numberPickerId +
            "'>" +
            "                   <input name='numberValue' id='" +
            numberId +
            "' value='0'>" +
            "                   <label id='" +
            unitId +
            "'>unit</label>" +
            "               </span>" +
            timePickerCode +
            "           </div>" +
            "       </div>" +
            stringPickerCode +
            "       <input type='submit' tabindex='-1' style='position:absolute; top:-1000px'>" +
            "   </form>" +
            "</div>"
        );
        $("body").append($formNumber);
        myDialog = $("#" + formNumberId).dialog({
          modal: true,
          autoOpen: false,
          //height: 250,
          width: 350,
          title: "Input dialog",
          buttons: {
            Cancel: function () {
              myDialog.dialog("close");
            },
            OK: changeValue,
          },
          close: function () {
            formNumber[0].reset();
          },
        });
        numberValueHTML = $("#" + numberId).spinner();
        unitHTML = $("#" + unitId);
        minHTML = $("#" + minId);
        midHTML = $("#" + midId);
        maxHTML = $("#" + maxId);
        plctagHTML = $("#" + plctagId);
        textHTML = $("#" + textId);
        dayHTML = $("#" + dayId).spinner({ min: 0, step: 1, start: 1 });
        hourHTML = $("#" + hourId).spinner({
          min: 0,
          max: 23,
          step: 1,
          start: 1,
        });
        minuteHTML = $("#" + minuteId).spinner({
          min: 0,
          max: 59,
          step: 1,
          start: 0,
        });
        secondHTML = $("#" + secondId).spinner({
          min: 0,
          max: 59,
          step: 1,
          start: 0,
        });
        timePicker = $("#" + timePickerId);
        dayPicker = $("#" + dayPickerId);
        hourPicker = $("#" + hourPickerId);
        minutePicker = $("#" + minutePickerId);
        secondPicker = $("#" + secondPickerId);
        numberPicker = $("#" + numberPickerId);
        stringPicker = $("#" + stringPickerId);

        var formNumber = myDialog.find("form").on("submit", function (event) {
          event.preventDefault();
          changeValue();
        });
      } catch (err) {
        console.log("appendFormNumber failed: " + err);
      }
    }

    function open(parameters) {
      params = parameters;
      hidePickers();
      fillValue();

      switch (params.type) {
        case valueTypes.TimeInSecond:
          showHourPicker();
          showMinutePicker();
          showSecondPicker();
          midHTML.text("s");
          myDialog.dialog("open");
          break;

        case valueTypes.TimeInMinute:
          showDayPicker();
          showHourPicker();
          showMinutePicker();
          midHTML.text("m");
          myDialog.dialog("open");
          break;

        case valueTypes.String:
          showStringPicker();
          myDialog.dialog("open");
          break;

        default:
          showNumberPicker();
          myDialog.dialog("open");
          break;
      }
    }

    function fillValue() {
      plctagHTML.text(params.plctag);
      textHTML.text(params.text);
      minHTML.text("[  " + params.min);
      maxHTML.text(params.max + "  ]");
    }

    function showNumberPicker() {
      numberValueHTML.spinner("option", "min", params.min);
      numberValueHTML.spinner("option", "max", params.max);
      numberValueHTML.spinner(
        "option",
        "step",
        Math.pow(10, -1 * (params.precision || 0))
      );

      numberValueHTML.val(params.value);

      unitHTML.text(params.unit);
      numberPicker.show();
    }

    function showStringPicker() {
      stringPicker.val(params.value);
      stringPicker.show();
    }

    function showDayPicker() {
      dayPicker.show();
      var time = params.value.data;
      dayHTML.val(time.day);
    }

    function showHourPicker() {
      hourPicker.show();
      var time = params.value.data;
      hourHTML.val(time.hour);
    }

    function showMinutePicker() {
      minutePicker.show();
      var time = params.value.data;
      minuteHTML.val(time.minute);
    }

    function showSecondPicker() {
      secondPicker.show();
      var time = params.value.data;
      secondHTML.val(time.second);
    }

    function hidePickers() {
      numberPicker.hide();
      //timePicker.hide();
      dayPicker.hide();
      hourPicker.hide();
      minutePicker.hide();
      secondPicker.hide();
      stringPicker.hide();
      midHTML.text(".");
    }

    return {
      open: open,
      getFormNumberDialog: getDialog,
    };
  })();

  var DiagnosisDateForm = (function () {
    var myDialog;
    var params, dateData;
    var formId = getElementGlobalID();
    var dateId = getElementGlobalID();
    var plctagId = getElementGlobalID();

    var dateHTML,
      plctagHTML,
      dayHTML,
      hourHTML,
      minuteHTML,
      secondHTML,
      msHTML,
      textHTML,
      timePicker,
      dayPicker,
      msPicker;
    window.addEventListener("load", initialize, false);
    function initialize() {
      appendFormDate();
    }

    function changeValue() {
      console.log("Value is changed");
      var value = dateHTML.datepicker("getDate");
      var year = value.getFullYear();
      var month = value.getMonth() + 1;
      var day = value.getDate();
      var days = dayHTML.val();
      var hour = hourHTML.val();
      var minute = minuteHTML.val();
      var second = secondHTML.val();
      var ms = msHTML.val();
      var writeValue = dateData.encode({
        year: year,
        month: month,
        day: day,
        days: days,
        hour: hour,
        minute: minute,
        second: second,
        ms: ms,
      });
      emosWS.poke(params.plctag, writeValue);
      myDialog.dialog("close");
      if (typeof params.callback !== "undefined") {
        params.callback(dateData);
      }
    }

    function getDialog() {
      return myDialog;
    }

    function appendFormDate() {
      try {
        var dayPickerId = getElementGlobalID();
        var dayId = getElementGlobalID();
        var hourId = getElementGlobalID();
        var minuteId = getElementGlobalID();
        var secondId = getElementGlobalID();
        var msId = getElementGlobalID();
        var msPickerId = getElementGlobalID();
        var timePickerId = getElementGlobalID();
        var textId = getElementGlobalID();

        var datePickerCode = "<div id='" + dateId + "'></div>";

        var timePickerCode =
          "<div class='vertical controls' id='" +
          timePickerId +
          "'>" +
          "   <span id='" +
          dayPickerId +
          "'><input id='" +
          dayId +
          "'>d</span>" +
          "   <input id='" +
          hourId +
          "'>h" +
          "   <input id='" +
          minuteId +
          "'>m" +
          "   <input id='" +
          secondId +
          "'>s" +
          "   <span id='" +
          msPickerId +
          "'><input style='width: 2em' id='" +
          msId +
          "'>ms</span>" +
          "</div>";

        var $formDate = $(
          "<div id='" +
            formId +
            "'>" +
            "   <div class='DiagnosisExtraContent'>" +
            "       <p id='" +
            plctagId +
            "'>plc.tag</p>" +
            "       <p id='" +
            textId +
            "'>Adjust Date</p>" +
            "   </div>" +
            "   <form>" +
            "<div class='DiagnosisDatePickerContainer'>" +
            "   <div class='DiagnosisDatePickerCenter'>" +
            datePickerCode +
            timePickerCode +
            "   </div>" +
            "</div>" +
            "           <input type='submit' tabindex='-1' style='position:absolute; top:-1000px'>" +
            "   </form>" +
            "</div>"
        );

        $("body").append($formDate);

        myDialog = $("#" + formId).dialog({
          modal: true,
          autoOpen: false,
          width: 400,
          title: "Input dialog",
          buttons: {
            Cancel: function () {
              myDialog.dialog("close");
            },
            OK: changeValue,
          },
          close: function () {
            //formNumber[ 0 ].reset();
          },
        });

        dateHTML = $("#" + dateId).datepicker({
          changeMonth: true,
          changeYear: true,
        });
        dateHTML.datepicker("option", "firstDay", 1);
        dateHTML.datepicker("option", "yearRange", "0:3000");
        dayPicker = $("#" + dayPickerId);
        dayHTML = $("#" + dayId).spinner({ min: 0, step: 1, start: 1 });
        hourHTML = $("#" + hourId).spinner({
          min: 0,
          max: 23,
          step: 1,
          start: 1,
        });
        minuteHTML = $("#" + minuteId).spinner({
          min: 0,
          max: 59,
          step: 1,
          start: 0,
        });
        secondHTML = $("#" + secondId).spinner({
          min: 0,
          max: 59,
          step: 1,
          start: 0,
        });
        msHTML = $("#" + msId).spinner({ min: 0, max: 999, step: 1, start: 0 });
        msPicker = $("#" + msPickerId);
        timePicker = $("#" + timePickerId);
        plctagHTML = $("#" + plctagId);
        textHTML = $("#" + textId);
        var formDate = myDialog.find("form").on("submit", function (event) {
          event.preventDefault();
          changeValue();
        });
        /*var divs = dialog.find("div");
                 appendHead(divs[0]);
                 appendBody(divs[1]);*/
      } catch (err) {
        console.log("appendFormNumber failed: " + err);
      }
    }

    function open(parameters) {
      params = parameters;
      dateData = params.value;
      plctagHTML.text(params.plctag);
      hidePickers();

      switch (dateData.constructor) {
        case DiagnosisTimerSiemensDate:
          showDayPicker();
          textHTML.text("Adjust date (Simens DATE):");
          myDialog.dialog("open");
          break;

        case DiagnosisTimerSiemensTimeOfDate:
          textHTML.text("Adjust time (Simens TIME_OF_DAY):");
          showTimePicker();
          myDialog.dialog("open");
          break;

        case DiagnosisTimerSiemensTime:
          textHTML.text("Adjust time (Simens TIME):");
          showDay();
          showTimePicker();
          showMS();
          myDialog.dialog("open");
          break;

        case DiagnosisTimerSiemensS5Time:
          textHTML.text("Adjust time (Simens S5TIME):");
          showTimePicker();
          showMS();
          myDialog.dialog("open");
          break;

        case DiagnosisTimerSiemensDateAndTime:
          textHTML.text("Adjust date and time (Simens DATE/HND_TIME):");
          showDayPicker();
          showTimePicker();
          myDialog.dialog("open");
          break;

        default:
          break;
      }
    }

    function hidePickers() {
      dateHTML.hide();
      dayPicker.hide();
      timePicker.hide();
      msPicker.hide();
    }

    function showDayPicker() {
      dateHTML.show();
      var date = dateData.data;
      var targetDate = new Date(date.year, date.month - 1, date.day);
      dateHTML.datepicker("setDate", targetDate);
    }

    function showTimePicker() {
      timePicker.show();
      var time = dateData.data;
      hourHTML.val(time.hour);
      minuteHTML.val(time.minute);
      secondHTML.val(time.second);
    }

    function showDay() {
      dayPicker.show();
      var time = dateData.data;
      dayHTML.val(time.day);
    }

    function showMS() {
      msPicker.show();
      var time = dateData.data;
      msHTML.val(time.ms);
    }

    return {
      open: open,
      getDialog: getDialog,
    };
  })();

  function DiagnosisTextTimer(
    parent,
    data,
    plc,
    type,
    writable,
    diagnosisWindow,
    myKey
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.type = type;
    this.writable = writable;
    this.myKey = myKey;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextTimer parentsbox",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextTimer parentsbox",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextTimer parentsbox",
        BorderWidth: "97.5%",
        WriteRectWidth: "25%",
        RectX: "47%",
        WriteRectX: "72.5%",
        TextX: "5",
        TextY: "15",
        Number2X: "97%",
        Number2Y: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.border =
      this.text =
      this.number =
      this.writeRect2 =
      this.numberValue =
      this.timerValue =
        null;
    this.numberColor = this.writable ? "#76a0b5" : "black";
    this.myMobiscroll = null;
    if (this.type === timerTypes.Second) {
      this.plcBase = this.data.Base || "s";
      this.visuBase = this.data.VisuBase || "s";
    } else {
      this.plcBase = this.visuBase = null;
    }
    DiagnosisElement.call(this, { data: data, writable: writable });
  }
  DiagnosisTextTimer.prototype = Object.create(DiagnosisElement.prototype);
  DiagnosisTextTimer.prototype.constructor = DiagnosisTextTimer;

  DiagnosisTextTimer.prototype.setTimerValue = function () {
    switch (this.type) {
      case timerTypes.Second:
        //this.timerValue = new DiagnosisTimerSecond();
        this.timerValue = new DiagnosisTimerSecond(
          0,
          this.plcBase,
          this.visuBase
        );
        break;

      case timerTypes.Minute:
        this.timerValue = new DiagnosisTimerMinute();
        break;

      case timerTypes.SiemensDate:
        this.timerValue = new DiagnosisTimerSiemensDate();
        break;

      case timerTypes.SiemensTimeOfDay:
        this.timerValue = new DiagnosisTimerSiemensTimeOfDate();
        break;

      case timerTypes.SiemensTime:
        this.timerValue = new DiagnosisTimerSiemensTime();
        break;

      case timerTypes.SiemensS5Time:
        this.timerValue = new DiagnosisTimerSiemensS5Time();
        break;

      case timerTypes.SiemensDateAndTime:
        this.timerValue = new DiagnosisTimerSiemensDateAndTime();
        break;

      default:
        this.timerValue = new DiagnosisTimer();
        break;
    }
  };

  DiagnosisTextTimer.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var numberId = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var writeRectId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      var hoursId = getElementGlobalID();
      var minutesId = getElementGlobalID();
      var secondsId = getElementGlobalID();
      var cancelbuttonId = getElementGlobalID();
      var savebuttonId = getElementGlobalID();

      this.setTimerValue();

      //var writeRect = writable ? "<rect width='20' height='20' x='180' style='fill:lightgrey;'/>" : "";
      //            var body = this.panel = $(
      //                    "<div class='" + properties.css + "' id='" + id + "'>" +
      //                    "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisTextDoubleSVG'>" +
      //                    "<rect class='DiagnosisNumberLRRectBorderSVG' width='" + properties.BorderWidth + "' height='20' id='" + borderId + "'/>" +
      //                    "<rect class='DiagnosisNumberLRRectwriteRectSVG' width='" + properties.WriteRectWidth + "' height='20' x='" + properties.WriteRectX + "' id='" + writeRectId + "'/>" +
      //                    "<text class='DiagnosisNumberLRTextTextSVG' x='" + properties.TextX + "' y='" + properties.TextY + "' id='" + textId + "'>" + this.data.Text + "</text>" +
      //                    "<text class='DiagnosisNumberLRTextNumberSVG' x='" + properties.Number2X + "' y='" + properties.Number2Y + "' text-anchor='end' id='" + numberId + "'>" + this.numberValue + "</text>" +
      //                    "</svg>" +
      //                    "</div>");

      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<span class='DiagnosisNumberLRTextTextSVG' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</span><span id='" +
          savebuttonId +
          "' class='savemebutton emosbutton'></span><span id='" +
          cancelbuttonId +
          "' class='cancelbutton emosbutton'></span><span id='" +
          writeRectId +
          "' class='writebutton emosbutton'></span><br class='cl'>" +
          "<span id='" +
          numberId +
          "' class='pickertime myPicker'><span class='pickertime hours orange' id='" +
          hoursId +
          "'>" +
          this.hoursValue +
          "</span><span class='doppelpunkt'>:</span><span class='pickertime minutes orange' id='" +
          minutesId +
          "'>" +
          this.minutesValue +
          "</span><span class='doppelpunkt'>:</span><span class='pickertime seconds orange' id='" +
          secondsId +
          "'>" +
          this.secondsValue +
          "</span></span></div>" +
          "</div>"
      ));
      body[0].myData = this.data;
      body[0].myKey = this.myKey;
      body[0].myPlc = this.plctag;
      body[0].myType = this.type;
      $(this.parentDiv)[0].myData = this.data;

      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.writeRect2 = document.getElementById(writeRectId);
      this.cancelbutton = document.getElementById(cancelbuttonId);
      this.savebutton = document.getElementById(savebuttonId);
      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      //            if (this.writable) {
      //                this.writeRect.style.cursor = "pointer";
      //                this.number.setAttribute("pointer-events", "none");
      //                this.writeRect.addEventListener("click", this.onClick.bind(this));
      //            }
      this.getWritable(this);
    } catch (err) {
      console.log("DiagnosisTextTimer init failed: " + err);
    }
  };
  DiagnosisTextTimer.prototype.getWritable = function (self) {
    if (self.writable) {
      self.writeRect2.style.cursor = "pointer";
      self.writeRect2.style.display = "block";
      //this.number2.setAttribute("pointer-events", "none");
      self.writeRect2.addEventListener(
        "click",
        DiagnosisTextTimer.prototype.onClick.bind(self)
      );
      self.cancelbutton.addEventListener(
        "click",
        DiagnosisTextTimer.prototype.onButtonCancel.bind(self)
      );
      self.savebutton.addEventListener(
        "click",
        DiagnosisTextTimer.prototype.onButtonSave.bind(self)
      );
    }
  };
  DiagnosisTextTimer.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.writeRect2.style.cursor = "pointer";
      this.writeRect2.style.pointerEvents = "auto";
      this.writeRect2.style.display = "block";
      this.number.style.color = this.numberColor = "#76a0b5";
    } else {
      this.writeRect2.style.cursor = "auto";
      this.writeRect2.style.pointerEvents = "none";
      this.number.style.color = this.numberColor = "black";
      this.writeRect2.style.display = "none";
    }
  };
  DiagnosisTextTimer.prototype.onButtonSave = function (myObj) {
    var gesSeconds;
    var self;
    var selfMobi;
    var myPlc;
    if (myObj.length) {
      self = myObj;
      self.type = myObj[0].myType;
      selfMobi = myObj.find(".myPicker");
      myPlc = myObj[0].myPlc;
      self.writeRect2 = document.getElementById(
        self.find(".writebutton").attr("id")
      );
      self.cancelbutton = document.getElementById(
        self.find(".cancelbutton").attr("id")
      );
      self.savebutton = document.getElementById(
        self.find(".savemebutton").attr("id")
      );
    } else {
      selfMobi = this.myMobiscroll;
      myPlc = this.plctag;
      self = this;
    }
    if (self.type === 3) {
      var year = selfMobi.mobiscroll("getVal", true).getFullYear();
      var month = selfMobi.mobiscroll("getVal", true).getMonth() + 1;
      var day = selfMobi.mobiscroll("getVal", true).getDate();
      gesSeconds = year + "-" + month + "-" + day;
    } else if (self.type === 1) {
      var strg = selfMobi.mobiscroll("getVal", true).split(" ");
      gesSeconds = Number(strg[0] * 60) + Number(strg[1]);
    } else if (self.type === 4) {
      var hours = selfMobi.mobiscroll("getVal", true).getHours();
      var minutes = selfMobi.mobiscroll("getVal", true).getMinutes();
      var seconds = selfMobi.mobiscroll("getVal", true).getSeconds();
      seconds = seconds.toFixed(1);
      gesSeconds = hours + ":" + minutes + ":" + seconds;
    } else if (self.type === 5) {
      var strg = selfMobi.mobiscroll("getVal", true).split(" ");
      gesSeconds =
        strg[0] +
        "D" +
        strg[1] +
        "H" +
        strg[2] +
        "M" +
        strg[3] +
        "S" +
        strg[4] +
        "MS";
    } else if (self.type === 6) {
      var strg = selfMobi.mobiscroll("getVal", true).split(" ");
      gesSeconds =
        strg[0] + "H" + strg[1] + "M" + strg[2] + "S" + strg[3] + "MS";
    } else if (self.type === 7) {
      var year = selfMobi.mobiscroll("getVal", true).getFullYear();
      var month = selfMobi.mobiscroll("getVal", true).getMonth() + 1;
      var day = selfMobi.mobiscroll("getVal", true).getDate();
      var hours = selfMobi.mobiscroll("getVal", true).getHours();
      var minutes = selfMobi.mobiscroll("getVal", true).getMinutes();
      var seconds = selfMobi.mobiscroll("getVal", true).getSeconds();
      seconds = seconds.toFixed(1);
      gesSeconds =
        year +
        "-" +
        month +
        "-" +
        day +
        "-" +
        hours +
        ":" +
        minutes +
        ":" +
        seconds;
    } else if (this.visuBase === "s") {
      /*var hours = selfMobi.mobiscroll('getVal', true).getHours();
             var minutes = selfMobi.mobiscroll('getVal', true).getMinutes();
             var seconds = selfMobi.mobiscroll('getVal', true).getSeconds();
             gesSeconds = (hours) * 60 * 60 + (minutes) * 60 + (seconds);*/

      //encode second
      gesSeconds = this.timerValue.encode({
        hour: selfMobi.mobiscroll("getVal", true).getHours(),
        minute: selfMobi.mobiscroll("getVal", true).getMinutes(),
        second: selfMobi.mobiscroll("getVal", true).getSeconds(),
      });
    } else {
      //encode mili-second
      gesSeconds = this.timerValue.encode({
        minute: selfMobi.mobiscroll("getVal", true).getHours(),
        second: selfMobi.mobiscroll("getVal", true).getMinutes(),
        msecond: selfMobi.mobiscroll("getVal", true).getSeconds(),
      });
    }

    emosWS.poke(myPlc, gesSeconds);
    selfMobi.mobiscroll("destroy");
    self.writeRect2.style.display = "block";
    self.cancelbutton.style.display = "none";
    self.savebutton.style.display = "none";
  };
  DiagnosisTextTimer.prototype.onButtonCancel = function () {
    this.myMobiscroll.mobiscroll("destroy");
    this.writeRect2.style.display = "block";
    this.cancelbutton.style.display = "none";
    this.savebutton.style.display = "none";
  };
  DiagnosisTextTimer.prototype.onClick = function (e) {
    var myVal;
    var myDay;
    var myHour;
    var myMinutes;
    var mySeconds;
    var myMilSec;
    var myMin;
    var myMax;
    var myWheel = "HHiiss";
    console.log(this.type);
    switch (this.type) {
      case timerTypes.Second:
        //DiagnosisForm.open({value: this.timerValue, plctag: this.plctag, type: valueTypes.TimeInSecond, text: this.text.textContent, min: this.data.IntTimeMin, max: this.data.IntTimeMax});
        myVal = this.timerValue;
        if (this.visuBase === "s") {
          myHour = this.timerValue.data.hour;
          myMinutes = this.timerValue.data.minute;
          mySeconds = this.timerValue.data.second;
        } else {
          //ms
          myHour = this.timerValue.data.minute;
          myMinutes = this.timerValue.data.second;
          mySeconds = this.timerValue.data.msecond;
        }
        myMin = this.data.IntTimeMin;
        myMax = this.data.IntTimeMax;
        break;

      case timerTypes.SiemensDate:
      case timerTypes.SiemensTimeOfDay:
      case timerTypes.SiemensDateAndTime:
      case timerTypes.SiemensS5Time:
      case timerTypes.SiemensTime:
        myVal = this.timerValue;
        myDay = this.timerValue.data.day;
        myHour = this.timerValue.data.hour;
        myMinutes = this.timerValue.data.minute;
        mySeconds = this.timerValue.data.second;
        myMilSec = this.timerValue.data.ms;
        myMin = this.data.IntTimeMin;
        myMax = this.data.IntTimeMax;
        //DiagnosisDateForm.open({value: this.timerValue, plctag: this.plctag});
        break;
      case timerTypes.Minute:
        console.log(this.timerValue);
        myVal = this.timerValue;
        myHour = this.timerValue.data.hour;
        myMinutes = this.timerValue.data.minute;
        myMin = this.data.IntTimeMin;
        myMax = this.data.IntTimeMax;
        break;
      default:
        console.log("default");
        //                DiagnosisForm.open({value: this.numberValue, unit: "",
        //                    min: this.data.IntTimeMin, max: this.data.IntTimeMax,
        //                    plctag: this.plctag, text: this.text.textContent
        //                });
        break;
    }
    self = e.target;
    if (
      $("#" + $(this)[0].id)
        .siblings()
        .children(".dw-inline").length
    ) {
      $("#" + $(this)[0].id)
        .siblings()
        .animate({ height: 45 + "px" });
      setTimeout(function () {
        $("#" + $(this)[0].id)
          .siblings()
          .children("myTime")
          .mobiscroll("destroy");
      }, 400);
    }
    var myTop = $(self).position().top;
    var myScrollTop = $(self).closest(".dPage").scrollTop();
    this.writeRect2.style.display = "none";
    this.cancelbutton.style.display = "block";
    this.savebutton.style.display = "block";
    $(self)
      .closest(".dPage")
      .animate({ scrollTop: myTop + myScrollTop - 21 });

    //var gesTime = (myHour * 3600) + (myMinutes * 60) + (mySeconds);
    var myTime = [];
    myTime.push(myHour);
    myTime.push(myMinutes);
    myTime.push(mySeconds);

    var maxH = Math.floor(myMax / 3600) > 0 ? Math.floor(myMax / 3600) : "00";
    maxH = maxH >= 24 ? 23 : maxH;
    var maxM =
      (myMax - maxH * 3600) / 60 > 0
        ? Math.floor((myMax - maxH * 3600) / 60)
        : 0;
    maxM = maxM === 60 ? 59 : maxM;
    var maxS = myMax - maxH * 3600 - maxM * 60;
    maxS = maxS === 60 ? 59 : maxS;
    var maxTime = maxH + ":" + maxM + ":" + maxS;
    //        if(myMax < 3600){
    //            myWheel = 'iiss';
    //        } else if (myMax < 60) {
    //            myWheel = 'ss';
    //        };
    var myDate = new Date(
      myVal.data.year,
      myVal.data.month - 1,
      myVal.data.day,
      myVal.data.hour,
      myVal.data.minute,
      myVal.data.second
    );
    if (this.type === 3) {
      //            var myTime = [];
      //            myTime.push(this.timerValue.year);
      //            myTime.push(this.timerValue.month);
      //            myTime.push(this.timerValue.day);
      var mytmpMonth = this.timerValue.data.month - 1;
      myTime = new Date(
        this.timerValue.data.year,
        mytmpMonth,
        this.timerValue.data.day
      );
      this.myMobiscroll = $("#" + this.number.id)
        .mobiscroll()
        .date({
          theme: "wp",
          mode: "mixed",
          display: "inline",
          lang: "de",
          scrollLock: false,
          dateOrder: "ddmmyy",
          dateFormat: "dd/mm/yy",
          minDate: myTime,
          maxDate: new Date(2030, 11, 31),
          showLabel: false,
        })
        .mobiscroll("setValue", myTime);
    } else if (this.type === 5) {
      myTime = [];
      myTime.push(myDay);
      myTime.push(myHour);
      myTime.push(myMinutes);
      myTime.push(mySeconds);
      myTime.push(myMilSec);
      this.myMobiscroll = $("#" + this.number.id)
        .mobiscroll()
        .scroller({
          theme: "wp",
          mode: "mixed",
          display: "inline",
          lang: "de",
          scrollLock: false,
          cssClass: "longtype",
          wheels: [
            [
              {
                label: "day",
                keys: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                ],
                values: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                ],
              },
              {
                label: "hrs",
                keys: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23,
                ],
                values: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23,
                ],
              },
              {
                label: "min",
                keys: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
                values: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
              },
              {
                label: "sec",
                keys: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
                values: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
              },
              {
                label: "ms",
                keys: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
                values: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
              },
            ],
          ],
          //showLabel: false
        })
        .mobiscroll("setValue", myTime);
    } else if (this.type === 6) {
      myTime = [];
      myTime.push(myHour);
      myTime.push(myMinutes);
      myTime.push(mySeconds);
      myTime.push(myMilSec);
      this.myMobiscroll = $("#" + this.number.id)
        .mobiscroll()
        .scroller({
          theme: "wp",
          mode: "mixed",
          display: "inline",
          lang: "de",
          scrollLock: false,
          cssClass: "longtype",
          wheels: [
            [
              {
                label: "hrs",
                keys: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23,
                ],
                values: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23,
                ],
              },
              {
                label: "min",
                keys: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
                values: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
              },
              {
                label: "sec",
                keys: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
                values: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
              },
              {
                label: "ms",
                keys: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
                values: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
              },
            ],
          ],
          //showLabel: false
        })
        .mobiscroll("setValue", myTime);
    } else if (this.type === 7) {
      this.myMobiscroll = $("#" + this.number.id)
        .mobiscroll()
        .datetime({
          theme: "wp",
          mode: "mixed",
          display: "inline",
          lang: "de",
          scrollLock: false,
          dateOrder: "ddmmyy",
          dateFormat: "dd/mm/yy",
          timeFormat: "HH:ii:ss",
          timeWheels: myWheel,
          //minDate: new Date(2000, 1, 1, 15, 23, 31),
          maxDate: new Date(2030, 11, 31),
          showLabel: false,
        })
        .mobiscroll("setValue", myDate);
    } else if (this.type === 1) {
      myTime = [];
      myTime.push(myHour);
      myTime.push(myMinutes);
      this.myMobiscroll = $("#" + this.number.id)
        .mobiscroll()
        .scroller({
          theme: "wp",
          mode: "mixed",
          display: "inline",
          lang: "de",
          scrollLock: false,
          cssClass: "longtype",
          wheels: [
            [
              {
                label: "hrs",
                keys: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23,
                ],
                values: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23,
                ],
              },
              {
                label: "min",
                keys: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
                values: [
                  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
                  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                ],
              },
            ],
          ],
        })
        .mobiscroll("setValue", myTime);
    } else {
      this.myMobiscroll = $("#" + this.number.id)
        .mobiscroll()
        .time({
          theme: "wp",
          mode: "mixed",
          display: "inline",
          lang: "de",
          scrollLock: false,
          timeFormat: "HH:ii:ss",
          timeWheels: myWheel,
          //defaultValue: new Date(new Date().setHours(myHour, myMinutes, mySeconds, 0)),
          minDate: new Date(new Date().setHours(0, 0, 0, 0)),
          maxDate: new Date(new Date().setHours(maxH, maxM, maxS, 0)),
          showLabel: false,
        })
        .mobiscroll("setValue", myTime);
    }
  };

  DiagnosisTextTimer.prototype.datachangeListener = function (msg) {
    try {
      this.number.style.color = this.numberColor;
      this.timerValue.setValue(msg.value);
      this.number.textContent = this.timerValue.toString();
      if (this.number2) {
        this.number2.textContent = this.timerValue.toString();
        //                this.hours2.textContent = (this.timerValue.data.hour < 10 ? "0" + this.timerValue.data.hour : this.timerValue.data.hour);
        //                this.minutes2.textContent = (this.timerValue.data.minute < 10 ? "0" + this.timerValue.data.minute : this.timerValue.data.minute);
        //                this.seconds2.textContent = (this.timerValue.data.second < 10 ? "0" + this.timerValue.data.second : this.timerValue.data.second);
      }
    } catch (err) {
      console.log("datachangeListener datachangeListener failed: " + err);
    }
  };

  emosWS.DiagnosisTextTimer = DiagnosisTextTimer;

  function DiagnosisTextDoubleTimer(
    parent,
    data,
    plc,
    valueInSecond,
    writable,
    diagnosisWindow,
    myKey
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.valueInSecond = valueInSecond;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.myKey = myKey;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextDoubleTimer parentsbox",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "50%",
        NumberY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextDoubleTimer parentsbox",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "50%",
        NumberY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextDoubleTimer parentsbox",
        BorderWidth: "72%",
        WriteRectWidth: "25%",
        RectX: "47%",
        WriteRectX: "72.5%",
        TextX: "5",
        TextY: "15",
        NumberX: "71.5%",
        NumberY: "15",
        Number2X: "97%",
        Number2Y: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.plctag2 = this.plc + "." + this.data.OPCID2;
    this.border =
      this.text =
      this.number =
      this.number2 =
      this.rect =
      this.writeRect =
      this.numberValue =
      this.number2Value =
      this.timerValue =
        null;
    this.hoursValue = this.minutesValue = this.secondsValue = null;
    this.numberColor = this.writable ? "#76a0b5" : "black";
    this.id = null;
    this.myMobiscroll = null;
    if (valueInSecond) {
      this.plcBase = this.data.Base || "s";
      this.visuBase = this.data.VisuBase || "s";
    } else {
      this.plcBase = this.visuBase = null;
    }

    DiagnosisElement.call(this, { data: data, writable: writable });
  }
  DiagnosisTextDoubleTimer.prototype = Object.create(
    DiagnosisElement.prototype
  );
  DiagnosisTextDoubleTimer.prototype.constructor = DiagnosisTextDoubleTimer;

  DiagnosisTextDoubleTimer.prototype.setTimerValue = function () {
    this.timerValue = this.valueInSecond
      ? new DiagnosisTimerSecond(0, this.plcBase, this.visuBase)
      : new DiagnosisTimerMinute();
  };

  DiagnosisTextDoubleTimer.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var numberId = getElementGlobalID();
      var number2Id = getElementGlobalID();
      var hoursId0 = getElementGlobalID();
      var minutesId0 = getElementGlobalID();
      var secondsId0 = getElementGlobalID();
      var hoursId = getElementGlobalID();
      var minutesId = getElementGlobalID();
      var secondsId = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var writeRectId2 = getElementGlobalID();
      var cancelbuttonId = getElementGlobalID();
      var savebuttonId = getElementGlobalID();

      var properties = this.positionClass[this.data.Position];
      var act = getElementGlobalID();
      var setP = getElementGlobalID();
      this.id = id;
      this.setTimerValue();

      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<span class='DiagnosisNumberLRTextTextSVG' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</span><span id='" +
          savebuttonId +
          "' class='savemebutton emosbutton'></span><span id='" +
          cancelbuttonId +
          "' class='cancelbutton emosbutton'></span><span id='" +
          writeRectId2 +
          "' class='writebutton emosbutton'></span><br class='cl'>" +
          "<div class='grey'><span class='pickertext' id='" +
          act +
          "'>Actual Value</span><span class='pickertime' id='" +
          numberId +
          "'><span class='pickertime hours orange' id='" +
          hoursId0 +
          "'>" +
          this.hoursValue +
          "</span><span class='doppelpunkt'>:</span><span class='pickertime minutes orange' id='" +
          minutesId0 +
          "'>" +
          this.minutesValue +
          "</span><span class='doppelpunkt'>:</span><span class='pickertime seconds orange' id='" +
          secondsId0 +
          "'>" +
          this.secondsValue +
          "</span></span></div>" +
          "<div class='timesetter' style='padding: 3px 0;'><span class='pickertext' id='" +
          setP +
          "'>Setpoint</span><span id='" +
          number2Id +
          "' class='pickertime myPicker'><span class='pickertime hours orange' id='" +
          hoursId +
          "'>" +
          this.hoursValue +
          "</span><span class='doppelpunkt'>:</span><span class='pickertime minutes orange' id='" +
          minutesId +
          "'>" +
          this.minutesValue +
          "</span><span class='doppelpunkt'>:</span><span class='pickertime seconds orange' id='" +
          secondsId +
          "'>" +
          this.secondsValue +
          "</span></span></div>" +
          "</div>"
      ));
      body[0].myData = this.data;
      body[0].myKey = this.myKey;
      body[0].myPlc = this.plctag2;
      body[0].valueInSecond = this.valueInSecond;
      $(this.parentDiv)[0].myData = this.data;
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.number2 = document.getElementById(number2Id);
      this.hours0 = document.getElementById(hoursId0);
      this.minutes0 = document.getElementById(minutesId0);
      this.seconds0 = document.getElementById(secondsId0);
      this.hours = document.getElementById(hoursId);
      this.minutes = document.getElementById(minutesId);
      this.seconds = document.getElementById(secondsId);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.writeRect2 = document.getElementById(writeRectId2);
      this.cancelbutton = document.getElementById(cancelbuttonId);
      this.savebutton = document.getElementById(savebuttonId);
      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.advise(
        this.plctag2,
        this.datachange2Listener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + "Setpoint",
        "name",
        function (msg) {
          $("#" + setP).text(msg.value + ":");
        }
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + "ActualValue",
        "name",
        function (msg) {
          $("#" + act).text(msg.value + ":");
        }
      );
      this.getWritable(this);
    } catch (err) {
      console.log("DiagnosisTextDoubleTimer init failed: " + err);
    }
  };

  DiagnosisTextDoubleTimer.prototype.getWritable = function (self) {
    if (self.writable) {
      self.writeRect2.style.cursor = "pointer";
      self.writeRect2.style.display = "block";
      //this.number2.setAttribute("pointer-events", "none");
      self.writeRect2.addEventListener(
        "click",
        DiagnosisTextDoubleTimer.prototype.onClick.bind(self)
      );
      self.cancelbutton.addEventListener(
        "click",
        DiagnosisTextDoubleTimer.prototype.onButtonCancel.bind(self)
      );
      self.savebutton.addEventListener(
        "click",
        DiagnosisTextDoubleTimer.prototype.onButtonSave.bind(self)
      );
    }
  };

  DiagnosisTextDoubleTimer.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.writeRect2.style.cursor = "pointer";
      this.writeRect2.style.pointerEvents = "auto";
      this.writeRect2.style.display = "block";
      $(".timesetter").css("color", "#76a0b5");
      //this.number2.style.fill = this.numberColor = "blue";
    } else {
      this.writeRect2.style.cursor = "auto";
      this.writeRect2.style.pointerEvents = "none";
      this.writeRect2.style.display = "none";
      $(".timesetter").css("color", "black");
      //this.number2.style.fill = this.numberColor = "black";
    }
  };
  DiagnosisTextDoubleTimer.prototype.onButtonSave = function (myObj) {
    var self;
    var selfMobi;
    var myPlc;
    if (myObj.length) {
      self = myObj;
      selfMobi = myObj.find(".myPicker");
      myPlc = myObj[0].myPlc;
      self.valueInSecond = myObj[0].valueInSecond;
      self.writeRect2 = document.getElementById(
        self.find(".writebutton").attr("id")
      );
      self.cancelbutton = document.getElementById(
        self.find(".cancelbutton").attr("id")
      );
      self.savebutton = document.getElementById(
        self.find(".savemebutton").attr("id")
      );
    } else {
      selfMobi = this.myMobiscroll;
      myPlc = this.plctag2;
      self = this;
    }
    //var days = this.myMobiscroll.mobiscroll('getVal', true).getDays();
    var hours = selfMobi.mobiscroll("getVal", true).getHours();
    var minutes = selfMobi.mobiscroll("getVal", true).getMinutes();
    var seconds = selfMobi.mobiscroll("getVal", true).getSeconds();

    //var gesSeconds;
    var plcWriteValue;
    if (!self.valueInSecond) {
      var gesSeconds = hours * 24 * 60 + minutes * 60 + seconds;

      //encode minute
      plcWriteValue = gesSeconds; // this.timerValue.encode({day: hours, hour: minutes, second: seconds});
    } else if (this.visuBase === "s") {
      //gesSeconds = (hours) * 60 * 60 + (minutes) * 60 + (seconds);

      //encode second
      plcWriteValue = this.timerValue.encode({
        hour: hours,
        minute: minutes,
        second: seconds,
      });
    } else {
      //encode mili-second
      plcWriteValue = this.timerValue.encode({
        minute: hours,
        second: minutes,
        msecond: seconds,
      });
    }

    //emosWS.poke(myPlc, gesSeconds);
    emosWS.poke(myPlc, plcWriteValue);

    selfMobi.mobiscroll("destroy");
    self.writeRect2.style.display = "block";
    self.cancelbutton.style.display = "none";
    self.savebutton.style.display = "none";
  };
  DiagnosisTextDoubleTimer.prototype.onButtonCancel = function () {
    this.myMobiscroll.mobiscroll("destroy");
    this.writeRect2.style.display = "block";
    this.cancelbutton.style.display = "none";
    this.savebutton.style.display = "none";
  };
  DiagnosisTextDoubleTimer.prototype.onClick = function (e) {
    var self = e.target;
    if (
      $("#" + $(this)[0].id)
        .siblings()
        .children(".dw-inline").length
    ) {
      $("#" + $(this)[0].id)
        .siblings()
        .animate({ height: 45 + "px" });
      setTimeout(function () {
        $("#" + $(this)[0].id)
          .siblings()
          .children("myTime")
          .mobiscroll("destroy");
      }, 400);
    }
    var myTop = $(self).position().top;
    var myScrollTop = $(self).closest(".dPage").scrollTop();
    this.writeRect2.style.display = "none";
    this.cancelbutton.style.display = "block";
    this.savebutton.style.display = "block";
    $(self)
      .closest(".dPage")
      .animate({ scrollTop: myTop + myScrollTop - 21 });
    var myHour = this.timerValue.data.hour;
    var myMinutes = this.timerValue.data.minute;
    var mySeconds = this.timerValue.data.second;
    //var gesTime = (myHour * 3600) + (myMinutes * 60) + (mySeconds);
    var myTime = [];
    //var objectType = DiagnosisCommon.getObjectType(this.myKey);
    if (!this.valueInSecond) {
      //displayed in minute
      myTime.push(this.timerValue.data.day);
      myTime.push(this.timerValue.data.hour);
      myTime.push(this.timerValue.data.minute);
    } else if (this.visuBase === "s") {
      //displayed in second
      myTime.push(this.timerValue.data.hour);
      myTime.push(this.timerValue.data.minute);
      myTime.push(this.timerValue.data.second);
    } else {
      //displayed in mili-second
      myTime.push(this.timerValue.data.minute);
      myTime.push(this.timerValue.data.second);
      myTime.push(this.timerValue.data.msecond);
    }
    //if(myHour != 0)

    var myMin = this.data.IntTimeMin;
    var myMax = this.data.IntTimeMax;
    var myWheel = "HHiiss";
    //        var maxH = (Math.floor(this.data.IntTimeMax / 3600) > 0) ? Math.floor(this.data.IntTimeMax / 3600) : '00';
    //        var maxM = (this.data.IntTimeMax / 60 > 0) ? Math.floor(this.data.IntTimeMax / 60) : 0;
    //        var maxS = myMax -(maxM * 60);
    var maxH = Math.floor(myMax / 3600) > 0 ? Math.floor(myMax / 3600) : "00";
    maxH = maxH >= 24 ? 23 : maxH;
    var maxM =
      (myMax - maxH * 3600) / 60 > 0
        ? Math.floor((myMax - maxH * 3600) / 60)
        : 0;
    maxM = maxM === 60 ? 59 : maxM;
    var maxS = myMax - maxH * 3600 - maxM * 60;
    maxS = maxS === 60 ? 59 : maxS;
    var maxTime = maxH + ":" + maxM + ":" + maxS;
    //        if(myMax < 3600){
    //            myWheel = 'iiss';
    //        } else if (myMax < 60) {
    //            myWheel = 'ss';
    //        };
    var myPlc = this.plctag2;
    this.myMobiscroll = $("#" + this.number2.id)
      .mobiscroll()
      .time({
        theme: "wp",
        mode: "mixed",
        display: "inline",
        lang: "de",
        scrollLock: false,
        //timeFormat: 'HH:ii:ss',
        timeWheels: myWheel,
        //defaultValue: new Date(new Date().setHours(myHour, myMinutes, mySeconds, 0)),
        minDate: new Date(new Date().setHours(0, 0, 0, 0)),
        maxDate: new Date(new Date().setHours(maxH, maxM, maxS, 0)),
        showLabel: false,
      })
      .mobiscroll("setValue", myTime);
  };

  DiagnosisTextDoubleTimer.prototype.datachangeListener = function (msg) {
    try {
      $(".pickertime").removeClass("orange");
      //this.number.style.color = "black";
      this.timerValue.setValue(msg.value);
      //this.number.textContent = this.timerValue.toString();
      if (!this.valueInSecond) {
        this.hours0.textContent =
          (this.timerValue.data.day < 10
            ? "0" + this.timerValue.data.day
            : this.timerValue.data.day) + " d";
        this.minutes0.textContent =
          (this.timerValue.data.hour < 10
            ? "0" + this.timerValue.data.hour
            : this.timerValue.data.hour) + " h";
        this.seconds0.textContent =
          (this.timerValue.data.minute < 10
            ? "0" + this.timerValue.data.minute
            : this.timerValue.data.minute) + " m";
        if (this.seconds3) {
          this.hours3.textContent =
            this.timerValue.data.day < 10
              ? "0" + this.timerValue.data.day
              : this.timerValue.data.day;
          this.minutes3.textContent =
            this.timerValue.data.hour < 10
              ? "0" + this.timerValue.data.hour
              : this.timerValue.data.hour;
          this.seconds3.textContent =
            this.timerValue.data.minute < 10
              ? "0" + this.timerValue.data.minute
              : this.timerValue.data.minute;
        }
      } else if (this.visuBase === "s") {
        this.hours0.textContent =
          (this.timerValue.data.hour < 10
            ? "0" + this.timerValue.data.hour
            : this.timerValue.data.hour) + " h";
        this.minutes0.textContent =
          (this.timerValue.data.minute < 10
            ? "0" + this.timerValue.data.minute
            : this.timerValue.data.minute) + " m";
        this.seconds0.textContent =
          (this.timerValue.data.second < 10
            ? "0" + this.timerValue.data.second
            : this.timerValue.data.second) + " s";
        if (this.seconds3) {
          this.hours3.textContent =
            this.timerValue.data.hour < 10
              ? "0" + this.timerValue.data.hour
              : this.timerValue.data.hour;
          this.minutes3.textContent =
            this.timerValue.data.minute < 10
              ? "0" + this.timerValue.data.minute
              : this.timerValue.data.minute;
          this.seconds3.textContent =
            this.timerValue.data.second < 10
              ? "0" + this.timerValue.data.second
              : this.timerValue.data.second;
        }
      } else {
        this.hours0.textContent =
          (this.timerValue.data.minute < 10
            ? "0" + this.timerValue.data.minute
            : this.timerValue.data.minute) + " m";
        this.minutes0.textContent =
          (this.timerValue.data.second < 10
            ? "0" + this.timerValue.data.second
            : this.timerValue.data.second) + " s";
        this.seconds0.textContent =
          (this.timerValue.data.msecond < 10
            ? "0" + this.timerValue.data.msecond
            : this.timerValue.data.msecond) + " ms";
        if (this.seconds3) {
          this.hours3.textContent =
            this.timerValue.data.minute < 10
              ? "0" + this.timerValue.data.minute
              : this.timerValue.data.minute;
          this.minutes3.textContent =
            this.timerValue.data.second < 10
              ? "0" + this.timerValue.data.second
              : this.timerValue.data.second;
          this.seconds3.textContent =
            this.timerValue.data.msecond < 10
              ? "0" + this.timerValue.data.msecond
              : this.timerValue.data.msecond;
        }
      }
    } catch (err) {
      console.log("DiagnosisTextDoubleTimer datachangeListener failed: " + err);
    }
  };

  DiagnosisTextDoubleTimer.prototype.datachange2Listener = function (msg) {
    try {
      //this.number2.style.color = this.numberColor;
      this.timerValue.setValue(msg.value);
      //this.number2.textContent = this.timerValue.toString();

      var myTime = [];
      if (!this.valueInSecond) {
        this.hours.textContent =
          (this.timerValue.data.day < 10
            ? "0" + this.timerValue.data.day
            : this.timerValue.data.day) + " d";
        this.minutes.textContent =
          (this.timerValue.data.hour < 10
            ? "0" + this.timerValue.data.hour
            : this.timerValue.data.hour) + " h";
        this.seconds.textContent =
          (this.timerValue.data.minute < 10
            ? "0" + this.timerValue.data.minute
            : this.timerValue.data.minute) + " m";
        if (this.seconds2) {
          this.hours2.textContent =
            this.timerValue.data.day < 10
              ? "0" + this.timerValue.data.day
              : this.timerValue.data.day;
          this.minutes2.textContent =
            this.timerValue.data.hour < 10
              ? "0" + this.timerValue.data.hour
              : this.timerValue.data.hour;
          this.seconds2.textContent =
            this.timerValue.data.minute < 10
              ? "0" + this.timerValue.data.minute
              : this.timerValue.data.minute;
        }
        myTime = [
          this.timerValue.data.day,
          this.timerValue.data.hour,
          this.timerValue.data.minute,
        ];
      } else if (this.visuBase === "s") {
        this.hours.textContent =
          (this.timerValue.data.hour < 10
            ? "0" + this.timerValue.data.hour
            : this.timerValue.data.hour) + " h";
        this.minutes.textContent =
          (this.timerValue.data.minute < 10
            ? "0" + this.timerValue.data.minute
            : this.timerValue.data.minute) + " m";
        this.seconds.textContent =
          (this.timerValue.data.second < 10
            ? "0" + this.timerValue.data.second
            : this.timerValue.data.second) + " s";
        if (this.seconds2) {
          this.hours2.textContent =
            this.timerValue.data.hour < 10
              ? "0" + this.timerValue.data.hour
              : this.timerValue.data.hour;
          this.minutes2.textContent =
            this.timerValue.data.minute < 10
              ? "0" + this.timerValue.data.minute
              : this.timerValue.data.minute;
          this.seconds2.textContent =
            this.timerValue.data.second < 10
              ? "0" + this.timerValue.data.second
              : this.timerValue.data.second;
        }
        myTime = [
          this.timerValue.data.hour,
          this.timerValue.data.minute,
          this.timerValue.data.second,
        ];
      } else {
        this.hours.textContent =
          (this.timerValue.data.minute < 10
            ? "0" + this.timerValue.data.minute
            : this.timerValue.data.minute) + " m";
        this.minutes.textContent =
          (this.timerValue.data.second < 10
            ? "0" + this.timerValue.data.second
            : this.timerValue.data.second) + " s";
        this.seconds.textContent =
          (this.timerValue.data.msecond < 10
            ? "0" + this.timerValue.data.msecond
            : this.timerValue.data.msecond) + " ms";
        if (this.seconds2) {
          this.hours2.textContent =
            this.timerValue.data.minute < 10
              ? "0" + this.timerValue.data.minute
              : this.timerValue.data.minute;
          this.minutes2.textContent =
            this.timerValue.data.second < 10
              ? "0" + this.timerValue.data.second
              : this.timerValue.data.second;
          this.seconds2.textContent =
            this.timerValue.data.msecond < 10
              ? "0" + this.timerValue.data.msecond
              : this.timerValue.data.msecond;
        }
        myTime = [
          this.timerValue.data.minute,
          this.timerValue.data.second,
          this.timerValue.data.msecond,
        ];
      }

      /*if (this.timerValue.data.hour !== 0)
                myTime.push(this.timerValue.data.hour);
            myTime.push(this.timerValue.data.minute);
            myTime.push(this.timerValue.data.second);*/
      $("#" + this.writeRect2.id).mobiscroll("setValue", myTime);
    } catch (err) {
      console.log(
        "DiagnosisTextDoubleTimer datachange2Listener failed: " + err
      );
    }
  };

  emosWS.DiagnosisTextDoubleTimer = DiagnosisTextDoubleTimer;

  function DiagnosisTextNumber(
    parent,
    data,
    plc,
    writable,
    diagnosisWindow,
    myKey
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.myKey = myKey;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextInteger parentsbox",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextInteger parentsbox",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextInteger parentsbox",
        BorderWidth: "97.5%",
        WriteRectWidth: "25%",
        WriteRectX: "72.5%",
        TextX: "5",
        TextY: "15",
        NumberX: "96.5%",
        NumberY: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;

    this.numberValue =
      this.border =
      this.text =
      this.number =
      this.writeRect3 =
        0;
    this.unit = emosWS.getUnit();
    this.numberColor = this.writable ? "#76a0b5" : "black";
    this.sliderId = null;
    this.oldTextVal = 0;
    this.inputfield = false;
    this.IOObject = null;
    DiagnosisElement.call(this, { data: data, writable: writable });
  }
  DiagnosisTextNumber.prototype = Object.create(DiagnosisElement.prototype);
  DiagnosisTextNumber.prototype.constructor = DiagnosisTextNumber;

  DiagnosisTextNumber.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var numberId = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var writeRectId3 = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      var cancelbuttonId = getElementGlobalID();
      var savebuttonId = getElementGlobalID();
      var holder = getElementGlobalID();
      var placeholder = "";

      this.inputfield = true;
      placeholder =
        "<form onsubmit='return false'>" +
        "<span class='DiagnosisNumberLRTextNumberSVG textfeld orange' oninput='this.form.amountRange.value=this.value; this.form.preview.value=this.value' id='" +
        numberId +
        "' data-value='" +
        this.numberValue +
        "'>" +
        this.numberValue +
        "</span>" +
        "<div class='DiagnosisStringButtons'></div>" +
        "<br class='cl'></form>";
      //                    "</div>";

      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<span class='DiagnosisNumberLRTextTextSVG textfeld' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</span><span id='" +
          savebuttonId +
          "' class='savebutton emosbutton'></span><span id='" +
          cancelbuttonId +
          "' class='cancelbutton emosbutton'></span><span id='" +
          writeRectId3 +
          "' class='writebutton getpad emosbutton'></span>" +
          placeholder +
          "</div>"
      ));
      body[0].myData = this.data;
      body[0].myKey = this.myKey;
      body[0].poke = this.poke.bind(this);
      body.appendTo(this.parentDiv);
      $(this.parentDiv)[0].myData = this.data;
      this.number = document.getElementById(numberId);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.writeRect3 = document.getElementById(writeRectId3);
      this.cancelbutton = document.getElementById(cancelbuttonId);
      this.savebutton = document.getElementById(savebuttonId);
      this.holder = document.getElementById(holder);
      this.IOObject = emosWS.advise(
        this.plctag,
        this.datachangeListenerB.bind(this),
        "",
        emosWS.tagType.IOObject,
        this.data.UnitMetric,
        1,
        this.data.UnitImperial,
        1,
        this.data.UnitLocale,
        1,
        this.data.UnitInit,
        this.data.Precision || 0
      );

      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );

      this.getWritable(this);
    } catch (err) {
      console.error("DiagnosisTextNumber init failed: " + err);
    }
  };

  DiagnosisTextNumber.prototype.poke = function (value) {
    this.IOObject.setValue(value);
  };

  DiagnosisTextNumber.prototype.getWritable = function (self) {
    if (self.writable) {
      self.writeRect3.style.cursor = "pointer";
      self.number.setAttribute("pointer-events", "none");
      self.writeRect3.addEventListener("click", this.onClick.bind(self));
      this.writable = self.writable;
      this.writeRect3 = self.writeRect3;
      this.cancelbutton = self.cancelbutton;
      this.savebutton = self.savebutton;
      this.writeRectId3 = self.writeRectId3;
      this.number = self.number;
      this.updateWrite();
    } else {
      $("#" + self.number.id).addClass("notwritable");
    }
  };
  DiagnosisTextNumber.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.writeRect3.style.cursor = "pointer";
      this.writeRect3.style.pointerEvents = "auto";
      this.writeRect3.style.display = "block";
      this.number.style.color = "#76a0b5";
    } else {
      this.writeRect3.style.cursor = "auto";
      this.writeRect3.style.pointerEvents = "none";
      $("#" + this.number.id).addClass("notwritable");
      this.writeRect3.style.display = "none";
      this.number.style.color = "black";
    }
  };

  DiagnosisTextNumber.prototype.onClick = function () {
    this.writeRect3.style.display = "none";
    this.cancelbutton.style.display = "block";
    this.savebutton.style.display = "block";
  };

  DiagnosisTextNumber.prototype.datachangeListenerB = function (msg) {
    try {
      var v = msg.value;
      $(".textfeld").removeClass("orange");
      this.numberValue = v.value;
      this.number.textContent = this.numberValue + v.unitSymbol;
      $("#" + this.number.id).attr("data-value", this.numberValue);
      if (this.inputfield) {
        this.number.value = this.writeRect3.value = this.numberValue;
        this.oldTextVal = this.number.value;
      }
      if (this.number4)
        this.number4.textContent = this.numberValue + v.unitSymbol;

      this.setInputRange(v.properties, this.data);
    } catch (err) {
      console.error("DiagnosisTextNumber datachangeListenerB failed: " + err);
    }
  };

  DiagnosisTextNumber.prototype.datachangeListener = function (msg) {
    try {
      this.msg = msg;
      $(".textfeld").removeClass("orange");
      if (this.data.Precision) {
        this.numberValue = parseFloat(msg.value).toFixed(this.data.Precision);
      } else {
        this.numberValue = GetAsInteger(msg.value);
      }

      //this.number.style.color = this.numberColor;
      this.number.textContent = this.numberValue + this.getUnitSymbol();

      $("#" + this.number.id).attr("data-value", this.numberValue);
      if (this.inputfield) {
        this.number.value = this.writeRect3.value = msg.value;
        this.oldTextVal = this.number.value;
      }
      if (this.number4)
        this.number4.textContent = this.numberValue + this.getUnitSymbol();
    } catch (err) {
      console.error("DiagnosisTextNumber datachangeListener failed: " + err);
    }
  };

  emosWS.DiagnosisTextNumber = DiagnosisTextNumber;

  function DiagnosisTextNumberNumber(
    parent,
    data,
    plc,
    dataType,
    writable,
    diagnosisWindow,
    myKey
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.dataType = dataType;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.myKey = myKey;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextNumberNumber parentsbox",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextNumberNumber parentsbox",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextNumberNumber parentsbox",
        BorderWidth: "97.5%",
        WriteRectWidth: "25%",
        RectX: "47%",
        WriteRectX: "72.5%",
        TextX: "5",
        TextY: "15",
        NumberX: "71.5%",
        NumberY: "15",
        Number2X: "96.5%",
        Number2Y: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.plctag2 = this.plc + "." + this.data.OPCID2;
    this.border =
      this.text =
      this.number =
      this.number2 =
      this.rect =
      this.writeRect =
      this.numberValue =
      this.number2Value =
      this.min =
      this.max =
        null;
    this.unit = emosWS.getUnit();
    this.unitSymbol = this.getUnitSymbol();
    this.IOObject1 = this.IOObject2 = null;
    this.numberColor = this.writable ? "#76a0b5" : "black";
    DiagnosisElement.call(this, { data: data, writable: writable });
  }
  DiagnosisTextNumberNumber.prototype = Object.create(
    DiagnosisElement.prototype
  );
  DiagnosisTextNumberNumber.prototype.constructor = DiagnosisTextNumberNumber;

  DiagnosisTextNumberNumber.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var numberId = getElementGlobalID();
      var number2Id = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var rectId = getElementGlobalID();
      var writeRectId = getElementGlobalID();
      var cancelbuttonId = getElementGlobalID();
      var savebuttonId = getElementGlobalID();
      var writeRect5Id = getElementGlobalID();
      var cancelbutton1Id = getElementGlobalID();
      var savebutton1Id = getElementGlobalID();
      var act = getElementGlobalID();
      var setP = getElementGlobalID();
      switch (this.dataType) {
        case this.diagnosisWindow.dataTypes.Integer:
          this.min = this.data.IntInputMin;
          this.max = this.data.IntInputMax;
          break;
        case this.diagnosisWindow.dataTypes.Real:
          this.min = this.data.RealInputMin;
          this.max = this.data.RealInputMax;
          break;
        default:
          break;
      }

      var properties = this.positionClass[this.data.Position];

      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<span class='DiagnosisNumberLRTextTextSVG' style='float:none;' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</span>" +
          "<div style='float:left;margin-right: 55px;'>" +
          "<span style='display: block;' id='" +
          act +
          "'>Actual Value</span>" +
          "<span style='display: block; box-shadow:none; background: none;padding-left: 0' class='DiagnosisNumberLRTextNumberSVG' id='" +
          numberId +
          "' data-value='" +
          this.numberValue +
          "'>" +
          this.numberValue +
          "</span>" +
          "</div>" +
          "<form onsubmit='return false' class='textnumnum'>" +
          "<span style='display: block;' id='" +
          setP +
          "'>Setpoint</span>" +
          "<span style='display: block; float:left;' class='DiagnosisNumberLRTextNumberSVG textfeld orange' oninput='this.form.amountRange.value=this.value; this.form.preview.value=this.value' id='" +
          number2Id +
          "' data-value='" +
          this.number2Value +
          "'>" +
          this.number2Value +
          "</span><span id='" +
          savebutton1Id +
          "' class='savebutton second emosbutton'></span><span id='" +
          cancelbutton1Id +
          "' class='cancelbutton emosbutton'></span><span id='" +
          writeRect5Id +
          "' class='writebutton getpad emosbutton'></span><br class='cl'>" +
          "<div class='DiagnosisStringButtons'>" +
          "</form>" +
          "</div>" +
          "</div>"
      ));

      body[0].myData = this.data;
      body[0].myKey = this.myKey;
      body[0].poke = this.poke.bind(this);
      body.appendTo(this.parentDiv);
      $(this.parentDiv)[0].myData = this.data;
      this.number = document.getElementById(numberId);
      this.number2 = document.getElementById(number2Id);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.rect = document.getElementById(rectId);
      this.writeRect5 = document.getElementById(writeRect5Id);
      this.cancelbutton = document.getElementById(cancelbuttonId);
      this.savebutton = document.getElementById(savebuttonId);
      this.IOObject1 = emosWS.advise(
        this.plctag,
        this.datachangeListenerB.bind(this),
        "",
        emosWS.tagType.IOObject,
        this.data.UnitMetric,
        1,
        this.data.UnitImperial,
        1,
        this.data.UnitLocale,
        1,
        this.data.UnitInit,
        this.data.Precision || 0
      );
      this.IOObject2 = emosWS.advise(
        this.plctag2,
        this.datachange2ListenerB.bind(this),
        "",
        emosWS.tagType.IOObject,
        this.data.UnitMetric,
        1,
        this.data.UnitImperial,
        1,
        this.data.UnitLocale,
        1,
        this.data.UnitInit,
        this.data.Precision || 0
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + "Setpoint",
        "name",
        function (msg) {
          $("#" + setP).text(msg.value + ":");
        }
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + "ActualValue",
        "name",
        function (msg) {
          $("#" + act).text(msg.value + ":");
        }
      );
      this.getWritable(this);
    } catch (err) {
      console.log("DiagnosisTextNumberNumber init failed: " + err);
    }
  };

  DiagnosisTextNumberNumber.prototype.poke = function (value) {
    this.IOObject2.setValue(value);
  };

  DiagnosisTextNumberNumber.prototype.getWritable = function (self) {
    if (self.writable) {
      self.number2.setAttribute("pointer-events", "none");
      self.writeRect5.style.cursor = "pointer";
      self.writeRect5.addEventListener(
        "click",
        DiagnosisTextNumberNumber.prototype.onClick.bind(self)
      );
      this.writable = self.writable;
      this.writeRect5 = self.writeRect5;
      this.cancelbutton = self.cancelbutton;
      this.savebutton = self.savebutton;
      this.writeRectId = self.writeRectId;
      this.number2 = self.number2;
      this.updateWrite();
    }
  };

  DiagnosisTextNumberNumber.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.writeRect5.style.cursor = "pointer";
      this.writeRect5.style.pointerEvents = "auto";
      this.writeRect5.style.display = "block";
      this.number2.style.color = "#76a0b5";
    } else {
      this.writeRect5.style.cursor = "auto";
      this.writeRect5.style.pointerEvents = "none";
      this.writeRect5.style.display = "none";
      this.number2.style.color = "black";
    }
  };

  DiagnosisTextNumberNumber.prototype.onClick = function (e) {
    $(e.target).hide().prev().show().prev().show();
  };

  DiagnosisTextNumberNumber.prototype.datachangeListenerB = function (msg) {
    try {
      var v = msg.value;
      this.numberValue = v.value;
      this.number.textContent = v.valueWithSymbol;
      $("#" + this.number.id).attr("data-value", this.numberValue);
      this.number.value = this.numberValue;
    } catch (err) {
      console.error(
        "DiagnosisTextNumberNumber datachangeListenerB failed: " + err
      );
    }
  };

  DiagnosisTextNumberNumber.prototype.datachange2ListenerB = function (msg) {
    try {
      var v = msg.value;
      this.number2Value = v.value;
      this.number2.textContent = this.number2Value + v.unitSymbol;
      $("#" + this.number2.id)
        .attr("data-value", this.number2Value)
        .removeClass("orange");
      if (this.number3) {
        this.number3Value = v.plcValue;
        this.number3.textContent = this.number2Value + v.unitSymbol;
        this.number3.value = this.number3Value;
      }
      this.number2.value = this.number2Value;
      this.setInputRange(v.properties, this.data);
    } catch (err) {
      console.error(
        "DiagnosisTextNumberNumber datachange2ListenerB failed: " + err
      );
    }
  };

  DiagnosisTextNumberNumber.prototype.datachangeListener = function (msg) {
    try {
      this.msg1 = msg;
      this.numberValue = GetAsInteger(msg.value);
      this.number.textContent = this.numberValue + " " + this.getUnitSymbol();
      $("#" + this.number.id).attr("data-value", this.numberValue);
      //this.number.style.color = this.numberColor;
      //this.number.textContent = this.numberValue + this.getUnitSymbol();
      this.number.value = this.numberValue;
    } catch (err) {
      console.error(
        "DiagnosisTextNumberNumber datachangeListener failed: " + err
      );
    }
  };

  DiagnosisTextNumberNumber.prototype.datachange2Listener = function (msg) {
    try {
      this.msg2 = msg;
      var v = msg.value;
      this.number2Value = v.value;
      this.unitSymbol = v.unitSymbol;
      this.number2.textContent = this.number2Value + " " + this.unitSymbol;
      $("#" + this.number2.id)
        .attr("data-value", this.number2Value)
        .removeClass("orange");
      if (this.number3) {
        this.number3Value = GetAsInteger(msg.value);
        this.number3.textContent = this.number3Value + this.unitSymbol;
        this.number3.value = this.number3Value;
      }
      //this.number2.style.color = this.numberColor;
      //this.number2.textContent = this.number2Value + this.getUnitSymbol();
      this.number2.value = this.number2Value;
    } catch (err) {
      console.error(
        "DiagnosisTextNumberNumber datachange2Listener failed: " + err
      );
    }
  };

  emosWS.DiagnosisTextNumberNumber = DiagnosisTextNumberNumber;

  function DiagnosisLedTextNumberNumber(
    parent,
    data,
    plc,
    writable,
    diagnosisWindow
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisLedText parentsbox withborder",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisLedText parentsbox withborder",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        RectX: "50%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
        Number2X: "99%",
        Number2Y: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisLedText parentsbox withborder",
        BorderWidth: "92.4%",
        WriteRectWidth: "25%",
        RectX: "47%",
        WriteRectX: "72.5%",
        TextX: "27",
        TextY: "15",
        NumberX: "71.5%",
        NumberY: "15",
        Number2X: "96.5%",
        Number2Y: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.plctag2 = this.plc + "." + this.data.OPCID2;
    this.plctagLed = this.plc + "." + this.data.LEDOPCID;
    this.ledValue =
      this.border =
      this.led =
      this.text =
      this.number =
      this.number2 =
      this.writeRect =
      this.numberValue =
      this.number2Value =
        null;
    this.unit = emosWS.getUnit();
    this.unitSymbol = this.getUnitSymbol();
    this.IOObject1 = this.IOObject2 = null;
    this.numberColor = this.writable ? "#76a0b5" : "black";
    DiagnosisElement.call(this, { data: data, writable: writable });
  }
  DiagnosisLedTextNumberNumber.prototype = Object.create(
    DiagnosisElement.prototype
  );
  DiagnosisLedTextNumberNumber.prototype.constructor =
    DiagnosisLedTextNumberNumber;

  DiagnosisLedTextNumberNumber.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var ledId = getElementGlobalID();
      var numberId = getElementGlobalID();
      var number2Id = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var writeRectId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      var writeRectId4 = getElementGlobalID();
      var cancelbuttonId = getElementGlobalID();
      var savebuttonId = getElementGlobalID();

      var placeholder =
        "<span class='messageCircle doubleText' id='" +
        ledId +
        "'></span>" +
        "<span class='DiagnosisNumberLRTextText doubleText' id='" +
        textId +
        "'>" +
        this.data.Text +
        "</span>" +
        "<form onsubmit='return false' style='clear:both'>" +
        "<span class='DiagnosisNumberLRTextNumberSVG textfeld' id='" +
        numberId +
        "'>" +
        this.numberValue +
        "</span>" +
        "<span class='DiagnosisNumberLRTextNumberSVG textfeld' oninput='this.form.amountRange.value=this.value; this.form.preview.value=this.value' id='" +
        number2Id +
        "' data-value='" +
        this.number2Value +
        "'>" +
        this.number2Value +
        "</span>" +
        "<div class='DiagnosisStringButtons cl'>" +
        "</form>" +
        "</div>" +
        "<div style='float: right;position:absolute;right: 20px;'><span style='display: none;' class='DiagnosisNumberLRTextTextSVG'></span><span id='" +
        savebuttonId +
        "' class='savebutton second emosbutton'></span><span id='" +
        cancelbuttonId +
        "' class='cancelbutton emosbutton'></span><span id='" +
        writeRectId4 +
        "' class='writebutton getpad emosbutton'></span><br class='cl'></div>";
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          placeholder +
          "<br class='cl' />" +
          "</div>"
      ));

      body[0].myData = this.data;
      body[0].myData.writable = this.writable;
      body[0].myKey = this.myKey;
      body[0].poke = this.poke.bind(this);
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.number2 = document.getElementById(number2Id);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.writeRect4 = document.getElementById(writeRectId4);
      this.cancelbutton = document.getElementById(cancelbuttonId);
      this.savebutton = document.getElementById(savebuttonId);
      this.led = document.getElementById(ledId);
      this.IOObject1 = emosWS.advise(
        this.plctag,
        this.datachangeListenerB.bind(this),
        "",
        emosWS.tagType.IOObject,
        this.data.UnitMetric,
        1,
        this.data.UnitImperial,
        1,
        this.data.UnitLocale,
        1,
        this.data.UnitInit,
        this.data.Precision || 0
      );
      this.IOObject2 = emosWS.advise(
        this.plctag2,
        this.datachange2ListenerB.bind(this),
        "",
        emosWS.tagType.IOObject,
        this.data.UnitMetric,
        1,
        this.data.UnitImperial,
        1,
        this.data.UnitLocale,
        1,
        this.data.UnitInit,
        this.data.Precision || 0
      );

      emosWS.advise(
        this.plctagLed,
        this.datachangeLedListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      this.getWritable(this);
    } catch (err) {
      console.error("DiagnosisLedTextNumberNumber init failed: " + err);
    }
  };

  DiagnosisLedTextNumberNumber.prototype.poke = function (value) {
    this.IOObject2.setValue(value);
  };

  DiagnosisLedTextNumberNumber.prototype.getWritable = function (self) {
    if (self.writable) {
      this.writable = self.writable;
      this.writeRect4 = self.writeRect4;
      this.cancelbutton = self.cancelbutton;
      this.savebutton = self.savebutton;
      this.writeRectId4 = self.writeRectId4;
      self.writeRect4.style.cursor = "pointer";
      self.writeRect4.addEventListener("click", this.onClick.bind(self));
      self.number2.setAttribute("pointer-events", "none");
    }
  };
  DiagnosisLedTextNumberNumber.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.writeRect4.style.cursor = "pointer";
      this.writeRect4.style.pointerEvents = "auto";
      this.writeRect4.style.display = "block";
      this.number2.style.color = this.numberColor = "#76a0b5";
    } else {
      this.writeRect4.style.cursor = "auto";
      this.writeRect4.style.pointerEvents = "none";
      $("#" + this.number2.id).addClass("notwritable");
      this.writeRect4.style.display = "none";
      this.number2.style.color = this.numberColor = "black";
    }
  };

  DiagnosisLedTextNumberNumber.prototype.onClick = function () {
    this.writeRect4.style.display = "none";
    this.cancelbutton.style.display = "block";
    this.savebutton.style.display = "block";
  };

  DiagnosisLedTextNumberNumber.prototype.datachangeLedListener = function (
    msg
  ) {
    try {
      this.ledValue = GetAsBoolean(msg.value);
      var fillColor =
        colorList[this.ledValue ? this.data.OnLED : this.data.OffLED];
      //            $('#' + this.led.id).addClass(fillColor);
      this.led.setAttribute("class", "messageCircle doubleText " + fillColor);
    } catch (err) {
      console.log(
        "DiagnosisLedTextNumberNumber datachangeLedListener failed: " + err
      );
    }
  };

  DiagnosisLedTextNumberNumber.prototype.datachangeListenerB = function (msg) {
    try {
      var v = msg.value;
      this.numberValue = v.value;
      this.number.style.fill = "black";
      this.number.textContent = v.valueWithSymbol;
    } catch (err) {
      console.error(
        "DiagnosisLedTextNumberNumber DatachangeListener failed: " + err
      );
    }
  };

  DiagnosisLedTextNumberNumber.prototype.datachange2ListenerB = function (msg) {
    try {
      var v = msg.value;
      this.number2Value = v.value;
      this.number2.textContent = this.number2Value + v.unitSymbol;
      this.writeRect4.value = this.number2Value;
      this.number2.value = this.number2Value;
      this.oldTextVal = this.number2.value;

      $("#" + this.number2.id).attr("data-value", this.number2Value);
      if ($(this.number5).length > 0) {
        this.number5.textContent = this.number2Value + v.unitSymbol;
        $("#" + this.number5.id).attr("data-value", this.number2Value);
      }

      this.setInputRange(v.properties, this.data);
    } catch (err) {
      console.error(
        "DiagnosisLedTextNumberNumber datachange2ListenerB failed: " + err
      );
    }
  };

  DiagnosisLedTextNumberNumber.prototype.datachangeListener = function (msg) {
    try {
      this.msg2 = msg;
      this.numberValue = GetAsDouble(msg.value);
      this.number.style.fill = "black";
      this.number.textContent = this.numberValue + this.getUnitSymbol();
    } catch (err) {
      console.error(
        "DiagnosisLedTextNumberNumber datachangeListener failed: " + err
      );
    }
  };

  DiagnosisLedTextNumberNumber.prototype.datachange2Listener = function (msg) {
    try {
      this.msg2 = msg;
      if (this.data.Precision) {
        this.number2Value = parseFloat(msg.value).toFixed(this.data.Precision);
      } else {
        this.number2Value = GetAsInteger(msg.value);
      }
      //this.number.style.color = this.numberColor;
      this.number2.textContent = this.number2Value + this.getUnitSymbol();
      this.writeRect4.value = this.number2Value;
      //if(this.inputfield){
      this.number2.value = msg.value;
      this.oldTextVal = this.number2.value;
      //}
      $("#" + this.number2.id).attr("data-value", this.number2Value);
      if ($(this.number5).length > 0) {
        this.number5.textContent = this.number2Value + this.getUnitSymbol();
        $("#" + this.number5.id).attr("data-value", this.number2Value);
      }
    } catch (err) {
      console.error(
        "DiagnosisLedTextNumber datachange2Listener failed: " + err
      );
    }
    //        try {
    //            this.number2Value = GetAsDouble(msg.value);
    //            this.number2.style.fill = this.numberColor;
    //            this.number2.textContent = this.number2Value + this.getUnitSymbol();
    //        } catch (err) {
    //            console.log("DiagnosisLedTextNumberNumber atachangeListener failed: " + err);
    //        }
  };

  emosWS.DiagnosisLedTextNumberNumber = DiagnosisLedTextNumberNumber;

  function DiagnosisLedTextNumber(
    parent,
    data,
    plc,
    writable,
    diagnosisWindow,
    myKey
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.myKey = myKey;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisLedText parentsbox withborder",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisLedText parentsbox withborder",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisLedText parentsbox withborder",
        BorderWidth: "92.4%",
        WriteRectWidth: "12.5%",
        WriteRectX: "85%",
        TextX: "27",
        TextY: "15",
        NumberX: "96.5%",
        NumberY: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.plctagLed = this.plc + "." + this.data.LEDOPCID;
    this.numberValue =
      this.ledValue =
      this.border =
      this.led =
      this.text =
      this.number =
      this.writeRect4 =
      this.numberValue =
        null;
    this.unit = emosWS.getUnit();
    this.numberColor = this.writable ? "#76a0b5" : "black";
    //this.sliderId = null;
    this.inputfield = false;
    this.IOObject = null;
    DiagnosisElement.call(this, { data: data, writable: writable });
  }
  DiagnosisLedTextNumber.prototype = Object.create(DiagnosisElement.prototype);
  DiagnosisLedTextNumber.prototype.constructor = DiagnosisLedTextNumber;

  DiagnosisLedTextNumber.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var ledId = getElementGlobalID();
      var numberId = getElementGlobalID();
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var writeRectId4 = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      var cancelbuttonId = getElementGlobalID();
      var savebuttonId = getElementGlobalID();
      var placeholder = "";
      if (this.writable) {
        this.inputfield = true;
        placeholder =
          "<span class='messageCircle' id='" +
          ledId +
          "'></span>" +
          "<span style='width: 142px' class='DiagnosisNumberLRTextText' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</span>" +
          "<span id='" +
          savebuttonId +
          "' class='savebutton emosbutton'></span><span id='" +
          cancelbuttonId +
          "' class='cancelbutton emosbutton'></span><span id='" +
          writeRectId4 +
          "' class='writebutton getpad emosbutton'></span>" +
          "<form onsubmit='return false'>" +
          "<span class='DiagnosisNumberLRTextNumberSVG textfeld' oninput='this.form.amountRange.value=this.value; this.form.preview.value=this.value' id='" +
          numberId +
          "' data-value='" +
          this.numberValue +
          "'>" +
          this.value +
          "</span>" +
          "<div class='DiagnosisStringButtons ledtext'></div>" +
          "<br class='cl'></form>" +
          "";
        //                        "<div style='float: right;position: absolute;right: 20px;'><span style='display: none;' class='DiagnosisNumberLRTextTextSVG'></span><span id='" + savebuttonId + "' class='savebutton emosbutton'></span><span id='" + cancelbuttonId + "' class='cancelbutton emosbutton'></span><span id='" + writeRectId4 + "' class='writebutton getpad emosbutton'></span><br class='cl'></div>";
      } else {
        this.inputfield = false;
        placeholder =
          "<span class='messageCircle' id='" +
          ledId +
          "'></span>" +
          "<span class='DiagnosisNumberLRTextText' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</span>" +
          "<form onsubmit='return false'>" +
          "<span class='DiagnosisNumberLRTextNumberSVG textfeld' oninput='this.form.amountRange.value=this.value; this.form.preview.value=this.value' id='" +
          numberId +
          "' data-value='" +
          this.numberValue +
          "'>" +
          this.value +
          "</span>" +
          //                        "<span id='" + writeRectId4 + "'></span>" +
          "<div class='DiagnosisStringButtons'>" +
          "</form>" +
          "</div>" +
          "<div style='float: right;position: absolute;right: 20px;'><span style='display: none;' class='DiagnosisNumberLRTextTextSVG'></span><br class='cl'></div>";

        //                placeholder = "<span id='" + numberId + "' class='DiagnosisNumbers without'></span>" +
        //                        "<span class='DiagnosisNumberLRTextText without' id='" + textId + "'>" + this.data.Text + "</span>" +
        //                        "<span class='messageCircle without' id='" + ledId + "'></span>" +
        //                        "<form onsubmit='return false'>" +
        //                        "<span id='" + writeRectId4 + "'></span>" +
        //                        "</form>" +
        //                        "<br class='cl' />";
      }

      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          placeholder +
          "<br class='cl' />" +
          "</div>"
      ));
      body[0].myData = this.data;
      body[0].myKey = this.myKey;
      body[0].poke = this.poke.bind(this);
      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.writeRect4 = document.getElementById(writeRectId4);
      this.cancelbutton = document.getElementById(cancelbuttonId);
      this.savebutton = document.getElementById(savebuttonId);
      this.led = document.getElementById(ledId);
      this.IOObject = emosWS.advise(
        this.plctag,
        this.datachangeListenerB.bind(this),
        "",
        emosWS.tagType.IOObject,
        this.data.UnitMetric,
        1,
        this.data.UnitImperial,
        1,
        this.data.UnitLocale,
        1,
        this.data.UnitInit,
        this.data.Precision || 0
      );
      emosWS.advise(
        this.plctagLed,
        this.datachangeLedListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      this.getWritable(this);
    } catch (err) {
      console.error("DiagnosisLedTextNumber init failed: " + err);
    }
  };

  DiagnosisLedTextNumber.prototype.poke = function (value) {
    this.IOObject.setValue(value);
  };

  DiagnosisLedTextNumber.prototype.getWritable = function (self) {
    if (self.writable) {
      self.writeRect4.style.cursor = "pointer";
      self.writeRect4.addEventListener("click", this.onClick.bind(self));
      self.number.setAttribute("pointer-events", "none");
      this.writable = self.writable;
      this.writeRect4 = self.writeRect4;
      this.cancelbutton = self.cancelbutton;
      this.savebutton = self.savebutton;
      this.writeRectId4 = self.writeRectId4;
      this.number = self.number;
      this.updateWrite();
    }
  };
  DiagnosisLedTextNumber.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      if ($(this.number5).length > 0)
        this.number5.style.color = this.numberColor = "#76a0b5";
      this.number.style.color = this.numberColor = "#76a0b5";
      this.writeRect4.style.cursor = "pointer";
      this.writeRect4.style.pointerEvents = "auto";
      this.writeRect4.style.display = "block";
    } else {
      this.number.style.color = this.numberColor = "black";
      this.writeRect4.style.cursor = "auto";
      this.writeRect4.style.pointerEvents = "none";
      $("#" + this.number.id).addClass("notwritable");
      this.writeRect4.style.display = "none";
    }
  };
  DiagnosisLedTextNumber.prototype.onClick = function () {
    this.writeRect4.style.display = "none";
    this.cancelbutton.style.display = "block";
    this.savebutton.style.display = "block";
  };

  DiagnosisLedTextNumber.prototype.datachangeLedListener = function (msg) {
    try {
      this.ledValue = GetAsBoolean(msg.value);
      var fillColor =
        colorList[this.ledValue ? this.data.OnLED : this.data.OffLED];
      this.led.setAttribute("class", "messageCircle " + fillColor);
    } catch (err) {
      console.error(
        "DiagnosisLedTextNumber datachangeLedListener failed: " + err
      );
    }
  };

  DiagnosisLedTextNumber.prototype.datachangeListenerB = function (msg) {
    try {
      var v = msg.value;
      this.numberValue = v.value;
      this.number.style.color = this.numberColor;
      this.number.textContent = v.value + v.unitSymbol;
      //            this.writeRect4.value = this.numberValue;
      this.number.value = v.value;
      this.oldTextVal = this.number.value;

      $("#" + this.number.id).attr("data-value", this.numberValue);
      if ($(this.number5).length > 0) {
        this.number5.textContent = v.value + v.unitSymbol;
        $("#" + this.number5.id).attr("data-value", this.numberValue);
      }
      this.setInputRange(v.properties, this.data);
    } catch (err) {
      console.error("DiagnosisLedTextNumber atachangeListener failed: " + err);
    }
  };

  DiagnosisLedTextNumber.prototype.datachangeListener = function (msg) {
    try {
      this.msg = msg;
      if (this.data.Precision) {
        this.numberValue = parseFloat(msg.value).toFixed(this.data.Precision);
      } else {
        this.numberValue = GetAsInteger(msg.value);
      }
      //this.number.style.color = this.numberColor;
      this.number.textContent = this.numberValue + this.getUnitSymbol();
      this.writeRect4.value = this.numberValue;
      //if(this.inputfield){
      this.number.value = msg.value;
      this.oldTextVal = this.number.value;
      //}
      $("#" + this.number.id).attr("data-value", this.numberValue);
      if ($(this.number5).length > 0) {
        this.number5.textContent = this.numberValue + this.getUnitSymbol();
        $("#" + this.number5.id).attr("data-value", this.numberValue);
      }
    } catch (err) {
      console.error("DiagnosisLedTextNumber datachangeListener failed: " + err);
    }
  };

  emosWS.DiagnosisLedTextNumber = DiagnosisLedTextNumber;

  function DiagnosisBrowserPage(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisBrowserPage parentsbox",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisBrowserPage parentsbox",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisBrowserPage parentsbox",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.OPCID = this.data.OPCID;
    this.url = this.data.URL;
    this.plctag = this.plc;
    this.iframe = null;

    this.init();
  }

  DiagnosisBrowserPage.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      this.parent.find(".Groupbox").addClass("browser");
      var properties = this.positionClass[this.data.Position];
      var body = $(
        "<div class='" +
          properties.css +
          "'>" +
          "<iframe class='DiagnosisBrowserIFrame' id='" +
          id +
          "' src='" +
          this.url +
          "'></iframe>" +
          "</div>"
      );
      body.appendTo(this.parentDiv);
      this.iframe = document.getElementById(id);
      if (this.url.indexOf("$") >= 0 && this.OPCID !== "") {
        emosWS.advise(
          this.plc + "." + this.data.OPCID,
          this.datachangeListener.bind(this),
          "",
          emosWS.tagType.IO
        );
      }
    } catch (err) {
      console.log("DiagnosisControlNetArray init failed: " + err);
    }
  };

  DiagnosisBrowserPage.prototype.datachangeListener = function (msg) {
    var tempURL = this.url;
    this.iframe.src = tempURL.replace("$", msg.value);
  };

  emosWS.DiagnosisBrowserPage = DiagnosisBrowserPage;

  function DiagnosisControlNetArray(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisControlNetArray",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisControlNetArray",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisControlNetArray",
        BorderWidth: "92.4%",
        WriteRectWidth: "12.5%",
        WriteRectX: "85%",
        TextX: "27",
        TextY: "15",
        NumberX: "96.5%",
        NumberY: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.aOPCIA = this.data.AOPCID;
    this.aOPCMidID = this.data.AOPCMidID;
    this.aOPCEndID = this.data.AOPCEndID;
    this.sOPCIA = this.data.SOPCID;
    this.sOPCMidID = this.data.SOPCMidID;
    this.sOPCEndID = this.data.SOPCEndID;
    this.start = parseInt(this.data.Start);
    this.stop = parseInt(this.data.Stop);
    this.elements = this.stop - this.start + 1;
    this.rows = Math.floor(this.elements / 11);
    this.plctag = this.plc;
    this.controls = {};
    this.rowElements = 11;

    this.init();
  }

  DiagnosisControlNetArray.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      for (var i = this.start, len = this.stop + 1; i < len; i++) {
        this.controls[i] = {
          id: getElementGlobalID(),
          alarmValue: null,
          statusValue: null,
          rect: null,
        };
      }
      var properties = this.positionClass[this.data.Position];
      var controlNet = "";
      var x0 = 0;
      var y0 = 0;
      var controlWidth = 35;
      var controlOutWidth = 40;
      var controlHeight = 20;
      var controlHeightOut = 25;
      var height = controlHeightOut * this.rows;
      for (var i = 0; i < this.rows; i++) {
        var len =
          i === this.rows - 1
            ? this.elements - i * this.rowElements
            : this.rowElements;
        for (var j = 0; j < len; j++) {
          var index = i * this.rowElements + j + this.start;
          controlNet +=
            "<rect class='DiagnosisControlRectSVG' x='" +
            (x0 + j * controlOutWidth) +
            "' y='" +
            y0 +
            "' width='" +
            controlWidth +
            "' height='" +
            controlHeight +
            "' id='" +
            this.controls[index].id +
            "'/>" +
            "<text text-anchor='middle' class='DiagnosisControlTextSVG' x='" +
            (x0 + controlWidth / 2 + j * controlOutWidth) +
            "' y='" +
            (y0 + 15) +
            "'>" +
            index +
            "</text>";
        }
        y0 += controlHeightOut;
      }

      var body = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' height='" +
          height +
          "' class='DiagnosisControlArraySVG'>" +
          controlNet +
          "</svg>" +
          "</div>"
      );
      body.appendTo(this.parentDiv);
      for (var i = this.start, len = this.stop + 1; i < len; i++) {
        this.controls[i].rect = document.getElementById(this.controls[i].id);
        emosWS.advise(
          this.getAlarmPlctag(i),
          this.datachangeAlarmListener.bind(this),
          i,
          emosWS.tagType.IO
        );
        emosWS.advise(
          this.getStatusPlctag(i),
          this.datachangeStatusListener.bind(this),
          i,
          emosWS.tagType.IO
        );
      }
    } catch (err) {
      console.log("DiagnosisControlNetArray init failed: " + err);
    }
  };

  DiagnosisControlNetArray.prototype.getAlarmPlctag = function (index) {
    var format = (100 + index).toString().substring(1);
    return (
      this.plctag +
      "." +
      this.aOPCIA +
      format +
      this.aOPCMidID +
      index +
      this.aOPCEndID
    );
  };

  DiagnosisControlNetArray.prototype.getStatusPlctag = function (index) {
    var format = (100 + index).toString().substring(1);
    return (
      this.plctag +
      "." +
      this.sOPCIA +
      format +
      this.sOPCMidID +
      index +
      this.sOPCEndID
    );
  };

  DiagnosisControlNetArray.prototype.datachangeAlarmListener = function (
    msg,
    index
  ) {
    try {
      var control = this.controls[index];
      control.alarmValue = GetAsBoolean(msg.value);
      if (control.alarmValue) {
        control.rect.style.fill = colorList.R;
      } else {
        if (!control.statusValue) {
          control.rect.style.fill = colorList.O;
        }
      }
    } catch (err) {
      console.log(
        "DiagnosisControlNetArray datachangeAlarmListener failed: " + err
      );
    }
  };

  DiagnosisControlNetArray.prototype.datachangeStatusListener = function (
    msg,
    index
  ) {
    try {
      var control = this.controls[index];
      control.statusValue = GetAsBoolean(msg.value);
      if (!control.alarmValue) {
        if (control.statusValue) {
          control.rect.style.fill = colorList.G;
        } else {
          control.rect.style.fill = colorList.O;
        }
      }
    } catch (err) {
      console.log(
        "DiagnosisControlNetArray datachangeStatusListener failed: " + err
      );
    }
  };

  emosWS.DiagnosisControlNetArray = DiagnosisControlNetArray;

  function DiagnosisBitBar(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisBitBar parentsbox",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisBitBar parentsbox",
        BorderWidth: "100%",
        WriteRectWidth: "25%",
        WriteRectX: "75%",
        TextX: "5",
        TextY: "15",
        NumberX: "99%",
        NumberY: "15",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisBitBar parentsbox",
        BorderWidth: "92.4%",
        WriteRectWidth: "12.5%",
        WriteRectX: "85%",
        TextX: "27",
        TextY: "15",
        NumberX: "96.5%",
        NumberY: "15",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.numberValue = null;
    this.barBytes = 2;
    this.leds = {};

    DiagnosisElement.call(this, { data: data });
  }
  DiagnosisBitBar.prototype = Object.create(DiagnosisElement.prototype);
  DiagnosisBitBar.prototype.constructor = DiagnosisBitBar;

  DiagnosisBitBar.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      for (var i = 0, len = this.barBytes * 8; i < len; i++) {
        this.leds[i] = { id: getElementGlobalID(), value: null, svg: null };
      }
      var properties = this.positionClass[this.data.Position];
      var bars = "";
      var x0 = 0;
      var ledWidth = 10;
      var yNumber = 10;
      var yBit = 12;
      var bitWidth = 6;
      for (var i = 0; i < this.barBytes; i++) {
        for (var j = 0; j < 8; j++) {
          var index = (this.barBytes - i - 1) * 8 + (7 - j);
          bars +=
            "<text class='DiagnosisNumberNumberTextSVG' x='" +
            (x0 + j * ledWidth) +
            "' y='" +
            yNumber +
            "'>" +
            (7 - j) +
            "</text>" +
            "<rect class='DiagnosisBitSVG' x='" +
            (x0 + j * ledWidth) +
            "' y='" +
            yBit +
            "' width='" +
            bitWidth +
            "' height='" +
            bitWidth +
            "' id='" +
            this.leds[index].id +
            "'/>";
        }
        x0 += ledWidth * 9;
      }

      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<svg xmlns='http://www.w3.org/2000/svg' version='1.1' class='DiagnosisBitBarSVG'>" +
          bars +
          "</svg>" +
          "</div><br class='cl'>"
      ));
      body.appendTo(this.parentDiv);
      for (var i = 0, len = this.barBytes * 8; i < len; i++) {
        this.leds[i].svg = document.getElementById(this.leds[i].id);
      }

      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
    } catch (err) {
      console.log("DiagnosisBitBar init failed: " + err);
    }
  };

  DiagnosisBitBar.prototype.datachangeListener = function (msg) {
    try {
      this.numberValue = GetAsInteger(msg.value);
      var baseNumber = 0x100000000;
      var binString = (baseNumber + this.numberValue).toString(2);
      for (var i = 0, len = this.barBytes * 8; i < len; i++) {
        this.leds[i].value = binString[binString.length - i - 1];
        var fillColor = this.leds[i].value === "1" ? colorList.G : colorList.O;
        this.leds[i].svg.style.fill = fillColor;
      }
    } catch (err) {
      console.log("DiagnosisBitBar datachangeListener failed: " + err);
    }
  };

  emosWS.DiagnosisBitBar = DiagnosisBitBar;

  function DiagnosisTextLED(
    parent,
    data,
    plc,
    writable,
    diagnosisWindow,
    myKey
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.myKey = myKey;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextLed parentsbox",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextLed parentsbox",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextLed parentsbox",
        rectWidth: "97.5%",
        rectHeight: "20",
        writeRectX: "93.1%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.4%",
        ledY: "10",
        ledR: "7",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.led = this.border = this.text = this.LEDValue = null;
    this.icon = this.data.leftIcon ? this.data.leftIcon : "on";
    if (this.writable) {
      this.classelist = this.icon + " emosbutton";
    }

    DiagnosisElement.call(this, { data: data, writable: writable });
  }

  DiagnosisTextLED.prototype = Object.create(DiagnosisElement.prototype);
  DiagnosisTextLED.prototype.constructor = DiagnosisTextLED;

  DiagnosisTextLED.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var ledId = getElementGlobalID();
      this.ledID = ledId;
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      //var writeRectId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      var classelist = "";

      //            this.panel = $(
      //                    "<div class='" + properties.css + "' id='" + id + "'>" +
      //                    "<span id='" + ledId + "' class='orange'></span>" +
      //                    "<div class='textLed'>" +
      //                    "<span id='" + textId + "'>" + this.data.Text + "</span>" +
      //                    "</div>" +
      //                    "<br style='clear:both;' />" +
      //                    "</div>");
      this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<span id='" +
          ledId +
          "' class='" +
          this.classelist +
          " orange'></span>" +
          "<div class='textLed'>" +
          "<span id='" +
          textId +
          "'>" +
          this.data.Text +
          "</span>" +
          "</div>" +
          "<br style='clear:both;' />" +
          "</div>"
      );

      this.panel[0].myData = this.data;
      //this.panel[0].myData.plc = this.plc;
      this.panel[0].myData.writable = this.writable;
      this.panel[0].myKey = this.myKey;
      this.panel.appendTo(this.parentDiv);
      this.writeRect1 = document.getElementById(id);
      if (this.writable) {
        this.writeRect1.classList.add("noBottomBorder");
      }
      this.led = document.getElementById(ledId);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);

      //this.id = document.getElementById(id);
      emosWS.advise(
        this.plctag,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );

      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      this.getWritable(this);
      if ($(this.parentDiv).children().length > 4) {
        $(this.parentDiv).addClass("higherDiv");
      }
    } catch (err) {
      console.log("DiagnosisTextLED init failed: " + err);
    }
  };
  DiagnosisTextLED.prototype.getWritable = function (self) {
    if (self.writable) {
      self.led.style.cursor = "pointer";
      self.led.className = self.led.className + " writable";

      self.led.addEventListener(
        "click",
        function () {
          emosWS.poke(self.plctag, self.LEDValue ? "0" : "-1");
        }.bind(self)
      );
      if (self.led1) {
        self.led1.style.cursor = "pointer";
      }
    } else {
      $("#" + this.ledID).addClass("notwritable");
      //            if(self.led1)
      //                self.led1.className = self.led1.className + " notwritable";
    }
  };
  DiagnosisTextLED.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.led.style.cursor = "pointer";
      this.led.style.pointerEvents = "auto";
      this.led.style.opacity = 1;
      $("#" + this.ledID).removeClass("disabled");
      if (this.led1) {
        this.led1.style.cursor = "pointer";
        this.led1.style.pointerEvents = "auto";
        this.led1.style.opacity = 1;
        //                this.led1.className = this.led1.className - " disabled";
        $("#" + this.ledID1).removeClass("disabled");
      }
    } else {
      this.led.style.cursor = "auto";
      this.led.style.pointerEvents = "none";
      // $("#" + this.ledID).addClass("disabled");
      if (this.led1) {
        this.led1.style.cursor = "auto";
        this.led1.style.pointerEvents = "none";
        //                this.led1.className = this.led1.className + " disabled";
        $("#" + this.ledID1).addClass("disabled");
      }
    }
  };

  DiagnosisTextLED.prototype.datachangeListener = function (msg) {
    try {
      this.icon = this.data.leftIcon ? this.data.leftIcon : "on";
      this.LEDValue = GetAsBoolean(msg.value);
      var fillColor =
        colorList[this.LEDValue ? this.data.OnLED : this.data.OffLED];
      var removeColor =
        colorList[this.LEDValue ? this.data.OffLED : this.data.OnLED];
      $("#" + this.ledID)
        .addClass(this.icon)
        .addClass(fillColor)
        .removeClass(removeColor)
        .removeClass("orange");
      if (this.led1)
        $("#" + this.ledID1)
          .addClass(this.icon)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      if (this.writable) {
        $("#" + this.ledID).addClass("writable");
        if (this.led1) $("#" + this.ledID1).addClass("writable");
      } else {
        $("#" + this.ledID)
          .removeClass("writable")
          .addClass("notwritable");
        if (this.led1)
          $("#" + this.ledID1)
            .removeClass("writable")
            .addClass("notwritable");
      }
    } catch (err) {
      console.log("DiagnosisTextLED datachangeListener failed: " + err);
    }
  };
  emosWS.DiagnosisTextLED = DiagnosisTextLED;

  function DiagnosisDoubleText(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisDoubleText parentsbox",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisDoubleText parentsbox",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisDoubleText parentsbox",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.text = this.text2 = null;

    DiagnosisElement.call(this, { data: data });
  }
  DiagnosisDoubleText.prototype = Object.create(DiagnosisElement.prototype);
  DiagnosisDoubleText.prototype.constructor = DiagnosisDoubleText;

  DiagnosisDoubleText.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      var textId2 = getElementGlobalID();
      if (typeof this.data.VisibleOPCID !== "undefined") {
        if (this.data.VisibleOPCID !== "") {
          this.plctag =
            this.data.VisibleOPCID === ""
              ? ""
              : this.plc + "." + this.data.OPCID;
        }
      }
      var properties = this.positionClass[this.data.Position];
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<div class='DiagnosisDoubleTextDiv' id='" +
          textId2 +
          "'>" +
          this.data.Text2 +
          "</div>" +
          "<div class='DiagnosisDoubleTextDiv' id='" +
          textId +
          "'>" +
          this.data.Text +
          "</div>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      this.text = document.getElementById(textId);
      this.text2 = document.getElementById(textId2);
      if (this.plctag !== "") {
        emosWS.advise(
          this.plctag,
          function (msg) {
            try {
              var visible = GetAsBoolean(msg.value);
              this.text.style.visibility = visible ? "visible" : "hidden";
              this.text2.style.visibility = visible ? "visible" : "hidden";
            } catch (err) {
              console.log(
                "DiagnosisDoubleText datachangeListener failed: " + err
              );
            }
          }.bind(this),
          "",
          emosWS.tagType.IO
        );
      }

      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID2,
        "name",
        function (msg) {
          if (msg.value !== "") this.text2.textContent = msg.value;
        }.bind(this),
        this
      );
    } catch (err) {
      console.log("DiagnosisDoubleText init failed: " + err);
    }
  };

  emosWS.DiagnosisDoubleText = DiagnosisDoubleText;

  function DiagnosisString(
    parent,
    data,
    plc,
    writable,
    diagnosisWindow,
    myKey
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.diagnosisWindow = diagnosisWindow;
    this.specClass = diagnosisWindow.specClass;
    this.myKey = myKey;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisString parentsbox",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisString parentsbox",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisString parentsbox",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );

    this.callForString = false;
    this.OPCID = this.data.OPCID;
    this.data.OPCID.replace(
      /^([^\[\]]*)((\[(.*))?\])?$/,
      function (m, OPCID, callForString, m3, callType) {
        this.OPCID = OPCID;
        this.callForString = typeof callForString !== "undefined";
      }.bind(this)
    );

    this.plctagVisible = this.textValue = "";
    this.plctag = this.plc + "." + this.OPCID;
    this.text = null;
    this.textColor = this.writable ? "#76a0b5" : "black";
    this.textId = null;
    this.oldTextVal = null;
    this.strLen = parseInt(this.data.StrLen);
    this.strStart = parseInt(this.data.StrStart);
    DiagnosisElement.call(this, { data: data, writable: writable });
  }
  DiagnosisString.prototype = Object.create(DiagnosisElement.prototype);
  DiagnosisString.prototype.constructor = DiagnosisString;

  DiagnosisString.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      var writeRectId = getElementGlobalID();
      var cancelbuttonId = getElementGlobalID();
      var savebuttonId = getElementGlobalID();
      var previewId = getElementGlobalID();
      this.previewId = previewId;
      this.textId = textId;
      this.writeRectId = writeRectId;
      if (typeof this.data.VisibleOPCID !== "undefined") {
        if (this.data.VisibleOPCID !== "") {
          this.plctagVisible =
            this.data.VisibleOPCID === ""
              ? ""
              : this.plc + "." + this.data.VisibleOPCID;
        }
      }
      if (this.data.OPCID === "MS.M1000_Funct") {
        $(this.parentDiv).addClass("specClass");
      }

      var properties = this.positionClass[this.data.Position];
      var myStart = this.data.StrStart ? this.data.StrStart - 1 : 0;
      var body = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<span id='" +
          savebuttonId +
          "' class='savebutton emosbutton'></span><span id='" +
          cancelbuttonId +
          "' class='cancelbutton emosbutton'></span><span id='" +
          writeRectId +
          "' class='writebutton getKeypad keyboardInputInitiator emosbutton'></span><br class='cl'>" +
          "<span style='display: inline-block;margin-top: 10px;' class='DiagnosisNumberLRTextNumberSVG orange' id='" +
          textId +
          "'>" +
          this.textValue +
          "</span>" +
          "<div class='DiagnosisStringButtons' style='margin-top:20px;padding-top: 0;'>" +
          "<textarea lang='' maxlength='" +
          this.data.StrLen +
          "' pattern='.{" +
          myStart +
          ",}' class='DiagnosisStringFieldTextArea preview keyboardInput' type='textarea' id='" +
          previewId +
          "' required></textarea></p>" +
          "</div>" +
          "</div>"
      );

      body[0].myData = this.data;
      //body[0].myData.plc = this.plc;
      //body[0].myData.writable = this.writable;
      body[0].myKey = this.myKey;
      $(this.parentDiv)[0].myData = this.data;
      body.appendTo(this.parentDiv);
      this.text = document.getElementById(textId);
      this.writeRect = document.getElementById(writeRectId);
      this.cancelbutton = document.getElementById(cancelbuttonId);
      this.savebutton = document.getElementById(savebuttonId);
      if (this.callForString) {
        var calledString = [],
          plcIsRsLinx = this.diagnosisWindow.PLCType === "2";
        for (var i = 0; i < this.strLen; i++) {
          emosWS.advise(
            this.plctag + "[" + (this.strStart + i) + "]",
            function (msg, index) {
              //if RsLinx convert decimal to ASCII character
              calledString[index] = plcIsRsLinx
                ? String.fromCharCode(msg.value)
                : msg.value;
              this.datachangeCharacterStringListener(calledString.join(""));
            }.bind(this),
            i
          );
        }
      } else {
        if (this.plctag !== "") {
          emosWS.advise(
            this.plctag,
            this.datachangeListener.bind(this),
            "",
            emosWS.tagType.IO
          );
        }
      }
      //            brauche ich das noch?
      //            emosWS.advise(this.plctag, function (msg) {
      //                if (msg.value !== "") {
      //
      //                    this.oldTextVal = msg.value;
      ////                    this.text.value = msg.value;
      ////                    this.text.style["background-color"] = "white";
      //                    //this.text.style["color"] = this.textColor;
      //                    this.textValue = msg.value;
      //                }
      //            }.bind(this));
      this.getWritable(this);
      //            if (this.writable) {
      //                this.writeRect.style.cursor = "pointer";
      //                this.writeRect.addEventListener("click", this.onClick.bind(this));
      ////                document.getElementById(buttonSave).addEventListener("click", this.onButtonSave.bind(this));
      ////                document.getElementById(buttonCancel).addEventListener("click", this.onButtonCancel.bind(this));
      //            }
    } catch (err) {
      console.log("DiagnosisString init failed: " + err);
    }
  };
  //    DiagnosisString.prototype.onButtonSave = function () {
  //        emosWS.poke(this.plctag, this.text.value);
  //        $('#' + this.textId).siblings('.DiagnosisStringButtons').animate({'height': '0px'});
  //        $('#' + this.textId).siblings('#' + this.textId).attr('readonly', true);
  //        $('#' + this.textId).siblings('.DiagnosisStringButtons').removeClass('active');
  //    };
  //    DiagnosisString.prototype.onButtonCancel = function () {
  //        $('#' + this.textId).siblings('.DiagnosisStringButtons').animate({'height': '0px'});
  //        this.text.value = this.oldTextVal;
  //        $('#' + this.textId).siblings('.DiagnosisStringButtons').removeClass('active');
  //    };
  DiagnosisString.prototype.onClick = function (e) {
    $("#" + this.previewId).val($("#" + this.textId).text());
    $("#" + this.previewId).height("1px");
    $("#" + this.previewId).height(
      $("#" + this.previewId).prop("scrollHeight") + "px"
    );
    $("#" + this.writeRectId)
      .siblings(".DiagnosisStringButtons")
      .animate({ height: $("#" + this.previewId).prop("scrollHeight") + 10 });
    this.writeRect.style.display = "none";
    this.cancelbutton.style.display = "block";
    this.savebutton.style.display = "block";

    //        DiagnosisForm.open({value: this.textValue, unit: "",
    //            min: this.data.StrStart, max: this.data.StrLen,
    //            plctag: this.plctag, text: this.textValue, type: valueTypes.String
    //        });
  };
  DiagnosisString.prototype.getWritable = function (self) {
    if (self.writable) {
      self.writeRect.style.cursor = "pointer";
      self.writeRect.addEventListener(
        "click",
        DiagnosisString.prototype.onClick.bind(self)
      );
      this.writable = self.writable;
      this.writeRect = self.writeRect;
      this.cancelbutton = self.cancelbutton;
      this.savebutton = self.savebutton;
      this.writeRectId = self.writeRectId;
      this.text = self.text;
      this.updateWrite();
    }
  };
  DiagnosisString.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.writeRect.style.cursor = "pointer";
      this.writeRect.style.pointerEvents = "auto";
      this.text.style.color = this.textColor = "#76a0b5";
      this.writeRect.style.display = "block";
    } else {
      this.writeRect.style.cursor = "auto";
      this.writeRect.style.pointerEvents = "none";
      this.text.style.color = this.textColor = "black";
      this.writeRect.style.display = "none";
    }
  };

  DiagnosisString.prototype.datachangeListener = function (msg) {
    try {
      var visible = GetAsBoolean(msg.value);
      if (!this.data.StrLen) {
        this.data.StrLen = msg.value.length;
      }
      var myText = msg.value.substr(this.data.StrStart - 1, this.data.StrLen);
      $("#" + this.textId)
        .text(myText)
        .removeClass("orange");
      this.textValue = myText;
      //console.log(msg.value, '_', myText)
      if (this.text1)
        $("#" + this.text1.id)
          .text(myText)
          .removeClass("orange");
    } catch (err) {
      console.log("DiagnosisString datachangeListener failed: " + err);
    }
  };

  DiagnosisString.prototype.datachangeCharacterStringListener = function (
    text
  ) {
    try {
      var myText = text;
      $("#" + this.textId)
        .text(myText)
        .removeClass("orange");
      this.textValue = myText;
      //console.log(msg.value, '_', myText)
      if (this.text1)
        $("#" + this.text1.id)
          .text(myText)
          .removeClass("orange");
    } catch (err) {
      console.log(
        "DiagnosisString datachangeCharacterStringListener failed: " + err
      );
    }
  };

  emosWS.DiagnosisString = DiagnosisString;

  function DiagnosisStringField(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisString parentsbox",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisString parentsbox",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisString parentsbox",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.text = null;
    this.textValue = "";

    DiagnosisElement.call(this, { data: data });
  }
  DiagnosisStringField.prototype = Object.create(DiagnosisElement.prototype);
  DiagnosisStringField.prototype.constructor = DiagnosisStringField;

  DiagnosisStringField.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      var body = (this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<textarea class='DiagnosisStringFieldTextArea' id='" +
          textId +
          "' readonly></p>" +
          "</div>"
      ));
      body.appendTo(this.parentDiv);
      this.text = document.getElementById(textId);
      emosWS.advise(
        this.plctag,
        function (msg) {
          if (msg.value !== "") {
            this.text.value = msg.value;
            this.text.style["background-color"] = "white";
            this.textValue = msg.value;
            this.text.style.height = "1px";
            this.text.style.height = this.text.scrollHeight + "px";
          }
        }.bind(this)
      );
    } catch (err) {
      console.log("DiagnosisString init failed: " + err);
    }
  };

  emosWS.DiagnosisStringField = DiagnosisStringField;

  function DiagnosisChildWindow(parent, data, plc, diagnosisWindow) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: { parent: this.diagnosisWindow.divTypes.LRLeft, css: "DiagnosisText" },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisText",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextLong",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.dataText = this.data.Text === "" ? "." : this.data.Text;
    this.plctag = "";
    this.text = "";
    this.init();
  }

  DiagnosisChildWindow.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var textId = getElementGlobalID();
      var textContent = this.data.Name + " " + this.data.Comment + " - ";
      var textIDContent = "TextID: " + this.data.TextID;
      var body = $(
        "<div class='DiagnosisGerneralElement'>" +
          "<svg id='" +
          id +
          "' width='100%' height='20'>" +
          "<rect width='100%' height='20' style='fill:white;stroke-width:1;stroke:grey' />" +
          "<text id='" +
          textId +
          "' x='5' y='15' fill='black'>" +
          textContent +
          textIDContent +
          "</text>" +
          "</svg>" +
          "</div>"
      );
      body.appendTo(this.parentDiv);
      this.text = document.getElementById(textId);

      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = textContent + msg.value;
        }.bind(this),
        this
      );

      var myMsg = {
        DiagnosisLibID: this.diagnosisWindow.DiagnosisLibID,
        PLC: this.diagnosisWindow.PLC,
        ID: this.diagnosisWindow.ID + this.data.OPCID,
        DiagnosisControl: this.data.Name,
        GroupRightIndex: this.diagnosisWindow.GroupRightIndex,
        Enabled: true,
      };
      console.log(myMsg);
      console.log("woo");
      new emosWS.HTMLDiagnosisWindow(myMsg);
      new emosWS.ESDiagnosisWindow({
        conditionFunction: function () {
          return {
            DiagnosisLibID: this.diagnosisWindow.DiagnosisLibID,
            PLC: this.diagnosisWindow.PLC,
            ID: this.diagnosisWindow.ID + this.data.OPCID,
            DiagnosisControl: this.data.Name,
            GroupRightIndex: this.diagnosisWindow.GroupRightIndex,
            Enabled: true,
          };
        }.bind(this),
        PLACEHOLDER_USEHAND: true,
        PLACEHOLDER_USESTROKE: false,
        PLACEHOLDER_USEHIDE: false,
        STDPLACEHOLDER_SHAPENAME: id,
        svgTarget: id,
      });
    } catch (err) {
      console.log("DiagnosisChildWindow init failed: " + err);
    }
  };

  emosWS.DiagnosisChildWindow = DiagnosisChildWindow;

  function CommandFeedback2WR2RD(
    parent,
    data,
    plc,
    writable,
    diagnosisWindow,
    myKey
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.myKey = myKey;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextLed parentsbox noBottomBorder",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextLed parentsbox noBottomBorder",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextLed parentsbox noBottomBorder",
        rectWidth: "97.5%",
        rectHeight: "20",
        writeRectX: "93.1%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.4%",
        ledY: "10",
        ledR: "7",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.writeLeft = this.plc + "." + this.data.writeTagWR1;
    this.readLeft = this.plc + "." + this.data.readTagRD1;
    if (this.data.writeTagWR2)
      this.writeRight = this.plc + "." + this.data.writeTagWR2;
    if (this.data.readTagRD2)
      this.readRight = this.plc + "." + this.data.readTagRD2;

    this.led =
      this.led2 =
      this.border =
      this.text =
      this.LEDValue =
      this.LEDValue2 =
        null;
    this.ledID;
    this.ledID2;
    DiagnosisElement.call(this, { data: data, writable: writable });
  }

  CommandFeedback2WR2RD.prototype = Object.create(DiagnosisElement.prototype);
  CommandFeedback2WR2RD.prototype.constructor = CommandFeedback2WR2RD;

  CommandFeedback2WR2RD.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var ledId = (this.ledID = getElementGlobalID());
      var ledId2 = (this.ledID2 = getElementGlobalID());
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<span id='" +
          ledId +
          "' class='emosbutton links " +
          this.data.leftIcon +
          "'></span>" +
          "<span id='" +
          ledId2 +
          "' class='emosbutton rechts " +
          this.data.rightIcon +
          "'></span>" +
          "<div class='textLed'>" +
          "<span id='" +
          textId +
          "'>" +
          this.data.Text +
          "</span>" +
          "</div>" +
          "<br style='clear:both;' />" +
          "</div>"
      );
      this.panel[0].myData = this.data;
      this.panel[0].myData.writable = this.writable;
      this.panel[0].myKey = this.myKey;
      this.panel.appendTo(this.parentDiv);
      this.led = document.getElementById(ledId);
      this.led2 = document.getElementById(ledId2);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.writeRect1 = document.getElementById(id);
      emosWS.advise(
        this.readLeft,
        this.datachangeListenerLeft.bind(this),
        "",
        emosWS.tagType.IO
      );
      if (this.readRight) {
        emosWS.advise(
          this.readRight,
          this.datachangeListenerRight.bind(this),
          "",
          emosWS.tagType.IO
        );
      }
      emosWS.advise(
        this.writeLeft,
        this.datachangeListenerWriteLeft.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.advise(
        this.writeRight,
        this.datachangeListenerWriteRight.bind(this),
        "",
        emosWS.tagType.IO
      );

      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      this.getWritable(this);
      if ($(this.parentDiv).children().length > 4) {
        $(this.parentDiv).addClass("higherDiv");
      }
    } catch (err) {
      console.log("CommandFeedback2WR2RD init failed: " + err);
    }
  };
  CommandFeedback2WR2RD.prototype.getWritable = function (self) {
    if (self.writable) {
      self.led.style.cursor = self.led2.style.cursor = "pointer";
      $("#" + self.ledID).addClass("writable");
      $("#" + self.ledID2).addClass("writable");

      $("#" + self.ledID).on("click", function () {
        $(this).addClass("switchmode");
        if (!self.writeRight) {
          emosWS.poke(self.writeLeft, "0");
        } else {
          //                    emosWS.poke(self.writeLeft, self.LEDValue ? "0" : "-1");
          emosWS.poke(self.writeLeft, "-1");
        }
      });

      $("#" + self.ledID2).on("click", function () {
        $(this).addClass("switchmode");
        if (self.writeRight) {
          emosWS.poke(self.writeRight, "-1");
        } else {
          emosWS.poke(self.writeLeft, "-1");
        }
      });
    } else {
      $("#" + self.ledID).addClass("notwritable");
      $("#" + self.ledID2).addClass("notwritable");
    }
  };
  CommandFeedback2WR2RD.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.led.style.cursor = this.led2.style.cursor = "pointer";
      this.led.style.pointerEvents = this.led2.style.pointerEvents = "auto";
      //            this.led.style.opacity = this.led2.style.opacity = 1;
      $("#" + this.ledID).removeClass("disabled");
      $("#" + this.ledID2).removeClass("disabled");
    } else {
      $("#" + this.ledID).addClass("disabled");
      $("#" + this.ledID2).addClass("disabled");
      this.led.style.cursor = this.led2.style.cursor = "auto";
      this.led.style.pointerEvents = this.led2.style.pointerEvents = "none";
      //            this.led.style.opacity = this.led2.style.opacity = 0.3;
    }
  };

  CommandFeedback2WR2RD.prototype.datachangeListenerLeft = function (msg) {
    try {
      this.LEDValue = GetAsBoolean(msg.value);
      var fillClass = this.LEDValue ? "onMode" : "offMode";
      var removeclass = this.LEDValue ? "offMode" : "onMode";
      var fillColor = colorList[this.LEDValue ? "G" : "O"];
      var removeColor = colorList[this.LEDValue ? "O" : "G"];
      if (this.readRight) {
        $("#" + this.ledID)
          .addClass(fillClass)
          .removeClass(removeclass)
          .removeClass("switchmode");
        $("#" + this.ledID3)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      } else if (!this.readRight && !this.writeRight) {
        if (this.LEDValue) {
          $("#" + this.ledID2)
            .addClass("onMode")
            .removeClass("offMode")
            .removeClass("switchmode");
          $("#" + this.ledID)
            .addClass("offMode")
            .removeClass("onMode")
            .removeClass("switchmode");
          $("#" + this.ledID4)
            .addClass(fillColor)
            .removeClass(removeColor)
            .removeClass("orange");
          $("#" + this.ledID3)
            .addClass(removeColor)
            .removeClass(fillColor)
            .removeClass("orange");
        } else {
          $("#" + this.ledID)
            .addClass("onMode")
            .removeClass("offMode")
            .removeClass("switchmode");
          $("#" + this.ledID2)
            .addClass("offMode")
            .removeClass("onMode")
            .removeClass("switchmode");
          $("#" + this.ledID3)
            .addClass(fillColor)
            .removeClass(removeColor)
            .removeClass("orange");
          $("#" + this.ledID4)
            .addClass(removeColor)
            .removeClass(fillColor)
            .removeClass("orange");
        }
      } else {
        $("#" + this.ledID2)
          .addClass(fillClass)
          .removeClass(removeclass)
          .removeClass("switchmode");
        $("#" + this.ledID)
          .addClass(removeclass)
          .removeClass(fillClass)
          .removeClass("switchmode");
        $("#" + this.ledID4)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
        $("#" + this.ledID3)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
      }

      if (this.writable) {
        $("#" + this.ledID)
          .addClass("writable")
          .removeClass("notwritable");
      } else {
        $("#" + this.ledID)
          .addClass("notwritable")
          .removeClass("writable");
      }
    } catch (err) {
      console.log("CommandFeedback2WR2RD datachangeListener failed: " + err);
    }
  };
  CommandFeedback2WR2RD.prototype.datachangeListenerRight = function (msg) {
    try {
      this.LEDValue2 = GetAsBoolean(msg.value);
      var fillClass = this.LEDValue2 ? "onMode" : "offMode";
      var removeclass = this.LEDValue2 ? "offMode" : "onMode";
      var fillColor = colorList[this.LEDValue2 ? "G" : "O"];
      var removeColor = colorList[this.LEDValue2 ? "O" : "G"];
      $("#" + this.ledID2)
        .addClass(fillClass)
        .removeClass(removeclass)
        .removeClass("switchmode");
      $("#" + this.ledID4)
        .addClass(fillColor)
        .removeClass(removeColor)
        .removeClass("orange");
      if (this.writable) {
        $("#" + this.ledID2)
          .addClass("writable")
          .removeClass("notwritable");
      } else {
        $("#" + this.ledID2)
          .addClass("notwritable")
          .removeClass("writable");
      }
    } catch (err) {
      console.log("CommandFeedback2WR2RD datachangeListener failed: " + err);
    }
  };
  CommandFeedback2WR2RD.prototype.datachangeListenerWriteLeft = function (msg) {
    try {
      this.LEDValueW1 = GetAsBoolean(msg.value);
      if (!this.LEDValueW1) {
        $("#" + this.ledID).removeClass("switchmode");
      }
    } catch (err) {
      console.log(
        "SpecialPurposeCentralStart datachangeListener failed: " + err
      );
    }
  };
  CommandFeedback2WR2RD.prototype.datachangeListenerWriteRight = function (
    msg
  ) {
    try {
      this.LEDValueW2 = GetAsBoolean(msg.value);
      if (!this.LEDValueW2) {
        $("#" + this.ledID2).removeClass("switchmode");
      }
    } catch (err) {
      console.log(
        "SpecialPurposeCentralStart datachangeListener failed: " + err
      );
    }
  };
  emosWS.CommandFeedback2WR2RD = CommandFeedback2WR2RD;

  function CommandFeedback1WR2RD(
    parent,
    data,
    plc,
    writable,
    diagnosisWindow,
    myKey
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.myKey = myKey;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextLed parentsbox noBottomBorder",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextLed parentsbox noBottomBorder",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextLed parentsbox noBottomBorder",
        rectWidth: "97.5%",
        rectHeight: "20",
        writeRectX: "93.1%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.4%",
        ledY: "10",
        ledR: "7",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.writeLeft = this.plc + "." + this.data.writeTagWR1;
    this.readLeft = this.plc + "." + this.data.readTagRD1;
    this.readRight = this.plc + "." + this.data.readTagRD2;

    this.led =
      this.led2 =
      this.border =
      this.text =
      this.LEDValue =
      this.LEDValue2 =
        null;
    this.ledID;
    this.ledID2;
    DiagnosisElement.call(this, { data: data, writable: writable });
  }

  CommandFeedback1WR2RD.prototype = Object.create(DiagnosisElement.prototype);
  CommandFeedback1WR2RD.prototype.constructor = CommandFeedback1WR2RD;

  CommandFeedback1WR2RD.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var ledId = (this.ledID = getElementGlobalID());
      var ledId2 = (this.ledID2 = getElementGlobalID());
      var borderId = getElementGlobalID();
      var textId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<span id='" +
          ledId +
          "' class='emosbutton notactive links " +
          this.data.leftIcon +
          "'></span>" +
          "<span id='" +
          ledId2 +
          "' class='emosbutton rechts " +
          this.data.rightIcon +
          "'></span>" +
          "<div class='textLed'>" +
          "<span id='" +
          textId +
          "'>" +
          this.data.Text +
          "</span>" +
          "</div>" +
          "<br style='clear:both;' />" +
          "</div>"
      );
      this.panel[0].myData = this.data;
      this.panel[0].myData.writable = this.writable;
      this.panel[0].myKey = this.myKey;
      this.panel.appendTo(this.parentDiv);
      this.led = document.getElementById(ledId);
      this.led2 = document.getElementById(ledId2);
      this.text = document.getElementById(textId);
      this.border = document.getElementById(borderId);
      this.writeRect1 = document.getElementById(id);
      emosWS.advise(
        this.readLeft,
        this.datachangeListenerLeft.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.advise(
        this.readRight,
        this.datachangeListenerRight.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.advise(
        this.writeLeft,
        this.datachangeListenerW1.bind(this),
        "",
        emosWS.tagType.IO
      );

      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      this.getWritable(this);
      if ($(this.parentDiv).children().length > 4) {
        $(this.parentDiv).addClass("higherDiv");
      }
    } catch (err) {
      console.log("CommandFeedback1WR2RD init failed: " + err);
    }
  };
  CommandFeedback1WR2RD.prototype.getWritable = function (self) {
    if (self.writable) {
      self.led.style.cursor = "auto";
      self.led2.style.cursor = "pointer";
      $("#" + self.ledID2).addClass("writable");
      $("#" + self.ledID2).on("click", function () {
        $(this).addClass("switchmode");
        emosWS.poke(self.writeLeft, "-1");
      });
    } else {
      $("#" + self.ledID).addClass("notwritable");
      $("#" + self.ledID2).addClass("notwritable");
    }
  };
  CommandFeedback1WR2RD.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.led.style.cursor = "auto";
      this.led2.style.cursor = "pointer";
      this.led2.style.pointerEvents = "auto";
      this.led2.style.opacity = 1;
      $("#" + this.ledID).removeClass("disabled");
      $("#" + this.ledID2).removeClass("disabled");
    } else {
      $("#" + this.ledID).addClass("disabled");
      $("#" + this.ledID2).addClass("disabled");
      this.led2.style.cursor = "auto";
      this.led2.style.pointerEvents = "none";
      //            this.led2.style.opacity = 0.3;
    }
  };

  CommandFeedback1WR2RD.prototype.datachangeListenerLeft = function (msg) {
    try {
      this.LEDValue = GetAsBoolean(msg.value);
      var fillColor = colorList[this.LEDValue ? "G" : "O"];
      var removeColor = colorList[this.LEDValue ? "O" : "G"];
      if (this.LEDValue) {
        $("#" + this.ledID)
          .addClass("onMode")
          .removeClass("offMode")
          .removeClass("switchmode");
        $("#" + this.ledID2)
          .addClass("offMode")
          .removeClass("onMode")
          .removeClass("switchmode");
        $("#" + this.ledID3)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
        $("#" + this.ledID4)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
      } else {
        $("#" + this.ledID3)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      }

      if (this.writable) {
        $("#" + this.ledID2)
          .addClass("writable")
          .removeClass("notwritable");
      } else {
        $("#" + this.ledID2)
          .addClass("notwritable")
          .removeClass("writable");
      }
    } catch (err) {
      console.log("CommandFeedback1WR2RD datachangeListener failed: " + err);
    }
  };
  CommandFeedback1WR2RD.prototype.datachangeListenerRight = function (msg) {
    try {
      this.LEDValue2 = GetAsBoolean(msg.value);
      var fillColor = colorList[this.LEDValue2 ? "G" : "O"];
      var removeColor = colorList[this.LEDValue2 ? "O" : "G"];
      if (this.LEDValue2) {
        $("#" + this.ledID2)
          .addClass("onMode")
          .removeClass("offMode")
          .removeClass("switchmode");
        $("#" + this.ledID)
          .addClass("offMode")
          .removeClass("onMode")
          .removeClass("switchmode");
        $("#" + this.ledID4)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
        $("#" + this.ledID3)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
      } else {
        $("#" + this.ledID4)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      }
      if (this.writable) {
        $("#" + this.ledID2)
          .addClass("writable")
          .removeClass("notwritable");
      } else {
        $("#" + this.ledID2)
          .addClass("notwritable")
          .removeClass("writable");
      }
    } catch (err) {
      console.log("CommandFeedback1WR2RD datachangeListener failed: " + err);
    }
  };
  CommandFeedback1WR2RD.prototype.datachangeListenerW1 = function (msg) {
    try {
      this.LEDValueW1 = GetAsBoolean(msg.value);
      if (!this.LEDValueW1) {
        $("#" + this.ledID2).removeClass("switchmode");
      }
    } catch (err) {
      console.log("CommandFeedback1WR2RD datachangeListenerw1 failed: " + err);
    }
  };
  emosWS.CommandFeedback1WR2RD = CommandFeedback1WR2RD;

  function ShowExternalContent(
    parent,
    data,
    plc,
    writable,
    diagnosisWindow,
    myKey
  ) {
    this.parent = parent;
    this.data = data;
    this.writable = writable;
    this.myKey = myKey;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextLed minHeight parentsbox",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextLed minHeight parentsbox",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextLed minHeight parentsbox",
        rectWidth: "97.5%",
        rectHeight: "20",
        writeRectX: "93.1%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.4%",
        ledY: "10",
        ledR: "7",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    DiagnosisElement.call(this, { data: data, writable: writable });
  }

  ShowExternalContent.prototype = Object.create(DiagnosisElement.prototype);
  ShowExternalContent.prototype.constructor = ShowExternalContent;

  ShowExternalContent.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var self = this;
      var properties = this.positionClass[this.data.Position];
      var linkElement;
      if (this.data.Text.length === 1) {
        var textId = getElementGlobalID();
        linkElement =
          '<span id="' +
          textId +
          '" data-url="' +
          this.data.URLarray +
          '" class="extContentLinktext">show ' +
          this.data.Text +
          "</span>";
      } else {
        var dropdownId = getElementGlobalID();
        var urlList = this.data.URLarray;
        linkElement =
          '<div class="inputGroup fl linkselector"><span class="dropdown emosbutton noicon"><span class="">Select...</span></span><ul class="dropdownlist noicon selectUrl" id="' +
          dropdownId +
          '"></ul></div>';
        $.each(this.data.Text, function (key, val) {
          $("#" + dropdownId).append(
            '<li class="breadoverlay_li" data-url="' +
              urlList[key] +
              '">' +
              val +
              "</li>"
          );
        });
      }
      this.panel = $(
        "<div class='" +
          properties.css +
          "'>" +
          "<span id='" +
          id +
          "' class='emosbutton extContent fl " +
          this.data.leftIcon +
          "'></span>" +
          "<div class='contentOverlay'><div class='closeTabs closeSubTabs emosbutton'></div></div>" +
          linkElement +
          "<br style='clear:both;' />" +
          "</div>"
      );
      this.panel[0].myData = this.data;
      this.panel[0].myData.writable = this.writable;
      this.panel[0].myKey = this.myKey;
      this.panel.appendTo(this.parentDiv);

      if (this.data.Text.length === 1) {
        this.text = document.getElementById(textId);
        emosWS.sendAdviseText(
          this.diagnosisWindow.getTextPrefix() + this.data.TextID,
          "name",
          function (msg) {
            if (msg.value !== "") this.text.textContent = msg.value;
          }.bind(this),
          this
        );
      } else {
        $.each(this.data.Text, function (key, val) {
          $("#" + dropdownId).append(
            '<li class="breadoverlay_li" data-url="' +
              urlList[key] +
              '">' +
              val +
              "</li>"
          );
        });
      }
      $("#" + id).on("click", function () {
        $(".extContent").removeClass("active");
        $(".contentOverlayHtml").remove();
        if (self.data.Text.length === 1) {
          $(".modal").show();
          $(this).next().show();
          $(this).addClass("active");
          var link = $(this).nextAll(".extContentLinktext").attr("data-url");
          $(
            '<iframe class="contentOverlayHtml" name="plants" src="' +
              link +
              '">'
          ).appendTo(".contentOverlay");
        } else {
          if (
            $(this).nextAll(".linkselector").find(".breadoverlay_li.active")
              .length < 1
          )
            return;
          $(this).addClass("active");
          $(".modal").show();
          $(this).next().show();
          var link = $(this)
            .nextAll(".linkselector")
            .find(".breadoverlay_li.active")
            .attr("data-url");
          $(
            '<iframe class="contentOverlayHtml" name="plants" src="' +
              link +
              '">'
          ).appendTo(".contentOverlay");
        }
      });
      $(".closeSubTabs").on("click", function () {
        $(".extContent").removeClass("active");
        $(".contentOverlayHtml").remove();
        $(".contentOverlay").hide();
        $(".modal").hide();
      });
    } catch (err) {
      console.log("ShowExternalContent init failed: " + err);
    }
  };

  emosWS.ShowExternalContent = ShowExternalContent;

  function ControllerElement(
    parent,
    data,
    plc,
    writable,
    diagnosisWindow,
    myKey
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LMRLeft,
        css: "ControllerElement parentsbox",
      },
      M: {
        parent: this.diagnosisWindow.divTypes.LMRMiddle,
        css: "ControllerElement parentsbox",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LMRRight,
        css: "ControllerElement parentsbox",
      },
    };
    //        this.min = 0;
    //        this.max = 100;
    //        this.percent0 = 67;
    this.plctag1 = this.plc + "." + this.data.actualValueTag;
    this.plctag2 = this.plc + "." + this.data.setpointActualValueTag;
    this.plctag21 = this.plc + "." + this.data.setpointRampValueTag;
    this.plctag3 = this.plc + "." + this.data.outputValueTag;
    this.parentDiv =
      this.numberValue =
      this.numberValue1 =
      this.numberValue2 =
      this.numberValue3 =
      this.barValue =
      this.text =
      this.number =
      this.unitText =
        null;
    this.unit = emosWS.getUnit();
    this.actalUnit = [];
    this.actalUnit["actualMetricalUnit"] = this.data.actualMetricalUnit;
    this.actalUnit["actualImperialUnit"] = this.data.actualImperialUnit;
    this.actalUnit["actualLocalUnit"] = this.data.actualLocalUnit;
    this.setpointUnit = [];
    this.setpointUnit["actualMetricalUnit"] = this.data.setpointMetricalUnit;
    this.setpointUnit["actualImperialUnit"] = this.data.setpointImperialUnit;
    this.setpointUnit["actualLocalUnit"] = this.data.setpointLocalUnit;
    this.outputUnit = [];
    this.outputUnit["actualMetricalUnit"] = this.data.outputMetricalUnit;
    this.outputUnit["actualImperialUnit"] = this.data.outputImperialUnit;
    this.outputUnit["actualLocalUnit"] = this.data.outputLocalUnit;

    this.init();
  }

  ControllerElement.prototype.getUnitSymbol = function (units) {
    switch (this.unit) {
      case emosWS.unitID.Metric:
        return " " + units.actualMetricalUnit;
      case emosWS.unitID.UnitImperial:
        return " " + units.actualImperialUnit;
      case emosWS.unitID.UnitLocale:
        return " " + units.actualLocalUnit;
      default:
        return "";
    }
  };

  ControllerElement.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var numberId = getElementGlobalID();
      var textId = getElementGlobalID();
      var barValueId = getElementGlobalID();
      var barText0Id = getElementGlobalID();
      var barText25Id = getElementGlobalID();
      var barText50Id = getElementGlobalID();
      var barText75Id = getElementGlobalID();
      var barText100Id = getElementGlobalID();
      var valuepointerbox = getElementGlobalID();

      var numberId1 = getElementGlobalID();
      var textId1 = getElementGlobalID();
      var barValueId1 = getElementGlobalID();
      var barText0Id1 = getElementGlobalID();
      var barText25Id1 = getElementGlobalID();
      var barText50Id1 = getElementGlobalID();
      var barText75Id1 = getElementGlobalID();
      var barText100Id1 = getElementGlobalID();
      var valuepointerbox1 = getElementGlobalID();
      var setpointbar = getElementGlobalID();
      var setpointbarvalue = getElementGlobalID();

      var numberId2 = getElementGlobalID();
      var textId2 = getElementGlobalID();
      var barValueId2 = getElementGlobalID();
      var barText0Id2 = getElementGlobalID();
      var barText25Id2 = getElementGlobalID();
      var barText50Id2 = getElementGlobalID();
      var barText75Id2 = getElementGlobalID();
      var barText100Id2 = getElementGlobalID();
      var valuepointerbox2 = getElementGlobalID();

      this.parentDiv = this.parent.getDiv(
        this.positionClass[this.data.Position].parent
      );
      var properties = this.positionClass[this.data.Position];
      this.unitText = this.getUnitSymbol(this.actalUnit);
      this.unitText1 = this.getUnitSymbol(this.setpointUnit);
      this.unitText2 = this.getUnitSymbol(this.outputUnit);

      var body = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<div class='actual'>" +
          "<div class='barhead' id='" +
          textId +
          "'>" +
          this.data.actualText +
          this.unitText +
          "</div>" +
          "<div class='tempratureouterbox'>" +
          "<div id='" +
          barValueId +
          "' class='tempratureinnerbox'></div>" +
          "<div id='" +
          valuepointerbox +
          "' class='valuepointerbox'>" +
          "<span id='" +
          numberId +
          "'>" +
          this.numberValue +
          "</span>" +
          "<div class='valuepointer'></div>" +
          "</div>" +
          "</div>" +
          "<div class='scala'>" +
          "<span id='" +
          barText0Id +
          "' class='bartext bartext0'>0</span>" +
          "<span id='" +
          barText25Id +
          "' class='bartext bartext25'>25</span>" +
          "<span id='" +
          barText50Id +
          "' class='bartext bartext50'>50</span>" +
          "<span id='" +
          barText75Id +
          "' class='bartext bartext75'>75</span>" +
          "<span id='" +
          barText100Id +
          "' class='bartext bartext100'>100</span>" +
          "</div><br class='cl'>" +
          "</div>" +
          "<div class='actual'>" +
          "<div class='barhead' id='" +
          textId1 +
          "'>" +
          this.data.setpointText +
          this.unitText1 +
          "</div>" +
          "<div class='tempratureouterbox'>" +
          "<div id='" +
          barValueId1 +
          "' class='tempratureinnerbox'></div>" +
          "<div id='" +
          valuepointerbox1 +
          "' class='valuepointerbox'>" +
          "<span id='" +
          numberId1 +
          "'>" +
          this.numberValue1 +
          "</span>" +
          "<div class='valuepointer'></div>" +
          "</div>" +
          "<div id='" +
          setpointbar +
          "' class='setpointbar'></div>" +
          "<div id='" +
          setpointbarvalue +
          "' class='setpointbarvalue'></div>" +
          "</div>" +
          "<div class='scala'>" +
          "<span id='" +
          barText0Id1 +
          "' class='bartext bartext0'>0</span>" +
          "<span id='" +
          barText25Id1 +
          "' class='bartext bartext25'>25</span>" +
          "<span id='" +
          barText50Id1 +
          "' class='bartext bartext50'>50</span>" +
          "<span id='" +
          barText75Id1 +
          "' class='bartext bartext75'>75</span>" +
          "<span id='" +
          barText100Id1 +
          "' class='bartext bartext100'>100</span>" +
          "</div><br class='cl'>" +
          "</div>" +
          "<div class='actual output'>" +
          "<div class='barhead' id='" +
          textId2 +
          "'>" +
          this.data.outputText +
          this.unitText2 +
          "</div>" +
          "<div class='tempratureouterbox'>" +
          "<div id='" +
          barValueId2 +
          "' class='tempratureinnerbox'></div>" +
          "<div id='" +
          valuepointerbox2 +
          "' class='valuepointerbox'>" +
          "<span id='" +
          numberId2 +
          "'>" +
          this.numberValue3 +
          "</span>" +
          "<div class='valuepointer'></div>" +
          "</div>" +
          "</div>" +
          "<div class='scala'>" +
          "<span id='" +
          barText0Id2 +
          "' class='bartext bartext0'>0</span>" +
          "<span id='" +
          barText25Id2 +
          "' class='bartext bartext25'>25</span>" +
          "<span id='" +
          barText50Id2 +
          "' class='bartext bartext50'>50</span>" +
          "<span id='" +
          barText75Id2 +
          "' class='bartext bartext75'>75</span>" +
          "<span id='" +
          barText100Id2 +
          "' class='bartext bartext100'>100</span>" +
          "</div><br class='cl'>" +
          "</div><br class='cl'>" +
          "</div>"
      );

      body.appendTo(this.parentDiv);
      this.number = document.getElementById(numberId);
      this.text = document.getElementById(textId);
      this.barValue = document.getElementById(barValueId);
      this.valuepointerbox = document.getElementById(valuepointerbox);

      this.number1 = document.getElementById(numberId1);
      this.text1 = document.getElementById(textId1);
      this.barValue1 = document.getElementById(barValueId1);
      this.valuepointerbox1 = document.getElementById(valuepointerbox1);
      this.setpointbar = document.getElementById(setpointbar);
      this.setpointbarvalue = document.getElementById(setpointbarvalue);

      this.number2 = document.getElementById(numberId2);
      this.text2 = document.getElementById(textId2);
      this.barValue2 = document.getElementById(barValueId2);
      this.valuepointerbox2 = document.getElementById(valuepointerbox2);

      emosWS.advise(
        this.plctag1,
        function (msg) {
          if (msg) {
            this.plcmin =
              msg.value && msg.value.plc_min ? Number(msg.value.plc_min) : 0;
            this.plcmax =
              msg.value && msg.value.plc_max ? Number(msg.value.plc_max) : 100;
            var viertel = (this.plcmax - this.plcmin) / 4;
            document.getElementById(barText0Id).textContent = this.plcmin;
            document.getElementById(barText25Id).textContent =
              this.plcmax - this.plcmin > 10
                ? Math.round(viertel + this.plcmin)
                : viertel + this.plcmin;
            document.getElementById(barText50Id).textContent =
              this.plcmax - this.plcmin > 10
                ? Math.round(viertel * 2 + this.plcmin)
                : viertel * 2 + this.plcmin;
            document.getElementById(barText75Id).textContent =
              this.plcmax - this.plcmin > 10
                ? Math.round(viertel * 3 + this.plcmin)
                : viertel * 3 + this.plcmin;
            document.getElementById(barText100Id).textContent = this.plcmax;
          }
        }.bind(this),
        "",
        emosWS.tagType.Property
      );

      emosWS.advise(
        this.plctag2,
        function (msg) {
          if (msg) {
            this.plcmin1 =
              msg.value && msg.value.plc_min ? Number(msg.value.plc_min) : 0;
            this.plcmax1 =
              msg.value && msg.value.plc_max ? Number(msg.value.plc_max) : 100;
            var viertel = (this.plcmax1 - this.plcmin1) / 4;
            document.getElementById(barText0Id1).textContent = this.plcmin1;
            document.getElementById(barText25Id1).textContent =
              this.plcmax1 - this.plcmin1 > 10
                ? Math.round(viertel + this.plcmin1)
                : viertel + this.plcmin1;
            document.getElementById(barText50Id1).textContent =
              this.plcmax1 - this.plcmin1 > 10
                ? Math.round(viertel * 2 + this.plcmin1)
                : viertel * 2 + this.plcmin1;
            document.getElementById(barText75Id1).textContent =
              this.plcmax1 - this.plcmin1 > 10
                ? Math.round(viertel * 3 + this.plcmin1)
                : viertel * 3 + this.plcmin1;
            document.getElementById(barText100Id1).textContent = this.plcmax1;
          }
        }.bind(this),
        "",
        emosWS.tagType.Property
      );
      emosWS.advise(
        this.plctag3,
        function (msg) {
          if (msg) {
            this.plcmin2 = 0; //Number(msg.value.plc_min);
            this.plcmax2 = 100; //Number(msg.value.plc_max);
            var viertel = (this.plcmax2 - this.plcmin2) / 4;
            document.getElementById(barText0Id2).textContent = this.plcmin2;
            document.getElementById(barText25Id2).textContent =
              this.plcmax2 - this.plcmin2 > 10
                ? Math.round(viertel + this.plcmin2)
                : viertel + this.plcmin2;
            document.getElementById(barText50Id2).textContent =
              this.plcmax2 - this.plcmin2 > 10
                ? Math.round(viertel * 2 + this.plcmin2)
                : viertel * 2 + this.plcmin2;
            document.getElementById(barText75Id2).textContent =
              this.plcmax2 - this.plcmin2 > 10
                ? Math.round(viertel * 3 + this.plcmin2)
                : viertel * 3 + this.plcmin2;
            document.getElementById(barText100Id2).textContent = this.plcmax2;
          }
        }.bind(this),
        "",
        emosWS.tagType.Property
      );

      emosWS.advise(
        this.plctag1,
        this.datachangeListener.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.advise(
        this.plctag2,
        this.datachangeListener1.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.advise(
        this.plctag21,
        this.datachangeListener12.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.advise(
        this.plctag3,
        this.datachangeListener3.bind(this),
        "",
        emosWS.tagType.IO
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.actualTextID,
        "name",
        function (msg) {
          if (msg.value !== "")
            this.text.textContent = msg.value + this.unitText;
        }.bind(this),
        this
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.setpointTextID,
        "name",
        function (msg) {
          if (msg.value !== "")
            this.text1.textContent = msg.value + this.unitText1;
        }.bind(this),
        this
      );
      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.outputTextID,
        "name",
        function (msg) {
          if (msg.value !== "")
            this.text2.textContent = msg.value + this.unitText2;
        }.bind(this),
        this
      );
    } catch (err) {
      console.log("ControllerElement init failed: " + err);
    }
  };

  ControllerElement.prototype.datachangeListener = function (msg) {
    try {
      if (this.data.actualDecimalDigits) {
        this.numberValue = parseFloat(msg.value).toFixed(
          this.data.actualDecimalDigits
        );
      } else {
        this.numberValue = GetAsInteger(msg.value);
      }
      this.number.textContent = this.numberValue;
      var scalaHeight = this.plcmax - this.plcmin;
      var scalaMultiplicator = 160 / scalaHeight;
      var valuePosition = (this.numberValue - this.plcmin) * scalaMultiplicator;
      this.barValue.style.height = valuePosition - 3 + "px";
      this.valuepointerbox.style.bottom = valuePosition - 6 + "px";
    } catch (err) {
      console.log("ControllerElement datachangeListener failed: " + err);
    }
  };
  ControllerElement.prototype.datachangeListener1 = function (msg) {
    try {
      if (this.data.actualDecimalDigits) {
        this.numberValue1 = parseFloat(msg.value).toFixed(
          this.data.actualDecimalDigits
        );
      } else {
        this.numberValue1 = GetAsInteger(msg.value);
      }
      //            this.numberValue = GetAsInteger(112);
      this.number1.textContent = this.numberValue1;
      var scalaHeight = this.plcmax1 - this.plcmin1;
      var scalaMultiplicator = 160 / scalaHeight;
      var valuePosition =
        (this.numberValue1 - this.plcmin1) * scalaMultiplicator;
      this.barValue1.style.height = valuePosition - 3 + "px";
      this.valuepointerbox1.style.bottom = valuePosition - 6 + "px";
    } catch (err) {
      console.log("ControllerElement datachangeListener failed: " + err);
    }
  };
  ControllerElement.prototype.datachangeListener12 = function (msg) {
    try {
      if (this.data.setpointDecimalDigits) {
        this.numberValue2 = parseFloat(msg.value).toFixed(
          this.data.setpointDecimalDigits
        );
      } else {
        this.numberValue2 = GetAsInteger(msg.value);
      }
      this.setpointbarvalue.textContent = this.numberValue2;
      var scalaHeight = this.plcmax1 + this.plcmin1 * -1;
      var scalaMultiplicator = 160 / scalaHeight;
      var valuePosition =
        (this.numberValue2 - this.plcmin1) * scalaMultiplicator;
      //            this.barValue.style.height = valuePosition + 'px';
      this.setpointbar.style.bottom = valuePosition - 4 + "px";
      this.setpointbarvalue.style.bottom = valuePosition - 4 + "px";
    } catch (err) {
      console.log("ControllerElement datachangeListener failed: " + err);
    }
  };
  ControllerElement.prototype.datachangeListener3 = function (msg) {
    try {
      if (this.data.outputDecimalDigits) {
        this.numberValue3 = parseFloat(msg.value).toFixed(
          this.data.outputDecimalDigits
        );
      } else {
        this.numberValue3 = GetAsInteger(msg.value);
      }
      this.number2.textContent = this.numberValue3;
      var scalaHeight = this.plcmax2 - this.plcmin2;
      var scalaMultiplicator = 160 / scalaHeight;
      var valuePosition =
        (this.numberValue3 - this.plcmin2) * scalaMultiplicator;
      if (valuePosition < 3) {
        this.barValue2.style.height = valuePosition + "px";
        this.valuepointerbox2.style.bottom = valuePosition - 3 + "px";
      } else {
        this.barValue2.style.height = valuePosition - 3 + "px";
        this.valuepointerbox2.style.bottom = valuePosition - 6 + "px";
      }
    } catch (err) {
      console.log("ControllerElement datachangeListener failed: " + err);
    }
  };

  emosWS.ControllerElement = ControllerElement;

  function SpecialPurposeCentralStart(
    parent,
    data,
    plc,
    writable,
    diagnosisWindow,
    myKey
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.myKey = myKey;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextLed parentsbox noBottomBorder",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextLed parentsbox noBottomBorder",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextLed parentsbox noBottomBorder",
        rectWidth: "97.5%",
        rectHeight: "20",
        writeRectX: "93.1%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.4%",
        ledY: "10",
        ledR: "7",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.writeLeft = this.plc + "." + this.data.writeTagWR1;
    this.writeMiddle = this.plc + "." + this.data.writeTagWR2;
    this.writeRight = this.plc + "." + this.data.writeTagWR3;
    this.read1 = this.plc + "." + this.data.readTagRD1;
    this.read2 = this.plc + "." + this.data.readTagRD2;

    this.led =
      this.led2 =
      this.border =
      this.text =
      this.LEDValue =
      this.LEDValue2 =
        null;
    this.ledID;
    this.ledID2;
    this.ledID3;
    DiagnosisElement.call(this, { data: data, writable: writable });
  }

  SpecialPurposeCentralStart.prototype = Object.create(
    DiagnosisElement.prototype
  );
  SpecialPurposeCentralStart.prototype.constructor = SpecialPurposeCentralStart;

  SpecialPurposeCentralStart.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var ledId = (this.ledID = getElementGlobalID());
      var ledId2 = (this.ledID2 = getElementGlobalID());
      var ledId3 = (this.ledID3 = getElementGlobalID());
      var textId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<span id='" +
          ledId +
          "' class='emosbutton halblinks off'></span>" +
          "<span id='" +
          ledId2 +
          "' class='emosbutton mitte off_time'></span>" +
          "<span id='" +
          ledId3 +
          "' class='emosbutton halbrechts plantStartStop'></span>" +
          "<div class='textLed smallerText'>" +
          "<span id='" +
          textId +
          "'>" +
          this.data.Text +
          "</span>" +
          "</div><br class='cl'>" +
          "</div>"
      );
      this.panel[0].myData = this.data;
      this.panel[0].myData.writable = this.writable;
      this.panel[0].myKey = this.myKey;
      this.panel.appendTo(this.parentDiv);
      this.led = document.getElementById(ledId);
      this.led2 = document.getElementById(ledId2);
      this.led3 = document.getElementById(ledId3);
      this.text = document.getElementById(textId);
      emosWS.advise(
        this.read1,
        this.datachangeListenerLeft.bind(this),
        "",
        emosWS.tagType.IO
      ); //CSOn
      emosWS.advise(
        this.read2,
        this.datachangeListenerRight.bind(this),
        "",
        emosWS.tagType.IO
      ); //PlStrOut

      emosWS.advise(
        this.writeLeft,
        this.datachangeListenerW1.bind(this),
        "",
        emosWS.tagType.IO
      ); //CSOn
      emosWS.advise(
        this.writeMiddle,
        this.datachangeListenerW2.bind(this),
        "",
        emosWS.tagType.IO
      ); //PlStrOut
      emosWS.advise(
        this.writeRight,
        this.datachangeListenerW3.bind(this),
        "",
        emosWS.tagType.IO
      ); //PlStrOut

      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      this.getWritable(this);
    } catch (err) {
      console.log("SpecialPurposeCentralStart init failed: " + err);
    }
  };
  SpecialPurposeCentralStart.prototype.getWritable = function (self) {
    if (self.writable) {
      self.led.style.cursor = self.led2.style.cursor = "pointer";
      $("#" + self.ledID).addClass("writable");
      $("#" + self.ledID2).addClass("writable");
      $("#" + self.ledID3).addClass("writable");
      $("#" + self.ledID).on("click", function () {
        $(this).addClass("switchmode");
        emosWS.poke(self.writeLeft, "-1");
      });
      $("#" + self.ledID2).on("click", function () {
        $(this).addClass("switchmode");
        emosWS.poke(self.writeMiddle, "-1");
      });
      $("#" + self.ledID3).on("click", function () {
        $(this).addClass("switchmode");
        emosWS.poke(self.writeRight, "-1");
      });
    } else {
      $("#" + self.ledID).addClass("notwritable");
      $("#" + self.ledID2).addClass("notwritable");
      $("#" + self.ledID3).addClass("notwritable");
    }
  };
  SpecialPurposeCentralStart.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.led.style.cursor =
        this.led2.style.cursor =
        this.led3.style.cursor =
          "pointer";
      this.led.style.pointerEvents =
        this.led2.style.pointerEvents =
        this.led3.style.pointerEvents =
          "auto";
      $("#" + this.ledID).removeClass("disabled");
      $("#" + this.ledID2).removeClass("disabled");
      $("#" + this.ledID3).removeClass("disabled");
      //            this.led.style.opacity = this.led2.style.opacity = this.led3.style.opacity = 1;
    } else {
      $("#" + this.ledID).addClass("disabled");
      $("#" + this.ledID2).addClass("disabled");
      $("#" + this.ledID3).addClass("disabled");
      this.led.style.cursor =
        this.led2.style.cursor =
        this.led3.style.cursor =
          "auto";
      this.led.style.pointerEvents =
        this.led2.style.pointerEvents =
        this.led3.style.pointerEvents =
          "none";
      //            this.led.style.opacity = this.led2.style.opacity = this.led3.style.opacity = 0.3;
    }
  };

  SpecialPurposeCentralStart.prototype.datachangeListenerLeft = function (msg) {
    try {
      this.LEDValue = GetAsBoolean(msg.value);
      var fillColor = colorList[this.LEDValue ? "G" : "O"];
      var removeColor = colorList[this.LEDValue ? "O" : "G"];
      if (this.LEDValue) {
        $("#" + this.ledID3)
          .addClass("onMode")
          .removeClass("offMode")
          .removeClass("switchmode");
        $("#" + this.ledID2)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID4)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID5)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID6)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      } else if (this.LEDValue === false && this.LEDValue1 === false) {
        $("#" + this.ledID)
          .addClass("onMode")
          .removeClass("offMode")
          .removeClass("switchmode");
        $("#" + this.ledID2)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID3)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID4)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID5)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
        $("#" + this.ledID6)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      }
      if (this.writable) {
        $("#" + this.ledID)
          .addClass("writable")
          .removeClass("notwritable");
        $("#" + this.ledID2)
          .addClass("writable")
          .removeClass("notwritable");
        $("#" + this.ledID3)
          .addClass("writable")
          .removeClass("notwritable");
      } else {
        $("#" + this.ledID)
          .addClass("notwritable")
          .removeClass("writable");
        $("#" + this.ledID2)
          .addClass("notwritable")
          .removeClass("writable");
        $("#" + this.ledID3)
          .addClass("notwritable")
          .removeClass("writable");
      }
    } catch (err) {
      console.log(
        "SpecialPurposeCentralStart datachangeListener failed: " + err
      );
    }
  };
  SpecialPurposeCentralStart.prototype.datachangeListenerRight = function (
    msg
  ) {
    try {
      this.LEDValue1 = GetAsBoolean(msg.value);
      var fillColor = colorList[this.LEDValue1 ? "G" : "O"];
      var removeColor = colorList[this.LEDValue1 ? "O" : "G"];
      if (this.LEDValue1) {
        $("#" + this.ledID2)
          .addClass("onMode")
          .removeClass("offMode")
          .removeClass("switchmode");
        $("#" + this.ledID)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID3)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID4)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID6)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID5)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      } else if (this.LEDValue === false && this.LEDValue1 === false) {
        $("#" + this.ledID)
          .addClass("onMode")
          .removeClass("offMode")
          .removeClass("switchmode");
        $("#" + this.ledID2)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID3)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID4)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID5)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
        $("#" + this.ledID6)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      }
      if (this.writable) {
        $("#" + this.ledID)
          .addClass("writable")
          .removeClass("notwritable");
        $("#" + this.ledID2)
          .addClass("writable")
          .removeClass("notwritable");
        $("#" + this.ledID3)
          .addClass("writable")
          .removeClass("notwritable");
      } else {
        $("#" + this.ledID)
          .addClass("notwritable")
          .removeClass("writable");
        $("#" + this.ledID2)
          .addClass("notwritable")
          .removeClass("writable");
        $("#" + this.ledID3)
          .addClass("notwritable")
          .removeClass("writable");
      }
    } catch (err) {
      console.log(
        "SpecialPurposeCentralStart datachangeListener failed: " + err
      );
    }
  };
  SpecialPurposeCentralStart.prototype.datachangeListenerW1 = function (msg) {
    try {
      this.LEDValueW1 = GetAsBoolean(msg.value);
      if (!this.LEDValueW1) {
        $("#" + this.ledID).removeClass("switchmode");
      }
    } catch (err) {
      console.log(
        "SpecialPurposeCentralStart datachangeListener failed: " + err
      );
    }
  };
  SpecialPurposeCentralStart.prototype.datachangeListenerW2 = function (msg) {
    try {
      this.LEDValueW2 = GetAsBoolean(msg.value);
      if (!this.LEDValueW2) {
        $("#" + this.ledID2).removeClass("switchmode");
      }
    } catch (err) {
      console.log(
        "SpecialPurposeCentralStart datachangeListener failed: " + err
      );
    }
  };
  SpecialPurposeCentralStart.prototype.datachangeListenerW3 = function (msg) {
    try {
      this.LEDValueW3 = GetAsBoolean(msg.value);
      if (!this.LEDValueW3) {
        $("#" + this.ledID3).removeClass("switchmode");
      }
    } catch (err) {
      console.log(
        "SpecialPurposeCentralStart datachangeListener failed: " + err
      );
    }
  };
  emosWS.SpecialPurposeCentralStart = SpecialPurposeCentralStart;

  function CommandFeedback3WR4RD(
    parent,
    data,
    plc,
    writable,
    diagnosisWindow,
    myKey
  ) {
    this.parent = parent;
    this.data = data;
    this.plc = plc;
    this.writable = writable;
    this.myKey = myKey;
    this.diagnosisWindow = diagnosisWindow;
    this.positionClass = {
      L: {
        parent: this.diagnosisWindow.divTypes.LRLeft,
        css: "DiagnosisTextLed parentsbox noBottomBorder",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      R: {
        parent: this.diagnosisWindow.divTypes.LRRight,
        css: "DiagnosisTextLed parentsbox noBottomBorder",
        rectWidth: "100%",
        rectHeight: "20",
        writeRectX: "91%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.5%",
        ledY: "10",
        ledR: "7",
      },
      Long: {
        parent: this.diagnosisWindow.divTypes.Long,
        css: "DiagnosisTextLed parentsbox noBottomBorder",
        rectWidth: "97.5%",
        rectHeight: "20",
        writeRectX: "93.1%",
        writeRectY: "10",
        writeRectWidth: "20",
        ledX: "95.4%",
        ledY: "10",
        ledR: "7",
      },
    };
    this.parentDiv = this.parent.getDiv(
      this.positionClass[this.data.Position].parent
    );
    this.plctag = this.plc + "." + this.data.OPCID;
    this.writeLeft = this.plc + "." + this.data.writeTagWR3;
    this.writeMiddle = this.plc + "." + this.data.writeTagWR2;
    this.writeRight = this.plc + "." + this.data.writeTagWR1;
    this.read1 = this.plc + "." + this.data.readTagRD1;
    this.read2 = this.plc + "." + this.data.readTagRD2;
    this.read3 = this.plc + "." + this.data.readTagRD3;
    this.read4 = this.plc + "." + this.data.readTagRD4;
    this.led =
      this.led2 =
      this.led3 =
      this.text =
      this.LEDValue =
      this.LEDValue2 =
        null;
    this.ledID;
    this.ledID2;
    this.ledID3;
    DiagnosisElement.call(this, { data: data, writable: writable });
  }

  CommandFeedback3WR4RD.prototype = Object.create(DiagnosisElement.prototype);
  CommandFeedback3WR4RD.prototype.constructor = CommandFeedback3WR4RD;

  CommandFeedback3WR4RD.prototype.init = function () {
    try {
      var id = getElementGlobalID();
      var ledId = (this.ledID = getElementGlobalID());
      var ledId2 = (this.ledID2 = getElementGlobalID());
      var ledId3 = (this.ledID3 = getElementGlobalID());
      var textId = getElementGlobalID();
      var properties = this.positionClass[this.data.Position];
      this.panel = $(
        "<div class='" +
          properties.css +
          "' id='" +
          id +
          "'>" +
          "<span id='" +
          ledId +
          "' class='emosbutton halblinks " +
          this.data.leftIcon +
          "'></span>" +
          "<span id='" +
          ledId2 +
          "' class='emosbutton mitte " +
          this.data.middleIcon +
          "'></span>" +
          "<span id='" +
          ledId3 +
          "' class='emosbutton halbrechts " +
          this.data.rightIcon +
          "'></span>" +
          "<div class='textLed smallerText'>" +
          "<span id='" +
          textId +
          "'>" +
          this.data.Text +
          "</span>" +
          "</div><br class='cl'>" +
          "</div>"
      );
      this.panel[0].myData = this.data;
      this.panel[0].myData.writable = this.writable;
      this.panel[0].myKey = this.myKey;
      this.panel.appendTo(this.parentDiv);
      this.led = document.getElementById(ledId);
      this.led2 = document.getElementById(ledId2);
      this.led3 = document.getElementById(ledId3);
      this.text = document.getElementById(textId);
      emosWS.advise(
        this.read1,
        this.datachangeListener1.bind(this),
        "",
        emosWS.tagType.IO
      ); //open
      emosWS.advise(
        this.read2,
        this.datachangeListener2.bind(this),
        "",
        emosWS.tagType.IO
      ); //opening
      emosWS.advise(
        this.read3,
        this.datachangeListener4.bind(this),
        "",
        emosWS.tagType.IO
      ); //closing
      emosWS.advise(
        this.read4,
        this.datachangeListener3.bind(this),
        "",
        emosWS.tagType.IO
      ); // closed

      emosWS.sendAdviseText(
        this.diagnosisWindow.getTextPrefix() + this.data.TextID,
        "name",
        function (msg) {
          if (msg.value !== "") this.text.textContent = msg.value;
        }.bind(this),
        this
      );
      this.getWritable(this);
      if ($(this.parentDiv).children().length > 4) {
        $(this.parentDiv).addClass("higherDiv");
      }
    } catch (err) {
      console.log("CommandFeedback3WR4RD init failed: " + err);
    }
  };
  CommandFeedback3WR4RD.prototype.getWritable = function (self) {
    if (self.writable) {
      self.led.style.cursor = self.led2.style.cursor = "pointer";
      $("#" + self.ledID).addClass("writable");
      $("#" + self.ledID2).addClass("writable");
      $("#" + self.ledID3).addClass("writable");
      $("#" + self.ledID).on("click", function () {
        $(this).addClass("switchmode");
        emosWS.poke(self.writeLeft, "-1");
      });
      $("#" + self.ledID2).on("click", function () {
        $(this).addClass("switchmode");
        emosWS.poke(self.writeMiddle, "-1");
      });
      $("#" + self.ledID3).on("click", function () {
        $(this).addClass("switchmode");
        emosWS.poke(self.writeRight, "-1");
      });
    } else {
      $("#" + self.ledID).addClass("notwritable");
      $("#" + self.ledID2).addClass("notwritable");
      $("#" + self.ledID3).addClass("writable");
    }
  };
  CommandFeedback3WR4RD.prototype.updateWrite = function () {
    if (!emosWS.login.au.hasPaintShopRight(this.userRight)) {
      this.led.style.cursor =
        this.led2.style.cursor =
        this.led3.style.cursor =
          "pointer";
      this.led.style.pointerEvents =
        this.led2.style.pointerEvents =
        this.led3.style.pointerEvents =
          "auto";
      $("#" + this.ledID).removeClass("disabled");
      $("#" + this.ledID2).removeClass("disabled");
      $("#" + this.ledID3).removeClass("disabled");
      //            this.led.style.opacity = this.led2.style.opacity = this.led3.style.opacity = 1;
    } else {
      $("#" + this.ledID).addClass("disabled");
      $("#" + this.ledID2).addClass("disabled");
      $("#" + this.ledID3).addClass("disabled");
      this.led.style.cursor =
        this.led2.style.cursor =
        this.led3.style.cursor =
          "auto";
      this.led.style.pointerEvents =
        this.led2.style.pointerEvents =
        this.led3.style.pointerEvents =
          "none";
      //            this.led.style.opacity = this.led2.style.opacity = this.led3.style.opacity = 0.3;
    }
  };

  CommandFeedback3WR4RD.prototype.datachangeListener1 = function (msg) {
    try {
      this.LEDValue = GetAsBoolean(msg.value);
      var fillColor = colorList[this.LEDValue ? "G" : "O"];
      var removeColor = colorList[this.LEDValue ? "O" : "G"];
      if (this.LEDValue) {
        $("#" + this.ledID3)
          .addClass("onMode")
          .removeClass("offMode")
          .removeClass("switchmode");
        clearInterval(this.blinkInterval);
        $("#" + this.ledID2)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID4)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID5)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID6)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      } else if (
        this.LEDValue === false &&
        this.LEDValue1 === false &&
        this.LEDValue2 === false &&
        this.LEDValue3 === false
      ) {
        clearInterval(this.blinkInterval);
        $("#" + this.ledID2)
          .addClass("onMode")
          .removeClass("offMode")
          .removeClass("switchmode");
        $("#" + this.ledID)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID3)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID4)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
        $("#" + this.ledID5)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID6)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      }
      if (this.writable) {
        $("#" + this.ledID3)
          .addClass("writable")
          .removeClass("notwritable");
      } else {
        $("#" + this.ledID3)
          .addClass("notwritable")
          .removeClass("writable");
      }
    } catch (err) {
      console.log(
        "CommandFeedback3WR4RD datachangeListenerLeft failed: " + err
      );
    }
  };
  CommandFeedback3WR4RD.prototype.datachangeListener2 = function (msg) {
    try {
      var self = this;
      this.LEDValue1 = GetAsBoolean(msg.value);
      var fillColor = colorList[this.LEDValue1 ? "G" : "O"];
      var removeColor = colorList[this.LEDValue1 ? "O" : "G"];
      if (this.LEDValue1) {
        //                $('#' + this.ledID3).addClass('onModeAni').removeClass('onMode').removeClass('offMode').removeClass('switchmode');
        $("#" + this.ledID3)
          .removeClass("offMode")
          .removeClass("switchmode");
        clearInterval(this.blinkInterval);
        this.blinkInterval = setInterval(function () {
          $("#" + self.ledID3).toggleClass("onMode");
          $("#" + self.ledID6).toggleClass("green");
        }, 500);
        $("#" + this.ledID2)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID4)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID5)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
      } else if (
        this.LEDValue === false &&
        this.LEDValue1 === false &&
        this.LEDValue2 === false &&
        this.LEDValue3 === false
      ) {
        clearInterval(this.blinkInterval);
        $("#" + this.ledID2)
          .addClass("onMode")
          .removeClass("offMode")
          .removeClass("switchmode");
        $("#" + this.ledID)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID3)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID4)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
        $("#" + this.ledID5)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID6)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      }
      if (this.writable) {
        $("#" + this.ledID3)
          .addClass("writable")
          .removeClass("notwritable");
      } else {
        $("#" + this.ledID3)
          .addClass("notwritable")
          .removeClass("writable");
      }
    } catch (err) {
      console.log(
        "CommandFeedback3WR4RD datachangeListenerLeft failed: " + err
      );
    }
  };
  CommandFeedback3WR4RD.prototype.datachangeListener3 = function (msg) {
    try {
      this.LEDValue2 = GetAsBoolean(msg.value);
      var fillColor = colorList[this.LEDValue2 ? "G" : "O"];
      var removeColor = colorList[this.LEDValue2 ? "O" : "G"];
      if (this.LEDValue2) {
        clearInterval(this.blinkInterval);
        $("#" + this.ledID)
          .addClass("onMode")
          .removeClass("offMode")
          .removeClass("switchmode");
        $("#" + this.ledID2)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID3)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID6)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID5)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID4)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      } else if (
        this.LEDValue === false &&
        this.LEDValue1 === false &&
        this.LEDValue2 === false &&
        this.LEDValue3 === false
      ) {
        clearInterval(this.blinkInterval);
        $("#" + this.ledID2)
          .addClass("onMode")
          .removeClass("offMode")
          .removeClass("switchmode");
        $("#" + this.ledID)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID3)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID4)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
        $("#" + this.ledID5)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID6)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      }
      if (this.writable) {
        $("#" + this.ledID3)
          .addClass("writable")
          .removeClass("notwritable");
      } else {
        $("#" + this.ledID3)
          .addClass("notwritable")
          .removeClass("writable");
      }
    } catch (err) {
      console.log(
        "CommandFeedback3WR4RD datachangeListenerLeft failed: " + err
      );
    }
  };
  CommandFeedback3WR4RD.prototype.datachangeListener4 = function (msg) {
    try {
      this.LEDValue3 = GetAsBoolean(msg.value);
      var fillColor = colorList[this.LEDValue3 ? "G" : "O"];
      var removeColor = colorList[this.LEDValue3 ? "O" : "G"];
      var self = this;
      if (this.LEDValue3) {
        $("#" + this.ledID)
          .removeClass("offMode")
          .removeClass("switchmode");
        clearInterval(this.blinkInterval);
        this.blinkInterval = setInterval(function () {
          $("#" + self.ledID).toggleClass("onMode");
          $("#" + self.ledID4).toggleClass("green");
        }, 500);
        //                $('#' + this.ledID).addClass('onModeAni').removeClass('onMode').removeClass('offMode').removeClass('switchmode');
        $("#" + this.ledID2)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID3)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID5)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID6)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
      } else if (
        this.LEDValue === false &&
        this.LEDValue1 === false &&
        this.LEDValue2 === false &&
        this.LEDValue3 === false
      ) {
        clearInterval(this.blinkInterval);
        $("#" + this.ledID2)
          .addClass("onMode")
          .removeClass("offMode");
        $("#" + this.ledID)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID3)
          .removeClass("onMode")
          .addClass("offMode");
        $("#" + this.ledID4)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
        $("#" + this.ledID5)
          .addClass(removeColor)
          .removeClass(fillColor)
          .removeClass("orange");
        $("#" + this.ledID6)
          .addClass(fillColor)
          .removeClass(removeColor)
          .removeClass("orange");
      }
      if (this.writable) {
        $("#" + this.ledID3)
          .addClass("writable")
          .removeClass("notwritable");
      } else {
        $("#" + this.ledID3)
          .addClass("notwritable")
          .removeClass("writable");
      }
    } catch (err) {
      console.log(
        "CommandFeedback3WR4RD datachangeListenerLeft failed: " + err
      );
    }
  };
  emosWS.CommandFeedback3WR4RD = CommandFeedback3WR4RD;

  function HDiagnosisWindow(
    configuration,
    onReady,
    onAlarmReady,
    newParent,
    switcher
  ) {
    if (newParent) {
      this.newParent = newParent;
    } else {
      this.newParent = "#center";
    }
    this.onReady = onReady;
    this.onAlarmReady = onAlarmReady;
    this.switcher = switcher;
    this.listeners = {};
    this.requestId = configuration.id;
    this.DiagnosisLibID = configuration.DiagnosisLibID;
    this.PLCArray = configuration.PLC;
    this.PLC = Array.isArray(configuration.PLC)
      ? configuration.PLC[0]
      : configuration.PLC;
    this.ID = configuration.Tag;
    this.DiagnosisControl = configuration.DiagnosisControl;
    this.dc = this.DiagnosisControl;
    this.GroupRightIndex = configuration.GroupRightIndex;
    this.additionalClass = configuration.additionalClass
      ? configuration.additionalClass
      : "";
    this.myText = configuration.myText;
    this.Counter = configuration.myCounter ? configuration.myCounter : 0;
    this.headControls = configuration.HeadControls;
    this.Private = configuration.Private;
    this.Summary = configuration.Summary;
    this.childWindows = null;
    this.Enabled = true;
    this.divTypes = {
      None: 0,
      LRLeft: 1,
      LRRight: 2,
      Long: 3,
      LMRLeft: 4,
      LMRMiddle: 5,
      LMRRight: 6,
    };
    this.dataTypes = { Integer: 0, Real: 1 };
    this.windowData = null;
    this.childWindowsData = {};
    this.qualityGood = false;
    this.badQualityTagList = {};
    this.winName = "";
    this.OPCVersionID = "";
    this.OPCVersion = "";
    this.versionList = [];
    this.rootVersion = null;
    this.plcVersion = "";
    this.run = false;
    this.data = configuration.data;
    this.msg = configuration;
    this.specClass = "";
    if (this.data) {
      this.childWindows = this.data.childWindows;
      this.childWindowsData = this.data.childWindowsData;
      this.windowData = this.data.windowData;
      this.winName = this.data.winName;
    }
    this.diaheadId = getElementGlobalID();
    this.textPrefixList = { 1: "T01_", 3: "T03_", 5: "T05_" };
    this.PLCType = configuration.PLCType;
    this.initialize();
  }
  HDiagnosisWindow.prototype = Object.create(ADiagnosisWindow.prototype);
  HDiagnosisWindow.prototype.constructor = HDiagnosisWindow;
  HDiagnosisWindow.prototype.addEventListener = function (eventName, callback) {
    if (!this.listeners[eventName]) this.listeners[eventName] = [];
    this.listeners[eventName].push(callback);
  };

  HDiagnosisWindow.prototype.fireEvent = function (eventName) {
    var listeners = this.listeners[eventName];
    if (listeners) {
      listeners.forEach(function (listener) {
        try {
          listener();
        } catch (e) {
          console.error(e);
        }
      });
    }
  };
  HDiagnosisWindow.prototype.appendWindow = function (id) {
    try {
      this.myid = id;
      this.appendChildData();
      var self = this;
      var scrollLeft = getElementGlobalID();
      var scrollRight = getElementGlobalID();
      var scrollUp = getElementGlobalID();
      var scrollDown = getElementGlobalID();
      var footerHead = getElementGlobalID();
      var onclose = function () {
        var msg = { type: "DiagnosisWindowClosed", id: this.requestId };
        // Here send the requestId back to the HTML visual site
        //<HTMLVisualSite_Window>.postMessage(JSON.stringify(msg), "*");
      }.bind(this);
      var tmpmachine = this.ID.split("_");
      //            var anlage, machine;
      if (this.DiagnosisLibID === 2) {
        this.anlage = this.PLC;
        this.machine = this.ID;
      } else {
        this.anlage_part2 = tmpmachine[tmpmachine.length - 2]
          ? tmpmachine[tmpmachine.length - 2]
          : "";
        this.device = (
          tmpmachine[tmpmachine.length - 3]
            ? tmpmachine[tmpmachine.length - 3]
            : ""
        ).replace(".", "");
        this.anlage =
          (tmpmachine[tmpmachine.length - 3]
            ? tmpmachine[tmpmachine.length - 3] + "_"
            : "") +
          (tmpmachine[tmpmachine.length - 2]
            ? tmpmachine[tmpmachine.length - 2]
            : "");
        this.machine = tmpmachine[tmpmachine.length - 1]
          ? tmpmachine[tmpmachine.length - 1]
          : "";
      }
      var header;
      var headControl =
        !this.headControls || this.headControls !== "false"
          ? '<div class="diahead_right">' +
            '<ul class="dieahead_head">' +
            '<li class="copyTab emosbutton"></li>' +
            '<li class="arrangeTabs emosbutton"></li>' +
            '<li class="closeTabs emosbutton"></li>' +
            "</ul>" +
            "</div>"
          : "";
      if (
        this.additionalClass === "statusWelcome" ||
        this.additionalClass === "statusWelcome act"
      ) {
        header =
          '<div class="diahead_left"><span class="processname">Summaries</span></div>' +
          '<div class="diahead_right"><ul class="dieahead_head">' +
          '<li class="pin emosbutton ' +
          (this.additionalClass === "statusWelcome act" ? "act" : "") +
          '"></li></ul></div>';
        emosWS.sendAdviseText("Summaries", "name", function (msg) {
          if (msg)
            $("#center")
              .find(".statusWelcome")
              .find(".processname")
              .text(msg.value);
        });
      } else if (this.additionalClass === "privateOverlay") {
        header =
          '<div class="diahead_left"><span class="processname">' +
          this.myText +
          "</span></div>";
      } else {
        header =
          '<div class="diahead_left">' +
          '<span class="processname">' +
          this.machine +
          "</span>" +
          '<span class="partname">' +
          this.anlage +
          "</span>" +
          "</div>" +
          headControl +
          //                        '<div class="diahead_right">' +
          //                        '<ul class="dieahead_head">' +
          //                        '<li class="arrangeTabs emosbutton"></li>' +
          //                        '<li class="copyTab emosbutton"></li>' +
          //                        '<li class="closeTabs emosbutton"></li>' +
          //                        '</ul>' +
          //                        '</div>' +

          '<br class="cl" />';
      }
      var diaBody = $(
        '<div class ="diagnose ' +
          this.additionalClass +
          " " +
          this.Counter +
          '">' +
          '<div class="diahead" id="' +
          this.diaheadId +
          '">' +
          header +
          "</div>" +
          '<div class="DiagnosisContent" id="' +
          id +
          '">' +
          '<div class="DiagnoseBody" role="main"></div>' +
          "</div>" +
          //'<div class="DiagnosisFooter"><span class="scrollDown"></span><span class="scrollUp"></span></div>' +
          "</div>"
      );
      var footer = $(
        '<div class="DiagnosisFooter">' +
          '<span class="footerHead" id="' +
          footerHead +
          '"></span>' +
          '<span id="' +
          scrollLeft +
          '" class="scrollLeft"></span>' +
          '<span id="' +
          scrollRight +
          '" class="scrollRight"></span>' +
          '<span id="' +
          scrollUp +
          '" class="scrollUp"></span><span id="' +
          scrollDown +
          '" class="scrollDown active"></span>' +
          "</div>)"
      );
      if (this.dc.match(/.htm/)) {
        diaBody.addClass("apt");
      } else {
        footer.appendTo(diaBody);
      }

      var divs = diaBody.find(".DiagnoseBody");
      $(divs)[0].msg = self.msg;
      diaBody.appendTo(this.newParent);
      if (this.dc.match(/.htm/)) {
      } else {
        this.appendBody(divs);
      }

      this.fireEvent("UIReady");
      if (this.onReady) {
        this.onReady(this.switcher);
      }

      //Check and display if wrong version
      if (this.windowData) {
        var hasPLCVersion = false,
          showWrongVersion = function (versionIsWrong) {
            console.log("showWrongVersion: " + versionIsWrong);
            if (versionIsWrong) {
              $("#" + this.myid)
                .find(".diatabs ul li.Duerr")
                .addClass("alert");
              $(".diatabs ul div .scrollTabAlert").addClass("alert");
              $("#" + this.myid)
                .find(".plcversion")
                .addClass("versionerror");
              $("#" + this.myid)
                .find(".hmiversions")
                .addClass("versionerror");
            } else {
              $("#" + this.myid)
                .find(".diatabs ul li.Duerr")
                .removeClass("alert");
              $(".diatabs ul div .scrollTabAlert").removeClass("alert");
              $("#" + this.myid)
                .find(".plcversion")
                .removeClass("versionerror");
              $("#" + this.myid)
                .find(".hmiversions")
                .removeClass("versionerror");
            }
          }.bind(this);

        emosWS.advise(
          this.PLC + this.ID + "." + this.windowData.OPCVersionID,
          function (msg) {
            var version = msg.value;
            hasPLCVersion = true;
            
            this.PLCType = version.replace(/(.)..../, "$1");
            $("#" + this.myid)
              .find(".plcversion")
              .text(version.replace(/(.)(..)(..)/, "0$1 $2 $3"));
            showWrongVersion(
              version === "" ||
                this.windowData.Version === "" ||
                (version &&
                  this.windowData.Version &&
                  version.replace(/(.)(..)(..)/, "$2") !==
                    this.windowData.Version.replace(/(..)-(..)/, "$1"))
            );
          }.bind(this),
          ""
        );
        setTimeout(function () {
          if (!hasPLCVersion) showWrongVersion(true);
        }, 200);
      }
    } catch (err) {
      console.log("appendWindow failed: " + err);
    }
  };

  HDiagnosisWindow.prototype.appendHead = function (head) {
    try {
      var headData = this.windowData.Head;
      for (var key in headData) {
        var objectData = headData[key];
        if (typeof objectData === "object") {
          var objectType = DiagnosisCommon.getObjectType(key);
          switch (objectType) {
            case "TopTextLED":
              if (head.length > 0)
                new TopTextLED(head, objectData, this.PLC + this.ID, this);
              break;
            default:
              break;
          }
        }
      }
    } catch (err) {
      console.log("appendHead failed: " + err);
    }
  };

  HDiagnosisWindow.prototype.appendBody = function (body) {
    this.appendPageControl(body, this.windowData.PageControl);
  };

  HDiagnosisWindow.prototype.appendPageControl = function (parent, data) {
    try {
      new PageControl(parent, data, this);
      //$('.emosbutton').removeClass('ui-state-default ui-corner-top ui-tabs-active ui-state-active');
    } catch (err) {
      console.log("appendPageControl failed: " + err);
    }
  };

  HDiagnosisWindow.prototype.appendPage = function (
    parent,
    data,
    extra,
    visibleRight,
    tabid,
    tabs
  ) {
    try {
      var parent = parent;
      var data = data;
      var visibleRight = visibleRight;
      parent.LRLeft = null;
      parent.LRRight = null;
      parent.LRLong = null;
      parent.LMRLeft = null;
      parent.LMRMiddle = null;
      parent.LMRRight = null;
      parent.getDiv = function (divType) {
        switch (divType) {
          case this.divTypes.LRLeft:
            if (!parent.LRLeft) {
              var LRLeftId = getElementGlobalID();
              var pageBody = $(
                "<div class='DiagnosisLRLeft' id='" + LRLeftId + "'></div>"
              ); //<div class='more'></div>
              pageBody.appendTo(parent);
              //pageBody.appendTo($(parent).children('.rightPart'));
              parent.LRLeft = document.getElementById(LRLeftId);
              parent.LRLong = null;
            }
            return parent.LRLeft;
            break;
          case this.divTypes.LRRight:
            if (!parent.LRRight) {
              var LRRightId = getElementGlobalID();
              var pageBody = $(
                "<div class='Groupbox' id='" +
                  LRRightId +
                  "'><span class='emosbutton showhideblockbutton'></span></div>"
              ); //<div class='more'></div>
              pageBody.appendTo(parent);
              //pageBody.appendTo($(parent).children('.leftPart'));
              parent.LRRight = document.getElementById(LRRightId);
              parent.LRLong = null;
            }
            return parent.LRRight;
            break;
          case this.divTypes.Long:
            if (!parent.LRLong) {
              var LRLongId = getElementGlobalID();
              var LRLongHeadId = getElementGlobalID();
              var LRLongLeftId = getElementGlobalID();
              var LRLongRightId = getElementGlobalID();
              var pageBody = $(
                "<div class='Groupbox' id='" +
                  LRLongId +
                  "'><span class='emosbutton showhideblockbutton'></span><div id='" +
                  LRLongHeadId +
                  "'></div><div id='" +
                  LRLongLeftId +
                  "'></div><div id='" +
                  LRLongRightId +
                  "'></div></div>"
              ); //<div class='more'></div>
              pageBody.appendTo(parent);
              parent.LRLong = document.getElementById(LRLongHeadId);
              parent.LRLeft = document.getElementById(LRLongLeftId);
              parent.LRRight = document.getElementById(LRLongRightId);
              parent.LMRLeft = document.getElementById(LRLongLeftId);
              parent.LMRMiddle = document.getElementById(LRLongId);
              parent.LMRRight = document.getElementById(LRLongRightId);
            }
            return parent.LRLong;
            break;

          case this.divTypes.LMRLeft:
            if (!parent.LMRLeft) {
              var LMRLeftId = getElementGlobalID();
              var pageBody = $(
                "<div class='DiagnosisLMRLeft' id='" + LMRLeftId + "'></div>"
              ); //<div class='more'></div>
              pageBody.appendTo(parent);
              parent.LMRLeft = document.getElementById(LMRLeftId);
              parent.LRLong = null;
            }
            return parent.LMRLeft;
            break;
          case this.divTypes.LMRMiddle:
            if (!parent.LMRMiddle) {
              var LMRMiddleId = getElementGlobalID();
              var pageBody = $(
                "<div class='DiagnosisLMRMiddle' id='" +
                  LMRMiddleId +
                  "'></div>"
              ); //<div class='more'></div>
              pageBody.appendTo(parent);
              parent.LMRMiddle = document.getElementById(LMRMiddleId);
              parent.LRLong = null;
            }
            return parent.LMRMiddle;
            break;
          case this.divTypes.LMRRight:
            if (!parent.LMRRight) {
              var LMRRightId = getElementGlobalID();
              var pageBody = $(
                "<div class='DiagnosisLMRRight' id='" + LMRRightId + "'></div>"
              ); //<div class='more'></div>
              pageBody.appendTo(parent);
              parent.LMRRight = document.getElementById(LMRRightId);
              parent.LRLong = null;
            }
            return parent.LMRRight;
            break;
          case this.divTypes.Groupbox:
            //if (!parent.LRLong) {
            var GroupboxId = getElementGlobalID();
            var pageBody = $(
              "<div class='Groupbox' id='" +
                GroupboxId +
                "'><span class='emosbutton showhideblockbutton'></span></div>"
            ); //<div class='more'></div>
            pageBody.appendTo(parent);
            parent.LMRRight = document.getElementById(GroupboxId);
            parent.LRLong = document.getElementById(GroupboxId);
            parent.LRLeft = document.getElementById(GroupboxId);
            parent.LRRight = document.getElementById(GroupboxId);
            parent.LMRLeft = document.getElementById(GroupboxId);
            parent.LMRMiddle = document.getElementById(GroupboxId);

            return parent.LRLong;
            break;
          default:
            return null;
            break;
        }
      }.bind(this);

      var hasClass = function (element, cls) {
        return (" " + element.className + " ").indexOf(" " + cls + " ") > -1;
      };

      var updateView = function () {
        if (hasClass(parent.get(0), "DiagnosisPageBlank")) return;

        if (emosWS.login.au.hasPaintShopRight(visibleRight)) {
          //tabs.tabs("enable", tabid);
          //parent.show();
          if (
            !parent.hasClass("subsubpageOverlay") &&
            !parent.hasClass("subsubsubpageOverlay")
          ) {
            parent.get(0).style.display = "block";
          }
        } else {
          //tabs.tabs("disable", tabid);
          //parent.hide();
          parent.get(0).style.display = "none";
        }
      };

      //for (var key in data) {

      sortHashArray(data).forEach(
        function (key) {
          var elementData = data[key];
          if (elementData === "Messages") {
            //                    var tmpdiv = parent.parent().find(".addMess");
            //                    this.appendHead(tmpdiv);
          }

          if (typeof elementData === "object") {
            //var elementID = getElementGlobalID();
            var objectType = DiagnosisCommon.getObjectType(key);

            switch (objectType) {
              case "AlarmClient":
                new AlarmClient(
                  parent,
                  elementData,
                  this.PLCArray,
                  this.ID,
                  extra,
                  null,
                  this.onAlarmReady
                );
                break;
              case "ChronologyHistory":
                $(parent).attr("PLC", this.PLCArray, this.ID);
                break;
              case "AddText":
                elementData.Position = "L";
                new DiagnosisText(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddTextByte":
              case "AddString":
                elementData.Position = "L";
                new DiagnosisString(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextByteInput":
              case "AddStringInput":
                elementData.Position = "L";
                new DiagnosisString(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this,
                  key
                );
                break;
              case "AddStringLong":
                elementData.Position = "Long";
                new DiagnosisString(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this,
                  key
                );
                break;
              case "AddStringInputLong":
                elementData.Position = "Long";
                new DiagnosisString(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this,
                  key
                );
                break;
              case "AddStringFieldLong":
                elementData.Position = "Long";
                new DiagnosisStringField(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddTextLong":
              case "AddHeadLine":
                elementData.Position = "L";
                new DiagnosisText(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddTextLED":
                elementData.Position = "L";
                new DiagnosisTextLED(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextLEDLong":
                elementData.Position = "Long";
                new DiagnosisTextLED(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextInputLED":
                elementData.Position = "L";
                new DiagnosisTextLED(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this,
                  key
                );
                break;
              //case "AddTextInputLEDLong":
              case "AddTextLEDInputLong":
                elementData.Position = "Long";
                new DiagnosisTextLED(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this,
                  key
                );
                break;
              case "AddTextLEDNiveau":
                elementData.Position = "L";
                new DiagnosisTextLED(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this,
                  key
                );
                break;
              //                        case "AddTextByte":
              case "AddTextInteger":
              case "AddTextReal":
                elementData.Position = "L";
                new DiagnosisTextNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextIntegerLong":
              case "AddTextRealLong":
                elementData.Position = "Long";
                new DiagnosisTextNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this,
                  key
                );
                break;
              //                        case "AddTextByteInput":
              case "AddTextIntegerInput":
              case "AddTextRealInput":
              case "AddTextRealInputNiveau":
                elementData.Position = "L";
                new DiagnosisTextNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this,
                  key
                );
                break;
              case "AddTextIntegerInputLong":
              case "AddTextRealInputLong":
                elementData.Position = "Long";
                new DiagnosisTextNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this,
                  key
                );
                break;
              case "AddTextIntegerIntegerLong":
                elementData.Position = "Long";
                new DiagnosisTextNumberNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this.dataTypes.Integer,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextRealRealLong":
                elementData.Position = "Long";
                new DiagnosisTextNumberNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this.dataTypes.Real,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextIntegerIntegerInputLong":
                elementData.Position = "Long";
                new DiagnosisTextNumberNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this.dataTypes.Integer,
                  true,
                  this,
                  key
                );
                break;
              case "AddTextRealRealInputLong":
                elementData.Position = "Long";
                new DiagnosisTextNumberNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this.dataTypes.Real,
                  true,
                  this,
                  key
                );
                break;
              case "AddLEDTextIntegerLong":
              case "AddTextLEDIntegerLong":
              case "AddLEDTextRealLong":
                elementData.Position = "Long";
                new DiagnosisLedTextNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this,
                  key
                );
                //new DiagnosisString(parent, elementData, this.PLC + this.ID, false, this);
                break;
              case "AddLEDTextIntegerInputLong":
              case "AddTextLEDIntegerInputLong":
              case "AddLEDTextRealInputLong":
                elementData.Position = "Long";
                new DiagnosisLedTextNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this,
                  key
                );
                //new DiagnosisString(parent, elementData, this.PLC + this.ID, false, this);
                break;
              case "AddLEDTextRealRealLong":
                elementData.Position = "Long";
                new DiagnosisLedTextNumberNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  this
                );
                //new DiagnosisString(parent, elementData, this.PLC + this.ID, false, this);
                break;
              case "AddLEDTextRealRealInputLong":
                elementData.Position = "Long";
                new DiagnosisLedTextNumberNumber(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this
                );
                //new DiagnosisString(parent, elementData, this.PLC + this.ID, false, this);
                break;
              case "AddSpace":
                //new DiagnosisSpace(parent, elementData);
                break;
              case "AddSpaceLong":
                //elementData.Position = "Long";
                //new DiagnosisSpace(parent, elementData);
                break;
              case "AddBar":
                elementData.Position = "L";
                new DiagnosisBar(parent, elementData, this.PLC + this.ID, this);
                break;
              case "AddBitBar":
                elementData.Position = "L";
                new DiagnosisBitBar(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "CreateControlNetArray":
                elementData.Position = "Long";
                new DiagnosisControlNetArray(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddBrowserPage":
                elementData.Position = "Long";
                new DiagnosisBrowserPage(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddSetpointBar":
                elementData.Position = "L";
                new DiagnosisSetpointBar(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddSetpointRampBar":
                elementData.Position = "M";
                new DiagnosisSetpointRampBar(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );
                break;
              case "AddPageControl":
                new SubPageControl(
                  parent,
                  elementData,
                  this,
                  true,
                  this.plcVersion
                );
                if (parent.hasClass("Duerr")) {
                  var tmpdiv = parent.parent().find(".addMess");
                  this.appendHead(tmpdiv);
                  var tmpdiv1 = parent.parent().find(".addMess1");
                  this.appendHead(tmpdiv1);
                }
                break;
              case "AddDoubleTextLong":
                elementData.Position = "Long";
                // 04.12. do we need this?
                new DiagnosisDoubleText(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  this
                );

                break;
              case "AddTextOperatingCounterLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.Minute,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextOperatingCounterInputLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.Minute,
                  true,
                  this,
                  key
                );
                break;
              case "AddTextOperatingCounterLong":
              case "AddTextTimerLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.Second,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextOperatingCounterInputLong":
              case "AddTextTimerInputLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.Second,
                  true,
                  this,
                  key
                );
                break;
              case "AddTextSiemensDateLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.SiemensDate,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextSiemensDateInputLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.SiemensDate,
                  true,
                  this,
                  key
                );
                break;
              case "AddTextSiemensTimeLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.SiemensTimeOfDay,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextSiemensTimeInputLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.SiemensTimeOfDay,
                  true,
                  this,
                  key
                );
                break;
              case "AddTextSiemens_TIME_TimerLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.SiemensTime,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextSiemens_TIME_TimerInputLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.SiemensTime,
                  true,
                  this,
                  key
                );
                break;
              case "AddTextSiemens_S5TIME_TimerLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.SiemensS5Time,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextSiemens_S5TIME_TimerInputLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.SiemensS5Time,
                  true,
                  this,
                  key
                );
                break;
              case "AddTextSiemens_DATE_AND_TIME_TimerLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.SiemensDateAndTime,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextSiemens_DATE_AND_TIME_TimerInputLong":
                elementData.Position = "Long";
                new DiagnosisTextTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  timerTypes.SiemensDateAndTime,
                  true,
                  this,
                  key
                );
                break;
              case "AddTextDoubleTimerLong":
                elementData.Position = "Long";
                new DiagnosisTextDoubleTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextDoubleTimerInputLong":
                elementData.Position = "Long";
                new DiagnosisTextDoubleTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  true,
                  this,
                  key
                );
                break;
              case "AddTextDoubleTimerLongMin":
                elementData.Position = "Long";
                new DiagnosisTextDoubleTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  false,
                  this,
                  key
                );
                break;
              case "AddTextDoubleTimerInputLongMin":
                elementData.Position = "Long";
                new DiagnosisTextDoubleTimer(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  false,
                  true,
                  this,
                  key
                );
                break;

              case "AddChildWindow":
                elementData.Position = "Long";
                //$(parent).closest('.diagnose').find('.arrangeTabs').addClass('childWin');
                //new DiagnosisChildWindow(parent, elementData, this.PLC + this.ID, this);
                break;
              case "AddCommandFeedback1WR1RD":
              case "AddCommandFeedback2WR1RD":
              case "AddCommandFeedback2WR2RD":
                elementData.Position = "L";
                new CommandFeedback2WR2RD(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this,
                  key
                );
                break;
              case "AddShowExternalContent":
                elementData.Position = "L";
                new ShowExternalContent(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this,
                  key
                );
                break;
              case "AddControllerElement":
                elementData.Position = "L";
                new ControllerElement(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this,
                  key
                );
                break;
              case "AddCommandFeedback3WR4RD":
                elementData.Position = "L";
                new CommandFeedback3WR4RD(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this,
                  key
                );
                break;
              case "AddCommandFeedback1WR2RD":
                elementData.Position = "L";
                new CommandFeedback1WR2RD(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this,
                  key
                );
                break;
              case "AddSpecialPurposeCentralStart":
                elementData.Position = "L";
                new SpecialPurposeCentralStart(
                  parent,
                  elementData,
                  this.PLC + this.ID,
                  true,
                  this,
                  key
                );
                break;
              case "AddLine":
                var body = $("<div class='DiagnosisLine parentsbox'></div>");
                var parentDiv = parent.getDiv(this.divTypes.LRLeft);
                body.appendTo(parentDiv);
                break;
              default:
                new GeneralElement(parent, { Text: objectType }, this);
                break;
            }
          }
        }.bind(this)
      );

      updateView();

      emosWS.addEventListener("UserRight", updateView);
    } catch (err) {
      console.log("appendPage failed: " + err);
    }
  };

  HDiagnosisWindow.prototype.appendElement = function (parent, data) {
    try {
      var id = getElementGlobalID();
      var tabshtml = $("<div id='" + id + "'><ul></ul></div>");
      tabshtml.appendTo(parent);
      //var tabs = $("#" + id).tabs();
      var tabs = tabshtml.tabs();
      var ul = tabs.find("ul");
      //for (var key in data) {
      sortHashArray(data).forEach(
        function (key) {
          if (typeof data[key] === "object") {
            var tabID = id + key;
            $("<li><a href='#" + tabID + "'>" + tabID + "</a></li>").appendTo(
              ul
            );
            var tab = $("<div id='" + tabID + "'></div>");
            tab.appendTo(tabs);
            this.appendElement(tab, data[key]);
          } else {
            $("<p>" + key + " = " + data[key] + "</p>").appendTo(tabs);
          }
        }.bind(this)
      );
      tabs.tabs("refresh");
    } catch (err) {
      console.log("appendElement failed: " + err);
    }
  };

  HDiagnosisWindow.prototype.doCondition = function () {
    try {
      if (this.data) {
        this.startAnimate();
        this.buildSubMenueForChildWin();
      } else {
        if (jsonFile) {
          //NEW: get data object by json: getStatusWindowData (at function.js)
          var self = this;
          getStatusWindowData(
            this.DiagnosisLibID,
            this.DiagnosisControl,
            this.PLC,
            this.ID,
            function (data) {
              self.windowData = data.windowData;
              self.winName = data.windowData.Name;
              self.PLCType = data.PLCType;
              self.startAnimate();
            }
          );
        } else {
          //OLD: get data object at WebSocker Server
          this.adviseDiagnosisData(
            this.DiagnosisControl,
            this.startAnimate.bind(this)
          );
        }
      }
    } catch (err) {
      console.log("HDiagnosisWindow doCondition failed: " + err);
    }
  };

  HDiagnosisWindow.prototype.buildSubMenueForChildWin = function () {
    try {
      if (this.childWindows) {
        $(".copyTab ").addClass("hasChild");
        var myData = this.data.childWindowsData;
        var menulines = [];
        menulines.push("<li class='sub'>duplicate this Window</li>");
        $.each(this.childWindows, function (key, val) {
          if (myData[val]) {
            menulines.push(
              "<li id='c" +
                myData[val].TextID +
                "' class='sub' data-obj='" +
                val +
                "'>" +
                myData[val].Comment +
                " - " +
                myData[val].TextID +
                "</li>"
            );
            emosWS.sendAdviseText(myData[val].TextID, "name", function (msg) {
              var id = msg.tag.replace(".name", "");
              var text = $("#c" + id)
                .text()
                .replace(id, msg.value);
              $("#c" + id).text(text);
            });
          }
        });
        $("<ul/>", {
          class: "subMenu",
          html: menulines.join(""),
        }).appendTo("#" + this.diaheadId);
      }
    } catch (err) {
      console.log("buildSubMenueForChildWin: " + err);
    }
  };
  HDiagnosisWindow.prototype.startAnimate = function () {
    if (!this.run) {
      var id = getElementGlobalID();
      this.appendWindow(id);
      //            this.createDiagnosisWindow();  //geÃ¤ndert um ein leeres Window ausliefern zu kÃ¶nnen

      this.run = true;
    }
  };

  HDiagnosisWindow.prototype.initialize = function () {
    try {
      this.doCondition();
    } catch (err) {
      console.log("HDiagnosisWindow initialize failed: " + err);
    }
  };

  emosWS.HTMLDiagnosisWindow = HDiagnosisWindow;
  /**
   * Provides HMI animation library
   * @module emosWS/visual
   */
  var privateCallback;

  /*
   * Copyright (c) 2014 Duerr Systems GmbH. All rights reserved.
   *
   */

  function EmosAlarm(placeholderName, configuration) {
    //var self = this;
    this.placeholderName = placeholderName;
    //this.tableID = "#" + placeholderName;
    this.configuration = configuration;
    this.table = null;

    this.headerList = [
      ["T04_Time.name", "dateTime"],
      ["T04_AlarmServer.name", "alarmServer"],
      ["T04_AlarmGroup.name", "alarmGroup"],
      ["T04_Type.name", "alarmType"],
      ["T04_Field.name", "location"],
      ["T04_ClassID.name", "classID"],
      ["T04_Priority.name", "priority"],
      ["T04_Text.name", "alarmText"],
      ["T04_Tagname.name", "tagname"],
      ["T04_Duration.name", "duration"],
    ];

    this.data = [];
    this.headerCells = [];

    this.dataLength = 0;
    this.typeIndex = this.indexOfAHeader("T04_Type.name");
    this.classIDIndex = this.indexOfAHeader("T04_ClassID.name");
    this.tagnameIndex = this.indexOfAHeader("T04_Tagname.name");
    this.typeIndex = this.indexOfAHeader("T04_Type.name");
    this.updateJob = null;
    this.updateBusy = false;
    this.otable = null;

    $.fn.dataTableExt.oApi.fnAddDataAndDisplay = function (oSettings, aData) {
      /* Add the data */
      var iAdded = this.oApi._fnAddData(oSettings, aData);
      var nAdded = oSettings.aoData[iAdded].nTr;

      /* Need to re-filter and re-sort the table to get positioning correct, not perfect
       * as this will actually redraw the table on screen, but the update should be so fast (and
       * possibly not alter what is already on display) that the user will not notice
       */
      this.oApi._fnReDraw(oSettings);

      /* Find it's position in the table */
      var iPos = -1;
      for (var i = 0, iLen = oSettings.aiDisplay.length; i < iLen; i++) {
        if (oSettings.aoData[oSettings.aiDisplay[i]].nTr === nAdded) {
          iPos = i;
          break;
        }
      }

      /* Get starting point, taking account of paging */
      if (iPos >= 0) {
        oSettings._iDisplayStart =
          Math.floor(i / oSettings._iDisplayLength) * oSettings._iDisplayLength;
        this.oApi._fnCalculateEnd(oSettings);
      }

      this.oApi._fnDraw(oSettings);
      return {
        nTr: nAdded,
        iPos: iAdded,
      };
    };
  }

  EmosAlarm.prototype.indexOfAHeader = function (aHeader) {
    for (var i = 0, len = this.headerList.length; i < len; i++) {
      if (this.headerList[i][0] === aHeader) {
        return i;
      }
    }
    return -1;
  };
  EmosAlarm.prototype.empty = function () {
    this.otable.fnClearTable();
  };

  EmosAlarm.prototype.update = function (msg, param) {
    try {
      var self = param;
      if (msg.type === "alarmText" && msg.tagname !== "internal") {
        switch (msg.alarmType) {
          case "3RTN":
          case "2ACK":
            var datas = self.otable.fnGetData();

            for (var i = 0, len = datas.length; i < len; i++) {
              if (datas[i][self.tagnameIndex] === msg.tagname) {
                self.otable.fnDeleteRow(i);
                break;
              }
            }
            if (msg.alarmType === "3RTN") break;

          default:
            var newDate = self.getLocalTime(msg.date, msg.time);
            msg.date = newDate[0];
            msg.time = newDate[1];
            msg.dateTime = msg.date + " " + msg.time;
            msg.beginTime = self.convertToTimestamp(msg.date, msg.time);
            msg.duration = self.convertToDate(msg.beginTime);
            self.dataLength++;
            msg.id = self.dataLength;

            self.data.unshift(msg);
            var msgData = [];
            for (var i = 0, len = self.headerList.length; i < len; i++) {
              msgData[i] = msg[self.headerList[i][1]];
            }

            self.otable.fnAddData(msgData);
            break;
          //otable.fnAddDataAndDisplay(msgData);
        }
      } else if (msg.type === "dataChange") {
        var headerIndex = self.indexOfAHeader(msg.tag);
        if (headerIndex >= 0)
          self.headerCells[headerIndex].innerHTML = msg.value;
      }
    } catch (err) {
      console.log("update() failed: " + err);
    }
  };
  EmosAlarm.prototype.updateAlarmList = function () {
    var duration = 5000;
    var self = this;
    this.updateJob = setInterval(function () {
      if (!self.updateBusy) {
        self.updateBusy = true;
        var rows = self.table.getElementsByTagName("tr");
        for (var i = 1; i < rows.length; i++) {
          var cells = rows[i].getElementsByTagName("td");
          cells[cells.length - 1].innerHTML = convertToDate(
            self.data[i - 1].beginTime
          );
        }
        self.updateBusy = false;
      }
    }, duration);
  };

  EmosAlarm.prototype.convertToTimestamp = function (date, time) {
    try {
      if (date === "") {
        return "";
      }

      var dateList = date.split("-");
      var timeList = time.split(":");
      var secondList = timeList[2].split(",");
      return new Date(
        dateList[1] +
          "/" +
          dateList[2] +
          "/" +
          dateList[0] +
          " " +
          timeList[0] +
          ":" +
          timeList[1] +
          ":" +
          secondList[0]
      ).getTime();
      return new Date(date + " " + time);
    } catch (err) {
      console.log("convertToTime() failed: " + err);
    }
  };
  EmosAlarm.prototype.getLocalTime = function (date, time) {
    try {
      if (date === "") {
        return ["", ""];
      }

      var dateList = date.split(".");
      var timeList = time.split(":");
      var secondList = timeList[2].split(",");
      var newDate = new Date(
        dateList[1] +
          "/" +
          dateList[0] +
          "/" +
          dateList[2] +
          " " +
          timeList[0] +
          ":" +
          timeList[1] +
          ":" +
          secondList[0] +
          " UTC"
      );
      var iDate = newDate.getDate();
      iDate = iDate < 10 ? "0" + iDate : iDate;
      var iMonth = newDate.getMonth() + 1;
      iMonth = iMonth < 10 ? "0" + iMonth : iMonth;
      var iHours = newDate.getHours();
      iHours = iHours < 10 ? "0" + iHours : iHours;
      var iMinutes = newDate.getMinutes();
      iMinutes = iMinutes < 10 ? "0" + iMinutes : iMinutes;
      var iSeconds = newDate.getSeconds();
      iSeconds = iSeconds < 10 ? "0" + iSeconds : iSeconds;
      var oDate = newDate.getFullYear() + "-" + iMonth + "-" + iDate;
      var oTime =
        iHours + ":" + iMinutes + ":" + iSeconds + "," + secondList[1];
      return [oDate, oTime];
    } catch (err) {
      console.log("getLocalTime() failed: " + err);
    }
  };

  EmosAlarm.prototype.render = function () {
    try {
      var self = this;
      this.table = document.getElementById(this.placeholderName);

      var row = this.table.createTHead().insertRow();
      row.className = "alarmTable header";
      for (var i = 0, len = this.headerList.length; i < len; i++) {
        row.insertCell().innerHTML = this.headerList[i][0];
      }
      this.headerCells = row.getElementsByTagName("td");

      $("#" + this.placeholderName + " tbody tr").live("click", function () {
        var sTitle = "";
        var nTds = $("td", this);

        sTitle +=
          "Time:   \t" +
          $(nTds[self.indexOfAHeader("T04_Time.name")]).text() +
          "\n";
        sTitle +=
          "Text:   \t" +
          $(nTds[self.indexOfAHeader("T04_Text.name")]).text() +
          "\n";
        sTitle +=
          "Tagname:\t" +
          $(nTds[self.indexOfAHeader("T04_Tagname.name")]).text() +
          "\n";

        alert(sTitle);
      });

      this.otable = $("#" + this.placeholderName).dataTable({
        sScrollY: "400px",
        oLanguage: {
          sSearch: "Search all columns:",
        },
        fnCreatedRow: function (nRow, aData, iDataIndex) {
          switch (aData[self.classIDIndex]) {
            //switch (aData[self.typeIndex]) {
            case "1":
              $(nRow).addClass(
                aData[self.typeIndex] === "1NEW"
                  ? "alarmTable alarmnew"
                  : "alarmTable alarmack"
              );
              break;
            case "2":
              $(nRow).addClass(
                aData[self.typeIndex] === "1NEW"
                  ? "alarmTable warningnew"
                  : "alarmTable warningack"
              );
              break;

            default:
              $(nRow).addClass(
                aData[self.typeIndex] === "1NEW"
                  ? "alarmTable othernew"
                  : "alarmTable otherack"
              );
              break;
          }
        },
        aaSorting: [[0, "dsc"]],
      });

      var localTable = this.otable;
      var asInitVals = new Array();

      $("tfoot input").keyup(function () {
        localTable.fnFilter(this.value, $("tfoot input").index(this));
      });

      $("tfoot input").each(function (i) {
        asInitVals[i] = this.value;
      });

      $("tfoot input").focus(function () {
        if (this.className == "search_init") {
          this.className = "";
          this.value = "";
        }
      });

      $("tfoot input").blur(function (i) {
        if (this.value == "") {
          this.className = "search_init";
          this.value = asInitVals[$("tfoot input").index(this)];
        }
      });
    } catch (err) {
      console.log("Alarm render failed: " + err);
    }
  };
  EmosAlarm.prototype.convertToDate = function (time) {
    try {
      if (time === "") {
        return "";
      }
      var current = new Date().getTime();
      var totalSec = parseInt((current - time) / 1000);
      var days = parseInt(totalSec / 86400);
      var hours = parseInt(totalSec / 3600) % 24;
      var minutes = parseInt(totalSec / 60) % 60;
      var seconds = totalSec % 60;
      //return days + ":" + hours + ":" + minutes + ":" + seconds;
      return (
        days +
        ":" +
        (hours < 10 ? "0" + hours : hours) +
        ":" +
        (minutes < 10 ? "0" + minutes : minutes) +
        ":" +
        (seconds < 10 ? "0" + seconds : seconds)
      );
    } catch (err) {
      console.log("convertToDate() failed: " + err);
    }
  };

  emosWS.EmosAlarm = EmosAlarm;

  /**
   * Manages a HTML object inserted inside SVG Object DOM (when browser supported, e.g. Chrome, Firefox)
   * or fall-back to HTML DOM if not supported (e.g IE)
   * @class
   * @alias ForeignObject
   * @memberof ui
   * @param {Object} configuration - login configuration
   */
  function ForeignObject(configuration) {
    this.placeholderVisible =
      typeof configuration.placeholderVisible === "undefined"
        ? false
        : configuration.placeholderVisible;
    this.targetId = configuration.uiID;
    this.name = configuration.name || this.targetId;
    this.id = this.targetId + "_div";
    this.elementId = this.getElementId();
    this.placeHolder = getSVGElement(this.targetId);
    if (this.placeHolder) {
      this.width = this.placeHolder.getAttribute("width");
      this.height = this.placeHolder.getAttribute("height");
      this.x = this.placeHolder.getAttribute("x");
      this.y = this.placeHolder.getAttribute("y");
    }
    this.divElement = null;
    this.divJElement = null;
    this.element = null;
    this.isSVGForeignObject =
      this.useHTMLElement && emosWS.attr.supportForeignObject;
    this.render();
  }

  /**
   * Render element
   * @returns {undefined}
   */
  ForeignObject.prototype.render = function () {
    try {
      if (!this.isSVGForeignObject) {
        //Browser does not support SVG foreignObject

        //create a rect with same group dimension inside group
        var rect = document.createElementNS(
          "http://www.w3.org/2000/svg",
          "rect"
        );
        this.placeHolder.appendChild(rect);
        rect.setAttribute("width", this.width);
        rect.setAttribute("height", this.height);
        rect.setAttribute("x", this.x);
        rect.setAttribute("y", this.y);
        var display = this.placeHolder.style.display;
        this.placeHolder.style.display = "block";

        //create html element to replace the svg placeholder group
        var $element = $(
          '<div class="PlaceHolder" id="' + this.id + '"></div>'
        );
        $("body").append($element);
        this.divElement = document.getElementById(this.id);
        this.divJElement = $("#" + this.id);
        this.divElement.style["display"] = display;
        this.placeHolder.style.visibility =
          display === "none" ? "hidden" : "visible";
        this.divJElement = $("#" + this.id);
        var shape = emosWS.shapes[this.targetId];
        if (shape) {
          shape.shape = this.divElement;
        }

        this.renderMore();

        if (!this.placeholderVisible) this.hidePlaceHolder();

        var self = this;

        var onResize = function () {
          self.onResize();
        };

        if (window.attachEvent) {
          window.attachEvent("onresize", onResize);
        } else if (window.addEventListener) {
          window.addEventListener("resize", onResize, true);
        }

        onResize();
      } else {
        //Browser supportSVG foreignObject
        var foreign = document.createElementNS(
          "http://www.w3.org/2000/svg",
          "foreignObject"
        );
        setTimeout(function () {
          if (foreign.parentNode.style.visibility !== "")
            foreign.setAttribute(
              "style",
              "visibility: " + foreign.parentNode.style.visibility
            );
        }, 500);
        var body = document.createElementNS(
          "http://www.w3.org/1999/xhtml",
          "body"
        );
        body.setAttribute("style", "margin:0; width:100%; height:100%");
        foreign.appendChild(body);
        foreign.setAttribute("width", this.width);
        foreign.setAttribute("height", this.height);
        foreign.setAttribute("x", this.x);
        foreign.setAttribute("y", this.y);
        foreign.setAttribute("id", this.targetId);
        foreign.setAttribute("display", this.placeHolder.style.display);
        this.placeHolder.parentNode.replaceChild(foreign, this.placeHolder);
        var shape = emosWS.shapes[this.targetId];
        if (shape) {
          shape.shape = foreign;
        }
        this.divElement = body;

        this.renderMore();
      }
      window[this.name] = this.element;
      emosWS.addLanguageChangeListener(
        function (languageID) {
          this.onLanguage(languageID);
        }.bind(this)
      );
    } catch (e) {
      console.log("ForeignObject render failed: " + e);
    }
  };

  /**
   * Render more
   * @abstract
   */
  ForeignObject.prototype.renderMore = function () {};

  /**
   * Check if element inside the viewport
   * @param {Object} el - element to check
   * @returns {Boolean} - whether the element is inside the viewport
   */
  ForeignObject.prototype.elementInViewport = function (el) {
    var top = el.offsetTop;
    var left = el.offsetLeft;
    var width = el.offsetWidth;
    var height = el.offsetHeight;

    while (el.offsetParent) {
      el = el.offsetParent;
      top += el.offsetTop;
      left += el.offsetLeft;
    }

    return (
      top >= window.pageYOffset &&
      left >= window.pageXOffset &&
      top + height <= window.pageYOffset + window.innerHeight &&
      left + width <= window.pageXOffset + window.innerWidth
    );
  };

  /**
   * Set style to an object
   * @param {Object} o - object to set
   */
  ForeignObject.prototype.setStyle = function (o) {
    if (this.isSVGForeignObject) {
      o.style.width = "100%";
      o.style.height = "100%";
    } else {
      o.setAttribute("class", "ForeignObject");
    }
  };

  /**
   * Handlers on resize event
   */
  ForeignObject.prototype.onResize = function () {
    try {
      var bound = this.placeHolder.getBoundingClientRect();
      this.divElement.style.top = bound.top + "px";
      this.divElement.style.left = bound.left + "px";
      this.divElement.style.width = bound.width - 1 + "px";
      this.divElement.style.height = bound.height - 1 + "px";
      var factor = bound.width / this.width;
      if (this.element) this.element.style.fontSize = factor + "em";
      this.onResizeMore();
    } catch (e) {
      console.log("ForeignObject onResize failed: " + e);
    }
  };

  /**
   * Handlers on language event
   * @abstract
   */
  ForeignObject.prototype.onLanguage = function (languageID) {};

  /**
   * 2nd Handler on resize event
   * @abstract
   */
  ForeignObject.prototype.onResizeMore = function () {};

  /**
   * Get id of element
   * @returns {String} - id of element
   */
  ForeignObject.prototype.getElementId = function () {
    return this.targetId + "_" + this.constructor.name;
  };

  /**
   * Hide the place holder element
   */
  ForeignObject.prototype.hidePlaceHolder = function () {
    this.placeHolder.setAttribute("visibility", "hidden");
  };

  /**
   * Get the element
   * @returns {Element} - the element
   */
  ForeignObject.prototype.getElement = function () {
    return this.isSVGForeignObject
      ? getSVGElement(this.elementId)
      : document.getElementById(this.elementId);
  };

  emosWS.ForeignObject = ForeignObject;

  function AlarmFilterReport(configuration) {
    this.wrapperCSS = this.wrapperCSS || "AlarmFilterWrapper";
    this.tableCSS = this.tableCSS || "AlarmFilterReport";
    this.placeholderID = configuration.uiID;
    this.alarmGroup = configuration.Advise_AlarmGroup;
    this.useSingleLine = configuration.Display_SingleLine;
    this.dateWidth = configuration.Width01_Date;
    this.timeWidth = configuration.Width02_Time;
    this.alarmServerWidth = configuration.Width03_AlarmServer;
    this.alarmGroupWidth = configuration.Width04_AlarmGroup;
    this.groupAliaseWidth = configuration.Width05_GroupAlias;
    this.typeWidth = configuration.Width06_Type;
    this.fieldWidth = configuration.Width07_Field;
    this.classWidth = configuration.Width08_Class;
    this.priorityWidth = configuration.Width09_Priority;
    this.textWidth = configuration.Width10_Text;
    this.tagWidth = configuration.Width11_Tagname;
    this.durationWidth = configuration.Width12_Duration;
    this.alarmNewTextColor = configuration.Color01_AlmNewText;
    this.alarmNewBGColor = configuration.Color02_AlmNewBkgr;
    this.alarmAckTextColor = configuration.Color03_AlmAckText;
    this.alarmAckBGColor = configuration.Color04_AlmAckBkgr;
    this.warnNewTextColor = configuration.Color05_WrnNewText;
    this.warnNewBGColor = configuration.Color06_WrnNewBkgr;
    this.warnAckTextColor = configuration.Color07_WrnAckText;
    this.warnAckBGColor = configuration.Color08_WrnAckBkgr;
    this.otherNewTextColor = configuration.Color09_OthNewText;
    this.otherNewBGColor = configuration.Color10_OthNewBkgr;
    this.otherAckTextColor = configuration.Color11_OthAckText;
    this.otherAckBGColor = configuration.Color12_OthAckBkgr;
    this.useBold = configuration.Display_BoldFont;
    this.filterClass = configuration.Filter_Class;
    this.filterPrioFrom = configuration.Filter_PriorityFrom;
    this.filterPrioTo = configuration.Filter_PriorityTo;
    this.columnsSize = [
      configuration.Width01_Date,
      configuration.Width02_Time,
      configuration.Width03_AlarmServer,
      configuration.Width04_AlarmGroup,
      configuration.Width05_GroupAlias,
      configuration.Width06_Type,
      configuration.Width07_Field,
      configuration.Width08_Class,
      configuration.Width09_Priority,
      configuration.Width10_Text,
      configuration.Width11_Tagname,
      configuration.Width12_Duration,
    ];

    var totalwidth = 0;
    for (var i = 0, len = this.columnsSize.length; i < len; i++) {
      totalwidth += this.columnsSize[i];
    }
    for (var i = 0, len = this.columnsSize.length; i < len; i++) {
      this.columnsSize[i] = parseInt((this.columnsSize[i] / totalwidth) * 100);
    }
    this.texIDList = {
      date: "T04_Date",
      time: "T04_Time",
      alarmServer: "T04_AlarmServer",
      alarmGroup: "T04_AlarmGroup",
      alias: "T04_AlarmAlias",
      alarmType: "T04_Type",
      location: "T04_Field",
      classID: "T04_ClassID",
      priority: "T04_Priority",
      alarmText: "T04_Text",
      tagname: "T04_Tagname",
      duration: "T04_Duration",
    };
    this.columns = [
      "date",
      "time",
      "alarmServer",
      "alarmGroup",
      "alias",
      "alarmType",
      "location",
      "classID",
      "priority",
      "alarmText",
      "tagname",
      "duration",
    ];
    this.commandText = {
      T04_Acknowledge: "",
    };
    this.alarmTable = { object: null, id: null };
    ForeignObject.call(this, configuration);
    ESAnimation.call(this);
  }
  AlarmFilterReport.prototype = Object.create(ForeignObject.prototype);
  AlarmFilterReport.prototype = emosWS.fn.emosExtend(
    AlarmFilterReport.prototype,
    ESAnimation.prototype
  );
  AlarmFilterReport.prototype.constructor = AlarmFilterReport;
  AlarmFilterReport.prototype.initializeMore = function () {
    this.adviseData();
  };
  AlarmFilterReport.prototype.renderMore = function () {
    this.createCSS();
    this.createTable();
    this.adviseText();
  };
  AlarmFilterReport.prototype.createCSS = function () {
    var style = document.createElement("style");
    style.type = "text/css";
    style.innerHTML =
      "\
            .alarmTable.alarmnew tr, .alarmTable.alarmnew td{\n\
                background-color:" +
      this.alarmNewBGColor +
      ";\n\
                color:" +
      this.alarmNewTextColor +
      ";\n\
                white-space: nowrap;\n\
                overflow: hidden;\n\
            }\n\
            .alarmTable.alarmack tr, .alarmTable.alarmack td{\n\
                background-color:" +
      this.alarmAckBGColor +
      ";\n\
                color:" +
      this.alarmAckTextColor +
      ";\n\
                white-space: nowrap;\n\
                overflow: hidden;\n\
            }\n\
            .alarmTable.warningnew tr, .alarmTable.warningnew td{\n\
                background-color:" +
      this.warnNewBGColor +
      ";\n\
                color:" +
      this.warnNewTextColor +
      ";\n\
                white-space: nowrap;\n\
                overflow: hidden;\n\
            }\n\
            .alarmTable.warningack tr, .alarmTable.warningack td{\n\
                background-color:" +
      this.warnAckBGColor +
      ";\n\
                color:" +
      this.warnAckTextColor +
      ";\n\
                white-space: nowrap;\n\
                overflow: hidden;\n\
            }\n\
            .alarmTable.othernew tr, .alarmTable.othernew td{\n\
                background-color:" +
      this.otherNewBGColor +
      ";\n\
                color:" +
      this.otherNewTextColor +
      ";\n\
                white-space: nowrap;\n\
                overflow: hidden;\n\
            }\n\
            .alarmTable.otherack tr, .alarmTable.otherack td{\n\
                background-color:" +
      this.otherAckBGColor +
      ";\n\
                color:" +
      this.otherAckTextColor +
      ";\n\
                white-space: nowrap;\n\
                overflow: hidden;\n\
            }\n\
            ";
    document.getElementsByTagName("head")[0].appendChild(style);
  };

  AlarmFilterReport.prototype.createTable = function () {
    this.alarmTable.id = getElementGlobalID();
    var s =
      '<div class="' +
      this.wrapperCSS +
      '" id="' +
      this.elementId +
      '">\n\
            <table border="0" class="' +
      this.tableCSS +
      '" id="' +
      this.alarmTable.id +
      '">';
    for (var i = 0, len = this.columns.length; i < len; i++)
      s += '<col style="width:' + this.columnsSize[i] + '%">';
    s += "</table></div>";
    var $table = $(s);
    this.divJElement.append($table);
    this.element = document.getElementById(this.elementId);
    this.table = document.getElementById(this.alarmTable.id);
    this.createTableHeader();
  };

  AlarmFilterReport.prototype.createTableHeader = function () {
    try {
      var row = this.table.createTHead().insertRow();
      row.className = "AlarmFilterHeader";
      row.myCells = {};
      for (var a in this.texIDList) {
        var cell = row.insertCell();
        cell.innerHTML = this.texIDList[a];
        row.myCells[this.texIDList[a] + ".name"] = cell;

        emosWS.sendAdviseText(this.texIDList[a], "name", function (msg) {
          row.myCells[msg.tag].innerHTML = msg.value;
        });
      }
    } catch (err) {
      console.log("createTableHeader() failed: " + err);
    }
  };

  AlarmFilterReport.prototype.validateMsg = function (msg) {
    try {
      if (msg.type !== "alarmText" || msg.tagname === "internal") return false;

      var classID = parseInt(msg.classID);
      var priority = parseInt(msg.priority);
      if (
        this.filterPrioFrom[classID] > priority ||
        this.filterPrioTo[classID] < priority
      )
        return false;

      msg.newClassID = this.filterClass[classID];
      return true;
    } catch (err) {
      console.log("validateMsg() failed: " + err);
    }
  };

  AlarmFilterReport.prototype.adviseText = function () {
    try {
      var self = this;
      for (var id in this.commandText) {
        emosWS.sendAdviseText(id, "name", function (msg) {
          var textID = msg.tag.split(".name")[0];
          if (textID) {
            self.commandText[textID] = msg.value;
            //console.log("textID: " + msg.tag + " : " + self.commandText[textID]);
          }
        });
      }
    } catch (err) {
      console.log("adviseText() failed: " + err);
    }
  };

  AlarmFilterReport.prototype.adviseData = function () {
    try {
      var self = this;
      emosWS.sendAdviseAlarmText(
        this.alarmGroup,
        emosWS.getLanguage(),
        function (msg) {
          if (self.validateMsg(msg)) self.updateTable(msg);
        }
      );
    } catch (err) {
      console.log("adviseData() failed: " + err);
    }
  };

  AlarmFilterReport.prototype.updateTable = function (msg) {
    try {
      //delete corresponding tagname, then add new one
      var rows = this.table.rows;
      for (var i = 1; i < rows.length; i++) {
        var myMsg = rows[i].myMsg;
        if (myMsg.tagname === msg.tagname) {
          this.table.deleteRow(i);
          break;
        }
      }
      this.addRow(msg, 1);
      //console.log("Table rows: " + (this.table.rows.length - 1));
    } catch (err) {
      console.log("updateTable() failed: " + err);
    }
  };

  AlarmFilterReport.prototype.addRow = function (msg, index) {
    try {
      if (msg) {
        if (msg.alarmType !== "3RTN") {
          var row = this.table.insertRow(index);
          row.myMsg = msg;
          var classname = "";
          switch (msg.newClassID) {
            case 0:
              classname =
                msg.alarmType === "1NEW"
                  ? "alarmTable alarmnew"
                  : "alarmTable alarmack";
              break;
            case 1:
              classname =
                msg.alarmType === "1NEW"
                  ? "alarmTable warningnew"
                  : "alarmTable warningack";
              break;
            default:
              classname =
                msg.alarmType === "1NEW"
                  ? "alarmTable othernew"
                  : "alarmTable otherack";
              break;
          }
          row.className = classname;
          row.title = "";
          for (var i = 0, len = this.columns.length; i < len; i++) {
            var text = msg[this.columns[i]] || "N/A";
            row.title += this.columns[i] + ":   " + text + "\n";
            if (text) {
              var cell = row.insertCell(-1);
              cell.innerHTML = text;
              //cell.style["width"] = this.columnsSize[i] + "%";
            }
          }
          /*var self = this;
                    row.addEventListener("click", function () {
                        if (row.myMsg.alarmType === "1NEW") {
                            var msg = row.title + "\n\n" + self.commandText["T04_Acknowledge"] + "?";
                            if (confirm(msg)) {
                                emosWS.poke(row.myMsg.alarmGroup + ".Alarm", "-1");
                            }
                        } else {
                            alert(row.title);
                        }
                    }, false);*/
          row.addEventListener("click", this.onRowClick.bind(this, row), false);
        }
      }
    } catch (err) {
      console.log("updateTable() failed: " + err);
    }
  };

  AlarmFilterReport.prototype.onRowClick = function (row) {
    if (row.myMsg.alarmType === "1NEW") {
      var msg = row.title + "\n\n" + this.commandText["T04_Acknowledge"] + "?";
      if (confirm(msg)) {
        emosWS.poke(row.myMsg.alarmGroup + ".Alarm", "-1");
      }
    } else {
      alert(row.title);
    }
  };

  AlarmFilterReport.prototype.onLanguage = function (languageID) {
    this.clearTable();
  };

  AlarmFilterReport.prototype.clearTable = function () {
    $("#" + this.alarmTable.id + "tbody tr").remove();
  };

  emosWS.AlarmFilterReport = AlarmFilterReport;

  function AlarmFilterSingleLine(configuration) {
    this.wrapperCSS = "AlarmFilterSingleLineWrapper";
    this.tableCSS = "AlarmFilterSingleLine";
    this.table = null;
    this.alarmState = {
      activeClass: null,
      activeAlarmGroup: null,
      list: {},
      alarms: {},
    };
    this.clearTable();
    AlarmFilterReport.call(this, configuration);
  }

  AlarmFilterSingleLine.prototype = Object.create(AlarmFilterReport.prototype);
  AlarmFilterSingleLine.prototype.constructor = AlarmFilterSingleLine;

  AlarmFilterSingleLine.prototype.adviseData = function () {
    try {
      var self = this;
      emosWS.sendAdviseAlarmText(
        this.alarmGroup,
        emosWS.getLanguage(),
        function (msg) {
          if (self.validateMsg(msg)) {
            self.updateAlarmState(msg);
            self.updateTable();
          }
        }
      );
    } catch (err) {
      console.log("adviseData() failed: " + err);
    }
  };

  AlarmFilterSingleLine.prototype.createTableHeader = function () {};

  AlarmFilterSingleLine.prototype.updateTable = function () {
    try {
      if (this.table.rows.length > 0) {
        this.table.deleteRow(0);
      }
      this.addRow(this.alarmState.activeAlarmGroup, 0);
    } catch (err) {
      console.log("updateTable() failed: " + err);
    }
  };

  AlarmFilterSingleLine.prototype.onRowClick = function () {
    loadHREF("ActualAlarm.htm", "ifContent");
  };

  AlarmFilterSingleLine.prototype.updateAlarmState = function (msg) {
    try {
      var tagname = msg.tagname;
      var alarmType = parseInt(msg.alarmType);
      var classID = msg.newClassID;

      if (this.alarmState.list[tagname] && alarmType === 3) {
        //delete tagname entry when received 3RTN message
        delete this.alarmState.list[tagname];
        delete this.alarmState.alarms[classID][tagname];

        //if deleted entry is activeAlarmGroup, reset the activeAlarmGroup to null
        if (this.alarmState.activeAlarmGroup) {
          if (this.alarmState.activeAlarmGroup.tagname === tagname) {
            this.alarmState.activeAlarmGroup = null;
            //this.alarmState.activeClass = 1000;
          }
        }
      } else {
        //otherwise, updates the current tagname entry in alarmState
        this.alarmState.list[tagname] = alarmType;
        this.alarmState.alarms[classID][tagname] = {
          alarmType: alarmType,
          msg: msg,
        };
        if (this.alarmState.activeAlarmGroup) {
          if (this.alarmState.activeAlarmGroup.tagname === tagname) {
            this.alarmState.activeAlarmGroup.alarmType = alarmType;
          }
        }
        //console.log("tagnam entries: " +  Object.keys(this.alarmState.list).length);
      }

      if (this.alarmState.activeAlarmGroup) {
        //when current activeAlarmGroup is available, compare it with the incomming message and update activeAlarmGroup
        if (
          classID < this.alarmState.activeClass ||
          (classID === this.alarmState.activeClass &&
            alarmType <= parseInt(this.alarmState.activeAlarmGroup.alarmType))
        ) {
          this.alarmState.activeAlarmGroup = msg;
          this.alarmState.activeClass = classID;
        }
      } else {
        //otherwise, select the activeAlarmGroup from the alarmState
        if (Object.keys(this.alarmState.list).length === 0) {
          this.alarmState.activeClass = 1000;
          this.alarmState.activeAlarmGroup = null;
        } else {
          var activeClass = 1000,
            activeAlarmGroup = null;
          this.alarmState.activeClass =
            this.alarmState.activeClass === 1000
              ? 0
              : this.alarmState.activeClass;
          for (var i = this.alarmState.activeClass; i < 3; i++) {
            if (Object.keys(this.alarmState.alarms[i]).length > 0) {
              var state = 4;
              for (var j in this.alarmState.alarms[i]) {
                if (this.alarmState.alarms[i][j].alarmType < state) {
                  state = this.alarmState.alarms[i][j].alarmType;
                  activeAlarmGroup = this.alarmState.alarms[i][j].msg;
                  activeClass = i;
                  break;
                }
              }
            }
          }
          this.alarmState.activeClass = activeClass;
          this.alarmState.activeAlarmGroup = activeAlarmGroup;
          /*if (activeClass !== null) {
                     this.alarmState.activeClass = i;
                     this.alarmState.activeAlarmGroup = activeAlarmGroup;
                     } else {
                     this.alarmState.activeClass = 1000;
                     this.alarmState.activeAlarmGroup = null;
                     }*/
        }
      }
    } catch (err) {
      console.log("updatealarmState() failed: " + err);
    }
  };

  AlarmFilterSingleLine.prototype.clearTable = function () {
    this.alarmState.activeClass = 1000;
    this.alarmState.activeAlarmGroup = null;
    for (var i = 0; i < 3; i++) {
      this.alarmState.alarms[i] = {};
    }
  };

  emosWS.AlarmFilterSingleLine = AlarmFilterSingleLine;

  function AlarmFilter(configuration) {
    if (parseInt(configuration.Display_SingleLine) === 1)
      new AlarmFilterSingleLine(configuration);
    else new AlarmFilterReport(configuration);
  }

  emosWS.AlarmFilter = AlarmFilter;
  /*
   * Copyright (c) 2014 Duerr Systems GmbH. All rights reserved.
   *
   */

  var EmosGraph = function (placeholderName, configuration) {
    this.placeholderName = placeholderName;
    this.configuration = configuration;

    this.m = [20, 20, 20, 40]; // margins: top
    this.w = 400 - this.m[1] - this.m[3]; // width
    this.h = 200 - this.m[0] - this.m[2]; // height

    this.initData = function () {
      var dataLength = 140;
      var data = [];
      for (var i = 0; i < dataLength; i++) {
        data[i] = 0;
      }
      return data;
    };
    this.data = this.initData();

    this.x = d3.scale.linear().domain([0, this.data.length]).range([0, this.w]);

    this.y = d3.scale.linear().domain([-100, 100]).range([this.h, 0]);

    var self = this; // for internal d3 functions

    //this.configure = function(configuration)
    //{
    //}

    this.line = d3.svg
      .line()
      // assign the X function to plot our line as we wish
      .x(function (d, i) {
        return this.x(i);
      })
      .y(function (d) {
        return this.y(d);
      });

    this.render = function () {
      // Add an SVG element with the desired dimensions and margin.
      this.body = d3
        .select("#" + this.placeholderName)
        .append("svg:svg")
        .attr("class", "EmosGraph")
        .attr("width", this.w + this.m[1] + this.m[3])
        .attr("height", this.h + this.m[0] + this.m[2])
        .append("svg:g")
        .attr("transform", "translate(" + this.m[3] + "," + this.m[0] + ")");

      // create xAxis
      var xAxis = d3.svg
        .axis()
        .scale(this.x)
        .tickSize(-this.h)
        .tickSubdivide(true);

      // Add the x-axis.
      this.body
        .append("svg:g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + this.h + ")")
        .call(xAxis);

      // create left yAxis
      //var yAxisLeft = d3.svg.axis().scale(this.y).ticks(5).orient("left");
      var yAxisLeft = d3.svg
        .axis()
        .scale(this.y)
        .tickSize(-this.w)
        .tickSubdivide(true)
        .orient("left");

      // Add the y-axis to the left
      this.body
        .append("svg:g")
        .attr("class", "y axis")
        .attr("transform", "translate(0,0)")
        .call(yAxisLeft);

      // Add the line by appending an svg:path element with the data line we created above
      // do this AFTER the axes above so that the line is above the tick-lines
      this.body.append("svg:path").attr("d", this.line(this.data));

      //this.redraw(this.config.min, 0);
    };

    this.redraw = function (msg) {
      try {
        var tempData = [];
        for (var i = 0; i < self.data.length - 1; i++) {
          tempData[i] = self.data[i + 1];
        }
        tempData[self.data.length - 1] = parseFloat(msg.value);
        self.data = tempData;

        self.body.selectAll("path").attr("d", self.line(self.data));

        //d3.select("#" + self.placeholderName).remove();

        //self.render();
      } catch (err) {
        console.log("redraw() failed: " + err);
      }
    };

    // initialization
    //this.configure(configuration);
  };
  emosWS.EmosGraph = EmosGraph;

  var Gauge = function (placeholderName, configuration) {
    this.placeholderName = placeholderName;

    var self = this; // for internal d3 functions

    this.configure = function (configuration) {
      this.config = configuration;

      this.config.size = this.config.size * 0.9;

      this.config.raduis = (this.config.size * 0.97) / 2;
      this.config.cx = this.config.size / 2;
      this.config.cy = this.config.size / 2;

      this.config.min = undefined != configuration.min ? configuration.min : 0;
      this.config.max =
        undefined != configuration.max ? configuration.max : 100;
      this.config.range = this.config.max - this.config.min;

      this.config.majorTicks = configuration.majorTicks || 5;
      this.config.minorTicks = configuration.minorTicks || 2;

      this.config.greenColor = configuration.greenColor || "#109618";
      this.config.yellowColor = configuration.yellowColor || "#FF9900";
      this.config.redColor = configuration.redColor || "#DC3912";

      this.config.transitionDuration = configuration.transitionDuration || 500;
    };

    this.render = function () {
      this.body = d3
        .select("#" + this.placeholderName)
        .append("svg:svg")
        .attr("class", "gauge")
        .attr("width", this.config.size)
        .attr("height", this.config.size);

      this.body
        .append("svg:circle")
        .attr("cx", this.config.cx)
        .attr("cy", this.config.cy)
        .attr("r", this.config.raduis)
        .style("fill", "#ccc")
        .style("stroke", "#000")
        .style("stroke-width", "0.5px");

      this.body
        .append("svg:circle")
        .attr("cx", this.config.cx)
        .attr("cy", this.config.cy)
        .attr("r", 0.9 * this.config.raduis)
        .style("fill", "#fff")
        .style("stroke", "#e0e0e0")
        .style("stroke-width", "2px");

      for (var index in this.config.greenZones) {
        this.drawBand(
          this.config.greenZones[index].from,
          this.config.greenZones[index].to,
          self.config.greenColor
        );
      }

      for (var index in this.config.yellowZones) {
        this.drawBand(
          this.config.yellowZones[index].from,
          this.config.yellowZones[index].to,
          self.config.yellowColor
        );
      }

      for (var index in this.config.redZones) {
        this.drawBand(
          this.config.redZones[index].from,
          this.config.redZones[index].to,
          self.config.redColor
        );
      }

      if (undefined !== this.config.label) {
        var fontSize = Math.round(this.config.size / 9);
        this.body
          .append("svg:text")
          .attr("x", this.config.cx)
          .attr("y", this.config.cy / 2 + fontSize / 2)
          .attr("dy", fontSize / 2)
          .attr("text-anchor", "middle")
          .text(this.config.label)
          .style("font-size", fontSize + "px")
          .style("fill", "#333")
          .style("stroke-width", "0px");
      }

      var fontSize = Math.round(this.config.size / 16);
      var majorDelta = this.config.range / (this.config.majorTicks - 1);
      for (
        var major = this.config.min;
        major <= this.config.max;
        major += majorDelta
      ) {
        var minorDelta = majorDelta / this.config.minorTicks;
        for (
          var minor = major + minorDelta;
          minor < Math.min(major + majorDelta, this.config.max);
          minor += minorDelta
        ) {
          var point1 = this.valueToPoint(minor, 0.75);
          var point2 = this.valueToPoint(minor, 0.85);

          this.body
            .append("svg:line")
            .attr("x1", point1.x)
            .attr("y1", point1.y)
            .attr("x2", point2.x)
            .attr("y2", point2.y)
            .style("stroke", "#666")
            .style("stroke-width", "1px");
        }

        var point1 = this.valueToPoint(major, 0.7);
        var point2 = this.valueToPoint(major, 0.85);

        this.body
          .append("svg:line")
          .attr("x1", point1.x)
          .attr("y1", point1.y)
          .attr("x2", point2.x)
          .attr("y2", point2.y)
          .style("stroke", "#333")
          .style("stroke-width", "2px");

        if (major === this.config.min || major === this.config.max) {
          var point = this.valueToPoint(major, 0.63);

          this.body
            .append("svg:text")
            .attr("x", point.x)
            .attr("y", point.y)
            .attr("dy", fontSize / 3)
            .attr("text-anchor", major === this.config.min ? "start" : "end")
            .text(major)
            .style("font-size", fontSize + "px")
            .style("fill", "#333")
            .style("stroke-width", "0px");
        }
      }

      var pointerContainer = this.body
        .append("svg:g")
        .attr("class", "pointerContainer");

      var midValue = (this.config.min + this.config.max) / 2;

      var pointerPath = this.buildPointerPath(midValue);

      var pointerLine = d3.svg
        .line()
        .x(function (d) {
          return d.x;
        })
        .y(function (d) {
          return d.y;
        })
        .interpolate("basis");

      pointerContainer
        .selectAll("path")
        .data([pointerPath])
        .enter()
        .append("svg:path")
        .attr("d", pointerLine)
        .style("fill", "#dc3912")
        .style("stroke", "#c63310")
        .style("fill-opacity", 0.7);

      pointerContainer
        .append("svg:circle")
        .attr("cx", this.config.cx)
        .attr("cy", this.config.cy)
        .attr("r", 0.12 * this.config.raduis)
        .style("fill", "#4684EE")
        .style("stroke", "#666")
        .style("opacity", 1);

      var fontSize = Math.round(this.config.size / 10);
      pointerContainer
        .selectAll("text")
        .data([midValue])
        .enter()
        .append("svg:text")
        .attr("x", this.config.cx)
        .attr("y", this.config.size - this.config.cy / 4 - fontSize)
        .attr("dy", fontSize / 2)
        .attr("text-anchor", "middle")
        .style("font-size", fontSize + "px")
        .style("fill", "#000")
        .style("stroke-width", "0px");

      this.redraw(this.config.min, 0);
    };

    this.buildPointerPath = function (value) {
      var delta = this.config.range / 13;

      var head = valueToPoint(value, 0.85);
      var head1 = valueToPoint(value - delta, 0.12);
      var head2 = valueToPoint(value + delta, 0.12);

      var tailValue = value - (this.config.range * (1 / (270 / 360))) / 2;
      var tail = valueToPoint(tailValue, 0.28);
      var tail1 = valueToPoint(tailValue - delta, 0.12);
      var tail2 = valueToPoint(tailValue + delta, 0.12);

      return [head, head1, tail2, tail, tail1, head2, head];

      function valueToPoint(value, factor) {
        var point = self.valueToPoint(value, factor);
        point.x -= self.config.cx;
        point.y -= self.config.cy;
        return point;
      }
    };

    this.drawBand = function (start, end, color) {
      if (0 >= end - start) return;

      this.body
        .append("svg:path")
        .style("fill", color)
        .attr(
          "d",
          d3.svg
            .arc()
            .startAngle(this.valueToRadians(start))
            .endAngle(this.valueToRadians(end))
            .innerRadius(0.65 * this.config.raduis)
            .outerRadius(0.85 * this.config.raduis)
        )
        .attr("transform", function () {
          return (
            "translate(" +
            self.config.cx +
            ", " +
            self.config.cy +
            ") rotate(270)"
          );
        });
    };

    this.redraw = function (value, transitionDuration) {
      var pointerContainer = this.body.select(".pointerContainer");

      pointerContainer.selectAll("text").text(Math.round(value) + " %");

      var pointer = pointerContainer.selectAll("path");
      pointer
        .transition()
        .duration(
          undefined !== transitionDuration
            ? transitionDuration
            : this.config.transitionDuration
        )
        //.delay(0)
        //.ease("linear")
        //.attr("transform", function(d)
        .attrTween("transform", function () {
          var pointerValue = value;
          if (value > self.config.max)
            pointerValue = self.config.max + 0.02 * self.config.range;
          else if (value < self.config.min)
            pointerValue = self.config.min - 0.02 * self.config.range;
          var targetRotation = self.valueToDegrees(pointerValue) - 90;
          var currentRotation = self._currentRotation || targetRotation;
          self._currentRotation = targetRotation;

          return function (step) {
            var rotation =
              currentRotation + (targetRotation - currentRotation) * step;
            return (
              "translate(" +
              self.config.cx +
              ", " +
              self.config.cy +
              ") rotate(" +
              rotation +
              ")"
            );
          };
        });
    };

    this.valueToDegrees = function (value) {
      // thanks @closealert
      //return value / this.config.range * 270 - 45;
      return (
        (value / this.config.range) * 270 -
        ((this.config.min / this.config.range) * 270 + 45)
      );
    };

    this.valueToRadians = function (value) {
      return (this.valueToDegrees(value) * Math.PI) / 180;
    };

    this.valueToPoint = function (value, factor) {
      return {
        x:
          this.config.cx -
          this.config.raduis * factor * Math.cos(this.valueToRadians(value)),
        y:
          this.config.cy -
          this.config.raduis * factor * Math.sin(this.valueToRadians(value)),
      };
    };

    // initialization
    this.configure(configuration);
  };
  emosWS.Gauge = Gauge;

  function InputText(configuration) {
    this.useHTMLElement = true;
    this.text = configuration.text || "";
    this.pattern = configuration.pattern || "";
    this.maxlength =
      typeof configuration.maxlength !== "undefined"
        ? configuration.maxlength
        : 0;
    this.fontSize = configuration["font-size"];
    this.onchange = configuration.onchange;
    this.onkeypress = configuration.onkeypress;

    ForeignObject.call(this, configuration);
  }
  InputText.prototype = Object.create(ForeignObject.prototype);
  InputText.prototype.constructor = InputText;

  InputText.prototype.renderMore = function () {
    var mi = document.createElement("input");
    mi.setAttribute("type", "text");
    this.setStyle(mi);
    mi.setAttribute("id", this.elementId);
    if (this.pattern) mi.setAttribute("pattern", this.pattern);

    if (this.maxlength) mi.setAttribute("maxlength", this.maxlength);

    this.divElement.appendChild(mi);

    this.element = this.getElement();

    this.addEditXFunctionality();

    this.element.value = this.text;

    if (this.fontSize) this.element.style["font-size"] = this.fontSize;

    this.element.value = this.text;

    var self = this;
    if (this.onchange)
      this.element.addEventListener(
        "change",
        function () {
          self.onchange(this.value, this);
        },
        false
      );
    if (this.onkeypress)
      this.element.addEventListener(
        "keypress",
        function (e) {
          self.onkeypress(e, this);
        },
        true
      );
  };

  InputText.prototype.addEditXFunctionality = function () {
    var e = this.element,
      toColor = function (num) {
        num >>>= 0;
        var r = num & 0xff,
          g = (num & 0xff00) >>> 8,
          b = (num & 0xff0000) >>> 16;
        return "rgb(" + [r, g, b].join(",") + ")";
      };
    Object.defineProperty(e, "Text", {
      get: function () {
        return e.value;
      },
      set: function (val) {
        e.value = val;
      },
    });

    Object.defineProperty(e, "BackColor", {
      get: function () {
        return e.style["background-color"];
      },
      set: function (val) {
        e.style["background-color"] = toColor(val);
      },
    });
  };

  emosWS.InputText = InputText;

  function ComboBox(configuration) {
    this.useHTMLElement = true;
    this.optionTexts = configuration.options;
    this.onchange = configuration.onchange;
    ForeignObject.call(this, configuration);
  }
  ComboBox.prototype = Object.create(ForeignObject.prototype);
  ComboBox.prototype.constructor = ComboBox;

  ComboBox.prototype.renderMore = function () {
    try {
      var mi = document.createElement("select");
      this.setStyle(mi);
      mi.setAttribute("id", this.elementId);
      this.divElement.appendChild(mi);
      this.element = this.getElement();

      for (var i = 0, len = this.optionTexts.length; i < len; i++) {
        this.element.options.add(new Option(this.optionTexts[i], i));
      }

      var self = this;
      if (this.onchange)
        this.element.addEventListener(
          "change",
          function () {
            self.onchange(this[this.value].label, this.value, this);
          },
          false
        );
    } catch (e) {
      console.log("ComboBox renderMore() failed: " + e);
    }
  };

  emosWS.ComboBox = ComboBox;

  function Checkbox(configuration) {
    this.useHTMLElement = true;
    this.onclick = configuration.onclick;
    ForeignObject.call(this, configuration);
  }
  Checkbox.prototype = Object.create(ForeignObject.prototype);
  Checkbox.prototype.constructor = Checkbox;

  Checkbox.prototype.renderMore = function () {
    try {
      var mi = document.createElement("input");
      mi.setAttribute("type", "checkbox");
      this.setStyle(mi);
      mi.setAttribute("id", this.elementId);
      this.divElement.appendChild(mi);
      this.element = this.getElement();

      var self = this;
      if (this.onclick)
        this.element.addEventListener(
          "click",
          function () {
            self.onclick(this.checked, this);
          },
          false
        );
    } catch (e) {
      console.log("Checkbox renderMore() failed: " + e);
    }
  };

  emosWS.Checkbox = Checkbox;

  function InputButton(configuration) {
    this.useHTMLElement = true;
    this.text = configuration.text;
    this.onclick = configuration.onclick;
    ForeignObject.call(this, configuration);
  }
  InputButton.prototype = Object.create(ForeignObject.prototype);
  InputButton.prototype.constructor = InputButton;

  InputButton.prototype.renderMore = function () {
    try {
      var mi = document.createElement("input");
      mi.setAttribute("type", "button");
      this.setStyle(mi);
      mi.setAttribute("id", this.elementId);
      this.divElement.appendChild(mi);
      this.element = this.getElement();
      this.element.value = this.text;

      var self = this;
      if (self.onclick)
        this.element.addEventListener(
          "click",
          function () {
            self.onclick();
          },
          false
        );
    } catch (e) {
      console.log("InputButton renderMore() failed: " + e);
    }
  };

  emosWS.InputButton = InputButton;

  function InputRadio(configuration) {
    this.optionTexts = configuration.options;
    this.onclick = configuration.onclick;
    this.horizontal =
      typeof configuration.horizontal === "undefined"
        ? true
        : configuration.horizontal;
    ForeignObject.call(this, configuration);
  }
  InputRadio.prototype = Object.create(ForeignObject.prototype);
  InputRadio.prototype.constructor = InputRadio;

  InputRadio.prototype.renderMore = function () {
    try {
      this.element = [];
      var self = this;
      var css = this.horizontal ? "foRadioHorizonal" : "foRadioVertial";
      for (var i = 0, len = this.optionTexts.length; i < len; i++) {
        var text = this.optionTexts[i];
        var elementId = this.elementId + i;
        var mi = document.createElement("radio");
        this.setStyle(mi);
        mi.setAttribute("id", this.elementId);
        mi.setAttribute("name", this.targetId);
        mi.setAttribute("value", text);
        this.divElement.appendChild(mi);
        this.element.push(mi);

        var label = document.createElement("label");
        label.innerHTML = text;
        this.divElement.appendChild(label);
        this.element.push(label);

        if (this.onclick)
          mi.addEventListener(
            "click",
            function () {
              self.onclick(this);
            },
            false
          );
      }
    } catch (e) {
      console.log("InputRadio renderMore() failed: " + e);
    }
  };

  emosWS.InputRadio = InputRadio;

  function VariableDialog() {
    this.divElement = null;
    this.ui = null;
    this.tree = null;
    this.treeId = null;
    this.trendId = null;
    this.PLCListName = "emosTrendPLCList";
    //this.PLCList = {"Plot": [{Tag: ".Integer.P2283_Square1"}, {Tag: ".Integer.P2284_Square2"}, {Tag: ".Integer.P2285_Square3"}, {Tag: ".Integer.P2286_Square4"}, {Tag: ".Real.V2264_Sinus1"}, {Tag: ".Real.V2265_Sinus2"}, {Tag: ".Real.V2266_Sinus3"}, {Tag: ".Real.V2267_Sinus4"}, {Tag: ".uInt.P2287_SawTooth1"}, {Tag: ".uInt.P2288_SawTooth2"}, {Tag: ".uInt.P2289_SawTooth3"}, {Tag: ".uInt.P2290_SawTooth4"}]};
    this.PLCList = this.retrievePLCList();
    this.createGUI();
    window.TrendPageVariableDialog = this;
  }

  VariableDialog.prototype.createGUI = function () {
    try {
      var variableDialogId = getElementGlobalID();
      this.treeId = getElementGlobalID();
      var s =
        '<div id="' +
        variableDialogId +
        '" class="VariableDialog">\n\
                    <div id="' +
        this.treeId +
        '" class="css-treeview"></div>\n\
                </div>';
      var $guiHTML = $(s);
      $("body").append($guiHTML);
      this.ui = $("#" + variableDialogId).dialog({
        title: "Variable dialog",
        width: 200,
        height: 400,
        resizable: true,
      });
      this.ui.dialog("close");
      this.tree = $("#" + this.treeId);
      this.divElement = document.getElementById(variableDialogId);
      //this.updatePLC();
    } catch (err) {
      console.log("VariableDialog createGUI() failed: " + err);
    }
  };

  VariableDialog.prototype.setPosition = function (caller) {
    this.ui.dialog("option", "position", {
      my: "left top+30",
      at: "left top",
      of: caller,
    });
  };

  VariableDialog.prototype.setTrendId = function (trendId) {
    if (!this.trendId) {
      this.trendId = trendId;
      this.getPlanList();
    }
  };

  VariableDialog.prototype.storePLCList = function () {
    if (typeof Storage !== "undefined") {
      localStorage.setItem(this.PLCListName, JSON.stringify(this.PLCList));
    }
  };

  VariableDialog.prototype.retrievePLCList = function () {
    if (typeof Storage !== "undefined") {
      return JSON.parse(localStorage.getItem(this.PLCListName)) || {};
    }
  };

  VariableDialog.prototype.getPlanList = function () {
    emosWS.sendTrendGetPlantList(this.trendId);
  };

  VariableDialog.prototype.onDataTrendPlantList = function (msg) {
    try {
      var PLC = JSON.parse(msg.data).PLC;
      for (var i = 0, len = PLC.length; i < len; i++) {
        if (typeof this.PLCList[PLC[i]] === "undefined")
          this.PLCList[PLC[i]] = null;
      }
      this.storePLCList();
      this.updatePLC();
    } catch (err) {
      console.log("VariableDialog onDataTrendPlantList() failed: " + err);
    }
  };

  VariableDialog.prototype.onDataTrendItemList = function (msg) {
    try {
      var data = JSON.parse(msg.data);
      var Items = data.Items;
      var plc = data.PLC;
      this.PLCList[plc] = [];
      for (var i = 0, len = Items.length; i < len; i++) {
        var item = Items[i];
        this.PLCList[plc].push(item);
      }
      this.storePLCList();
      this.updateTag(plc);
    } catch (err) {
      console.log("VariableDialog onDataTrendItemList() failed: " + err);
    }
  };

  VariableDialog.prototype.updatePLC = function () {
    try {
      for (var plc in this.PLCList) {
        var plcId = this.treeId + plc;
        var s =
          '<li id="' +
          plcId +
          "li" +
          '"><input type="checkbox" id="' +
          plcId +
          '" /><label for="' +
          plcId +
          '">' +
          plc +
          "</label>";
        var $nodeHTML = $(s);
        this.tree.append($nodeHTML);
        if (this.PLCList[plc]) {
          this.updateTag(plc);
        } else {
          document.getElementById(plcId).addEventListener(
            "click",
            function (plc) {
              console.log(plc + " cliked!");
              if (!this.PLCList[plc]) {
                emosWS.sendTrendGetItemList(this.trendId, plc);
              } else {
                this.PLCList[plc] = [];
              }
            }.bind(this, plc),
            false
          );
        }
        //this.updateTag(plc);
      }
    } catch (err) {
      console.log("VariableDialog updatePLC() failed: " + err);
    }
  };

  VariableDialog.prototype.updateTag = function (plc) {
    try {
      if (this.PLCList[plc]) {
        var plcId = this.treeId + plc + "li";
        var s = "<ul>";
        for (var i = 0, len = this.PLCList[plc].length; i < len; i++) {
          var liId = plcId + i;
          var item = this.PLCList[plc][i];
          var title = "";
          for (var key in item) {
            title += key + ":  " + item[key] + "\n";
          }
          s +=
            '<li><p id="' +
            liId +
            '" draggable="true" title="' +
            title +
            '">' +
            item.Tag +
            "</p></li>";
        }
        s += "</ul>";
        var $nodeHTML = $(s);
        $("#" + plcId).append($nodeHTML);

        for (var i = 0, len = this.PLCList[plc].length; i < len; i++) {
          var liId = plcId + i;
          var li = document.getElementById(liId);
          li.addEventListener(
            "dragstart",
            function (ev) {
              ev.dataTransfer.setData("text", plc + ev.target.textContent);
            },
            false
          );
        }
      }
    } catch (err) {
      console.log("VariableDialog updateTag() failed: " + err);
    }
  };

  emosWS.VariableDialog = VariableDialog;

  function Diagram(trendPage) {
    this.divElement = null;
    this.id = null;
    this.chartId = null;
    this.timeLineId = null;
    this.previewId = null;
    this.backId = null;
    this.nextId = null;
    this.seriesData = [];
    this.ui = null;
    this.chart = null;
    this.graph = null;
    this.tagList = {};
    this.chartDataX = ["x"];
    this.chartDataYList = {};
    this.liveInterval = 1000; //miliseconds
    this.historicInterval = 120; //minutes
    //this.historicInterval = 15; //minutes
    this.jitter = 5; //minutes
    this.nullValue = 0.1122;
    this.lastUpdate = null;
    this.legends = ["x"];
    this.rowsData = [this.legends];
    this.liveDuration = 1; //minutes
    this.useShowAllData = true;
    this.resolution = 1; //miliseconds
    this.stopLive = false;

    //-----------------
    this.chartData = { xs: {}, columns: [] };
    this.tagDataIndex = {};
    this.tagDataLength = 0;
    this.callbackList = {};
    //-----------------

    this.timestampList = [];
    this.useLive = trendPage.useLive;
    this.usePoint = trendPage.usePoint;
    this.useDataInterpolated = trendPage.useDataInterpolated;
    this.backgroundColor = "transparent";
    this.droptBackgroundColor = "#2E64FE";
    this.blackhole = null;
    this.trendRegisteredListeners = [];
    this.trendPage = trendPage;
    trendPage.diagramList.push(this);
    this.createGUI();
  }

  Diagram.prototype.getXAxisID = function (index) {
    return "x" + index;
  };
  Diagram.prototype.addNewTag = function (plctag) {
    var xAxis = this.getXAxisID(this.tagDataLength);
    var pos = 2 * this.tagDataLength;
    this.chartData.xs[plctag] = xAxis;
    this.tagDataIndex[plctag] = { x: pos, y: pos + 1 };
    this.chartData.columns.splice(this.tagDataIndex[plctag].x, 0, [xAxis]);
    this.chartData.columns.splice(this.tagDataIndex[plctag].y, 0, [plctag]);
    this.tagDataLength++;
  };
  Diagram.prototype.getTS = function (tsString) {
    var date = new Date(tsString);
    var time = date.getTime() / this.resolution;
    //console.log("getTS: " + tsString + " -> " + time);
    return parseInt(time);
  };

  Diagram.prototype.getValue = function (valueString) {
    return parseFloat(valueString);
  };
  Diagram.prototype.addNewTagValue = function (plctag, msg) {
    this.chartData.columns[this.tagDataIndex[plctag].x].push(
      this.getTS(msg.ts)
    );
    this.chartData.columns[this.tagDataIndex[plctag].y].push(
      this.getValue(msg.value)
    );
  };

  Diagram.prototype.joinData = function (oData, newData) {
    var data = {};
    [oData, newData].forEach(function (array) {
      array.x.forEach(function (item, index) {
        data[item.toString()] = { x: item, y: array.y[index] };
      });
    });
    var sortTSList = [];
    for (var tsString in data) {
      sortTSList.push(tsString);
    }
    sortTSList.sort();

    var joinList = { x: [], y: [] };
    sortTSList.forEach(function (item) {
      joinList.x.push(data[item].x);
      joinList.y.push(data[item].y);
    });

    return joinList;
  };

  Diagram.prototype.addNewTagValues = function (plctag, data) {
    var newData = { x: [], y: [] };
    data.Values.forEach(
      function (item) {
        newData.x.push(this.getTS(item.TS));
        newData.y.push(this.getValue(item.Value));
      }.bind(this)
    );

    var tsList = this.chartData.columns[this.tagDataIndex[plctag].x].slice();
    var valueList = this.chartData.columns[this.tagDataIndex[plctag].y].slice();
    var xLabel = tsList.shift();
    var yLabel = valueList.shift();
    var oData = { x: tsList, y: valueList };
    var joinData = this.joinData(oData, newData);
    joinData.x.unshift(xLabel);
    joinData.y.unshift(yLabel);

    this.chartData.columns[this.tagDataIndex[plctag].x] = joinData.x;
    this.chartData.columns[this.tagDataIndex[plctag].y] = joinData.y;
  };

  Diagram.prototype.clearChartData = function () {
    this.chartData.columns.forEach(function (column) {
      column.splice(1, column.length - 1);
    });
  };

  Diagram.prototype.createGUI = function () {
    try {
      this.id = getElementGlobalID();
      this.chartId = this.id + "chart";
      this.timeLineId = this.id + "tl";
      this.previewId = this.id + "pre";
      this.backId = this.id + "back";
      this.nextId = this.id + "next";
      this.id = getElementGlobalID();
      var s =
        '<div id="' +
        this.id +
        '" class="TrendPageRow TrendPageDiagram">\n\
                        <div id="' +
        this.backId +
        '" class="TrendPageDiagramBackNext TrendPageDiagramBack"></div>\n\
                        <div id="' +
        this.chartId +
        '" class="TrendPageDiagramChart"></div>\n\
                        <div id="' +
        this.nextId +
        '" class="TrendPageDiagramBackNext TrendPageDiagramNext"></div>\n\
                    </div>';
      //<div id="' + this.timeLineId + '" class="TrendPageDiagramTimeLine"></div>\n\
      var $guiHTML = $(s);
      this.trendPage.diagrams.append($guiHTML);
      this.ui = document.getElementById(this.id);
      this.backgroundColor = this.ui.style.backgroundColor;
      this.chart = document.getElementById(this.chartId);
      var self = this;
      this.ui.addEventListener(
        "drop",
        function (event) {
          self.drop(event);
        },
        false
      );
      this.ui.addEventListener(
        "dragover",
        function (event) {
          self.allowDrop(event);
        },
        false
      );
      this.ui.addEventListener(
        "dragleave",
        function (event) {
          self.ui.style.backgroundColor = self.backgroundColor;
        },
        false
      );
      this.chart.addEventListener(
        "dblclick",
        function () {
          this.trendPage.filterDateDialog.show(this);
        }.bind(this),
        false
      );
      document.getElementById(this.backId).addEventListener(
        "click",
        function () {
          this.loadDataBack();
        }.bind(this),
        false
      );
      document.getElementById(this.nextId).addEventListener(
        "click",
        function () {
          this.loadDataNext();
        }.bind(this),
        false
      );
    } catch (err) {
      console.log("Diagram createGUI() failed: " + err);
    }
  };
  Diagram.prototype.addTrendRegisteredListener = function (callback) {
    if (this.trendPage.trendId) callback();
    else this.trendRegisteredListeners.push(callback);
  };
  Diagram.prototype.onTrendRegistered = function () {
    this.trendRegisteredListeners.forEach(function (callback) {
      callback();
    });
  };
  Diagram.prototype.onDataTrendItemValueList = function (data) {
    try {
      var plctag = data.PLC + data.Tag;
      console.log("onDataTrendItemValueList: plctag = " + plctag);
      if (typeof this.tagDataIndex[plctag] !== "undefined") {
        this.addNewTagValues(plctag, data);
        this.loadChart();
      }
    } catch (err) {
      console.log("Diagram onDataTrendItemValueList() failed: " + err);
    }
  };

  Diagram.prototype.refreshSize = function (height) {
    this.ui.style["height"] = height + "px";
    if (this.graph) {
      this.graph.resize({ height: height });
    }
  };

  Diagram.prototype.createChart = function () {
    try {
      var self = this;
      var chartId = "#" + this.chartId;
      this.graph = c3.generate({
        bindto: chartId,
        data: this.chartData,
        axis: {
          x: {
            tick: {
              count: 3,
              format: function (x) {
                var date = new Date(x * this.resolution);
                return date.toLocaleString() + " ." + date.getMilliseconds();
              }.bind(this),
            },
          },
        },
        subchart: {
          show: this.trendPage.advanced,
        },
        zoom: {
          enabled: true,
        },
        point: {
          show: this.usePoint,
        },
        transition: {
          duration: 0,
        },
        type: this.useDataInterpolated ? "line" : "step",
      });
      var si = setInterval(
        function () {
          if (this.useLive) this.loadChart();
        }.bind(this),
        this.liveInterval
      );
    } catch (err) {
      console.log("Diagram createChart() failed: " + err);
    }
  };
  Diagram.prototype.showAllData = function () {
    this.useShowAllData = true;
    this.setLive(false);
    this.loadChart();
  };
  Diagram.prototype.setLive = function (live) {
    this.useLive = live;
    this.stopLive = live ? false : this.stopLive;
  };
  Diagram.prototype.setDataInterpolated = function (interpolated) {
    if (this.useDataInterpolated !== interpolated) {
      this.useDataInterpolated = interpolated;
    }
    this.graph.transform(interpolated ? "line" : "step");
  };
  Diagram.prototype.getLiveData = function () {
    var start =
      parseInt(new Date().getTime() / this.resolution) -
      (this.liveDuration * 60000) / this.resolution;
    var liveChartData = { xs: this.chartData.xs, columns: [] };

    for (var tag in this.tagDataIndex) {
      var tsList = this.chartData.columns[this.tagDataIndex[tag].x];
      var valueList = this.chartData.columns[this.tagDataIndex[tag].y];
      var index = 1;
      for (var len2 = tsList.length - 1, j = len2; j > 0; j--) {
        if (tsList[j] < start) {
          break;
        }
        index = j;
      }
      var newTsList = tsList.slice(index, tsList.length);
      var newValueList = valueList.slice(index, valueList.length);
      newTsList.unshift(tsList[0]);
      newValueList.unshift(valueList[0]);
      liveChartData.columns.push(newTsList);
      liveChartData.columns.push(newValueList);
    }
    return liveChartData;
  };
  Diagram.prototype.setPoint = function (point) {
    this.usePoint = this.graph.internal.config.point_show = point;
    this.graph.internal.redraw();
  };
  Diagram.prototype.refreshChart = function () {
    this.graph = c3.generate({
      bindto: "#" + this.chartId,
      data: {
        rows: this.rowsData,
      },
      axis: {
        x: {
          tick: {
            count: 3,
            format: function (x) {
              return new Date(x).toLocaleString();
            },
          },
        },
      },
      subchart: {
        show: this.trendPage.advanced,
      },
      zoom: {
        enabled: true,
      },
      point: {
        show: this.usePoint,
      },
    });
  };
  Diagram.prototype.processNewData = function (plctag, data) {
    try {
      console.log("------processNewData-------");
      var newData = {};
      var index = null;
      var itemData = [];
      for (var i = 0, len = this.legends.length; i < len; i++) {
        itemData.push(this.nullValue);
        if (plctag === this.legends[i]) index = i;
      }
      if (index) {
        for (var i = 1, len = this.rowsData.length; i < len; i++) {
          newData[this.rowsData[i][0].toString()] = this.rowsData[i];
        }
        data.forEach(function (item) {
          var ts = parseInt(new Date(item.TS).getTime() / 1000);
          var aItemData = newData[ts] || itemData.slice();
          aItemData[0] = ts;
          aItemData[index] = parseFloat(item.Value);
          newData[ts.toString()] = aItemData;
          //console.log("TS: " + item.TS + "-> " + ts + " : " + item.Value + " / " + item.Quality);
        });
        var sortTagList = [];
        for (var ts in newData) {
          sortTagList.push(ts);
        }
        sortTagList.sort();
        var rd = [this.legends];
        sortTagList.forEach(function (item) {
          rd.push(newData[item]);
        });
        for (var j = 1, len2 = this.legends.length; j < len2; j++) {
          var actualValue = this.nullValue;
          for (var i = 1, len = rd.length; i < len; i++) {
            if (rd[i][j] === this.nullValue) {
              rd[i][j] = actualValue;
            } else actualValue = rd[i][j];
          }
        }

        this.rowsData = rd;
      }
    } catch (err) {
      console.log("Diagram processNewData() failed: " + err);
    }
  };
  Diagram.prototype.loadChart = function () {
    /*var showData = this.rowsData;
         if (this.useLive) {
         var liveData = this.getLiveData();
         showData = liveData ? liveData : this.rowsData;
         }
         this.graph.load({
         rows: showData
         });*/
    var showData = this.chartData;
    if (this.useLive) showData = this.getLiveData();
    this.graph.load(showData);
  };

  Diagram.prototype.getActualTagValue = function () {
    //var actual = [parseInt(new Date().getTime() / 1000)];
    if (typeof this.tagList.ts !== "undefined") {
      var actual = [this.tagList.ts];
      for (var i = 1, len = this.legends.length; i < len; i++) {
        actual.push(this.tagList[this.legends[i]]);
      }
      return actual;
    }
    return null;
  };
  Diagram.prototype.getDataBeginDate = function () {
    return this.getDataDate(true);
  };
  Diagram.prototype.getDataEndDate = function () {
    return this.getDataDate(false);
  };
  Diagram.prototype.getDataDate = function (begin) {
    //return this.rowsData[1] ? new Date(this.rowsData[1][0] * 1000) : null;
    var ts = null;
    for (var tag in this.tagDataIndex) {
      var tsList = this.chartData.columns[this.tagDataIndex[tag].x];
      var tsTag = tsList[begin ? 1 : tsList.length - 1];
      if (tsTag) {
        if (ts === null) ts = tsTag;
        ts = (begin ? tsTag < ts : tsTag > ts) ? tsTag : ts;
      }
    }
    var date = new Date(ts * this.resolution);
    console.log(
      "getDataDate " + (begin ? "begin" : "end") + " = " + date.toLocaleString()
    );
    return ts === null ? ts : date;
  };

  Diagram.prototype.loadMoreData = function (beginDate, endDate) {
    var end = endDate || this.getDataBeginDate();
    var begin = beginDate || new Date(end);
    if (!beginDate) begin.setMinutes(end.getMinutes() - this.historicInterval);

    for (var plctag in this.tagDataIndex) {
      this.loadMoreTagData(plctag, begin, end);
    }
  };

  Diagram.prototype.loadMoreTagData = function (plctag, begin, end) {
    var plctagList = emosWS.getPLCTag(plctag);
    var plc = plctagList.plc;
    var tag = plctagList.tag;

    var beginUTCYear = begin.getUTCFullYear();
    var beginUTCMonth = begin.getUTCMonth() + 1;
    var beginUTCDate = begin.getUTCDate();
    var beginUTCHour = begin.getUTCHours();
    var beginUTCMinute = begin.getUTCMinutes();
    var beginUTCSecond = begin.getUTCSeconds();
    var endUTCYear = end.getUTCFullYear();
    var endUTCMonth = end.getUTCMonth() + 1;
    var endUTCDate = end.getUTCDate();
    var endUTCHour = end.getUTCHours();
    var endUTCMinute = end.getUTCMinutes();
    var endUTCSecond = end.getUTCSeconds();

    //advise historic data
    this.addTrendRegisteredListener(
      function () {
        emosWS.sendTrendGetItemValueList(
          this.trendPage.trendId,
          plc,
          tag,
          beginUTCYear,
          beginUTCMonth,
          beginUTCDate,
          beginUTCHour,
          beginUTCMinute,
          beginUTCSecond,
          endUTCYear,
          endUTCMonth,
          endUTCDate,
          endUTCHour,
          endUTCMinute,
          endUTCSecond
        );
      }.bind(this)
    );
  };

  Diagram.prototype.adviseData = function (plctag) {
    try {
      this.tagList[plctag] = 0; //may remove
      this.addNewTag(plctag);
      var end = new Date();
      var begin = new Date(end);
      begin.setMinutes(end.getMinutes() - this.historicInterval);
      end.setMinutes(end.getMinutes() + this.jitter);
      var dataBeginDate = this.getDataBeginDate();
      if (dataBeginDate) {
        begin =
          begin.getTime() > dataBeginDate.getTime() ? dataBeginDate : begin;
      }

      //advise historic data
      this.loadMoreTagData(plctag, begin, end);

      //advise live data
      this.callbackList[plctag] = emosWS.advise(
        plctag,
        function (msg) {
          if (!this.stopLive) this.addNewTagValue(plctag, msg);
        }.bind(this),
        "",
        emosWS.tagType.IO
      );
      this.loadChart();
    } catch (err) {
      console.log("Diagram adviseData() failed: " + err);
    }
  };
  Diagram.prototype.drop = function (ev) {
    try {
      this.ui.style.backgroundColor = this.backgroundColor;
      ev.preventDefault();
      var plctag = ev.dataTransfer.getData("text");
      console.log("dropped: tag=" + plctag);
      this.initializeChart(plctag);
    } catch (err) {
      console.log("Diagram drop() failed: " + err);
    }
  };
  Diagram.prototype.initializeChart = function (plctag) {
    if (plctag)
      if (!this.graph) {
        this.createChart();
      }
    if (!this.tagList[plctag]) this.adviseData(plctag);
  };
  Diagram.prototype.allowDrop = function (ev) {
    this.ui.style.backgroundColor = this.droptBackgroundColor;
    ev.preventDefault();
    ev.stopPropagation(); /// add this too
  };

  Diagram.prototype.getExportSVG = function () {
    return this.ui.innerHTML;
  };

  Diagram.prototype.getExportData = function () {
    var exportData = this.getSetting();
    exportData["chartData"] = this.chartData;
    return exportData;
  };

  Diagram.prototype.getSetting = function () {
    return {
      tagDataIndex: this.tagDataIndex,
      useLive: this.useLive,
      usePoint: this.usePoint,
      useDataInterpolated: this.useDataInterpolated,
      advanced: this.trendPage.advanced,
    };
  };

  Diagram.prototype.reset = function () {
    for (var plctag in this.callbackList) {
      emosWS.unadvise(plctag, this.callbackList[plctag]);
    }
  };

  Diagram.prototype.onFilterDateSelected = function (begin, end) {
    this.loadData(begin, end);
  };
  Diagram.prototype.loadDataNext = function () {
    var begin = this.getDataEndDate();
    var end = new Date(begin);
    end.setMinutes(begin.getMinutes() + this.historicInterval);
    this.loadData(begin, end);
  };
  Diagram.prototype.loadDataBack = function () {
    var end = this.getDataBeginDate();
    var begin = new Date(end);
    begin.setMinutes(end.getMinutes() - this.historicInterval);
    this.loadData(begin, end);
  };
  Diagram.prototype.loadData = function (begin, end) {
    this.stopLive = true;
    this.clearChartData();
    this.loadMoreData(begin, end);
  };

  emosWS.Diagram = Diagram;

  function TrendList() {
    this.trendList = null;
    this.trendListSize = 10;
    this.createGUI();
    this.trendPage = null;
    window.TrendListDialog = this;
  }

  TrendList.prototype.createGUI = function () {
    try {
      var id = getElementGlobalID();
      var listId = getElementGlobalID();
      var s =
        '<div id="' +
        id +
        '">\n\
                        <form>\n\
                            <select id="' +
        listId +
        '" class="TrendListOption"></select>\n\
                            <input type="submit" tabindex="-1" style="position:absolute; top:-1000px">\n\
                        </form>\n\
                    </div>';
      var $guiHTML = $(s);
      $("body").append($guiHTML);
      this.ui = $("#" + id).dialog({
        modal: true,
        autoOpen: false,
        title: "Select a trend",
        width: 400,
        //height: 270,
        resizable: true,
        buttons: {
          Cancel: function () {
            this.ui.dialog("close");
          }.bind(this),
          OK: this.onSelected.bind(this),
        },
      });
      this.ui.find("form").on(
        "submit",
        function (event) {
          event.preventDefault();
          this.onSelected();
        }.bind(this)
      );
      this.trendList = document.getElementById(listId);
      this.trendList.size = this.trendListSize;
      this.trendList.addEventListener(
        "dblclick",
        function () {
          this.onSelected();
        }.bind(this),
        false
      );
    } catch (err) {
      console.log("TrendList createGUI() failed: " + err);
    }
  };
  TrendList.prototype.onSelected = function () {
    if (this.trendList.value)
      this.trendPage.openTrendFromLocalStorage(this.trendList.value);
    this.ui.dialog("close");
  };
  TrendList.prototype.show = function (trendPage) {
    try {
      this.trendPage = trendPage;
      //remove all options
      while (this.trendList.options.length > 0) this.trendList.remove(0);
      //add actual options
      var trends = trendPage.retrieveTrends();
      for (var diagramName in trends) {
        var option = document.createElement("option");
        option.text = diagramName;
        if (diagramName === trendPage.trendName) {
          option.selected = "true";
        }
        this.trendList.add(option);
      }

      this.ui.dialog("open");
    } catch (err) {
      console.log("TrendList createGUI() failed: " + err);
    }
  };
  emosWS.TrendList = TrendList;

  function FilterDate() {
    this.trendPage = null;
    this.date1HTML = null;
    this.hour1HTML = null;
    this.minute1HTML = null;
    this.second1HTML = null;
    this.date2HTML = null;
    this.hour2HTML = null;
    this.minute2HTML = null;
    this.second2HTML = null;
    this.date1 = null;
    this.date2 = null;
    this.createGUI();
    window.FilterDateDialog = this;
  }

  FilterDate.prototype.createGUI = function () {
    try {
      var id = getElementGlobalID();
      /*  debie2alsc: Useless I think.
            var listId = getElementGlobalID();
             */
      var date1Id = getElementGlobalID();
      var timePicker1Id = getElementGlobalID();
      var hour1Id = getElementGlobalID();
      var minute1Id = getElementGlobalID();
      var second1Id = getElementGlobalID();
      var date2Id = getElementGlobalID();
      var timePicker2Id = getElementGlobalID();
      var hour2Id = getElementGlobalID();
      var minute2Id = getElementGlobalID();
      var second2Id = getElementGlobalID();
      var s =
        '<div id="' +
        id +
        '">\n\
                        <form>\n\
                            <div class="FilterDateLeft">\n\
                                <div id="' +
        date1Id +
        '"></div>\n\
                                <div class="vertical controls" id="' +
        timePicker1Id +
        '">\n\
                                    <input id="' +
        hour1Id +
        '">h\n\
                                    <input id="' +
        minute1Id +
        '">m\n\
                                    <input id="' +
        second1Id +
        '">s\n\
                                </div>\n\
                            </div>\n\
                            <div class="FilterDateRight">\n\
                                <div id="' +
        date2Id +
        '"></div>\n\
                                <div class="vertical controls" id="' +
        timePicker2Id +
        '">\n\
                                    <input id="' +
        hour2Id +
        '">h\n\
                                    <input id="' +
        minute2Id +
        '">m\n\
                                    <input id="' +
        second2Id +
        '">s\n\
                                </div>\n\
                            </div>\n\
                            <input type="submit" tabindex="-1" style="position:absolute; top:-1000px">\n\
                        </form>\n\
                    </div>';
      var $guiHTML = $(s);
      $("body").append($guiHTML);
      this.ui = $("#" + id).dialog({
        modal: true,
        autoOpen: false,
        title: "Select start and end date",
        width: 540,
        resizable: true,
        buttons: {
          Cancel: function () {
            this.ui.dialog("close");
          }.bind(this),
          OK: this.onSelected.bind(this),
        },
      });
      this.ui.find("form").on(
        "submit",
        function (event) {
          event.preventDefault();
          this.onSelected();
        }.bind(this)
      );

      this.date1HTML = $("#" + date1Id).datepicker({
        changeMonth: true,
        changeYear: true,
      });
      this.date1HTML.datepicker("option", "firstDay", 1);
      this.date1HTML.datepicker("option", "yearRange", "0:3000");
      this.hour1HTML = $("#" + hour1Id).spinner({
        min: 0,
        max: 23,
        step: 1,
        start: 1,
      });
      this.minute1HTML = $("#" + minute1Id).spinner({
        min: 0,
        max: 59,
        step: 1,
        start: 0,
      });
      this.second1HTML = $("#" + second1Id).spinner({
        min: 0,
        max: 59,
        step: 1,
        start: 0,
      });
      this.date1 = {
        date: this.date1HTML,
        hour: this.hour1HTML,
        minute: this.minute1HTML,
        second: this.second1HTML,
      };

      this.date2HTML = $("#" + date2Id).datepicker({
        changeMonth: true,
        changeYear: true,
      });
      this.date2HTML.datepicker("option", "firstDay", 1);
      this.date2HTML.datepicker("option", "yearRange", "0:3000");
      this.hour2HTML = $("#" + hour2Id).spinner({
        min: 0,
        max: 23,
        step: 1,
        start: 1,
      });
      this.minute2HTML = $("#" + minute2Id).spinner({
        min: 0,
        max: 59,
        step: 1,
        start: 0,
      });
      this.second2HTML = $("#" + second2Id).spinner({
        min: 0,
        max: 59,
        step: 1,
        start: 0,
      });
      this.date2 = {
        date: this.date2HTML,
        hour: this.hour2HTML,
        minute: this.minute2HTML,
        second: this.second2HTML,
      };

      /* debie2alsc: What is this? Completely useless I think.
            this.trendList = document.getElementById(listId);
            this.trendList.size = this.trendListSize;
            this.trendList.addEventListener("dblclick", function () {
                this.onSelected();
            }.bind(this), false);*/
    } catch (err) {
      console.log("FilterDate createGUI() failed: " + err);
    }
  };

  FilterDate.prototype.onSelected = function () {
    var beginDate = this.getTime(this.date1);
    var endDate = this.getTime(this.date2);
    if (beginDate <= endDate)
      this.diagram.onFilterDateSelected(beginDate, endDate);

    this.ui.dialog("close");
  };

  FilterDate.prototype.show = function (diagram) {
    try {
      this.diagram = diagram;
      this.setTimeControl(this.date1, diagram.getDataBeginDate());
      this.setTimeControl(this.date2, new Date());
      this.ui.dialog("open");
    } catch (err) {
      console.log("FilterDate show() failed: " + err);
    }
  };

  FilterDate.prototype.setTimeControl = function (control, date) {
    try {
      control.date.datepicker("setDate", date);
      control.hour.val(date.getHours());
      control.minute.val(date.getMinutes());
      control.second.val(date.getSeconds());
    } catch (err) {
      console.log("FilterDate setTimeControl() failed: " + err);
    }
  };

  FilterDate.prototype.getTime = function (control) {
    try {
      var date = control.date.datepicker("getDate");
      date.setHours(control.hour.val());
      date.setMinutes(control.minute.val());
      date.setSeconds(control.second.val());
      date.setMilliseconds(0);
      return date;
    } catch (err) {
      console.log("FilterDate getTime() failed: " + err);
    }
  };

  emosWS.FilterDate = FilterDate;

  function TrendPage(configuration) {
    emosWS.require(
      {
        css: ["/lib/css/c3.css"],
        js: [
          "/lib/js/d3.min.js",
          "/lib/js/c3.min.js",
          "/lib/js/FileSaver.min.js",
        ],
      },
      function () {
        this.advanced =
          typeof configuration.advanced === "undefined"
            ? true
            : configuration.advanced;
        this.trendData =
          typeof configuration.data === "undefined" ? [] : configuration.data;
        this.src = configuration.advanced;
        this.toolbar = null;
        this.variableDialog =
          window.TrendPageVariableDialog || new VariableDialog();
        this.trendListDialog = window.TrendListDialog || new TrendList();
        this.filterDateDialog = window.FilterDateDialog || new FilterDate();
        this.diagrams = null;
        this.diagramsElement = null;
        this.diagramList = [];
        this.trendId = null;
        this.useLive = !this.advanced;
        this.usePoint = false;
        this.useDataInterpolated = true;

        this.tbVariableDialog = null;
        this.tbPrint = null;
        this.tbSaveData = null;
        this.tbDelete = null;
        this.tbHundred = null;
        this.tbRealtime = null;
        this.tbRealtimeId = null;
        this.tbSlider = null;
        this.tbDataInterpolated = null;
        this.tbDataInterpolatedId = null;
        this.tbDataPoint = null;
        this.tbDataPointId = null;
        this.tbSaveDiagram = null;
        this.tbDeleteDiagram = null;
        this.tbFetchDiagram = null;
        this.tbNewDiagram = null;
        this.trendListName = "emosDiagramList";
        this.trendName = null;

        ForeignObject.call(this, configuration);
        ESAnimation.call(this);
      }.bind(this)
    );
  }

  TrendPage.prototype = Object.create(ForeignObject.prototype);
  TrendPage.prototype = emosWS.fn.emosExtend(
    TrendPage.prototype,
    ESAnimation.prototype
  );
  TrendPage.prototype.constructor = TrendPage;
  TrendPage.prototype.initializeMore = function () {
    emosWS.sendTrendRegister(
      function (msg) {
        switch (msg.type) {
          case "trendInfo":
            this.trendId = msg.value;
            this.variableDialog.setTrendId(this.trendId);
            this.diagramList.forEach(function (diagram) {
              diagram.onTrendRegistered();
            });
            break;

          case "trendPlantList":
            this.variableDialog.onDataTrendPlantList(msg);
            break;

          case "trendItemList":
            this.variableDialog.onDataTrendItemList(msg);
            break;

          case "trendItemValueList":
            this.diagramList.forEach(function (diagram) {
              var data = JSON.parse(msg.data);
              diagram.onDataTrendItemValueList(data);
            });
            break;

          default:
            break;
        }
      }.bind(this)
    );
  };
  TrendPage.prototype.renderMore = function () {
    this.createGUI();
  };
  TrendPage.prototype.createGUI = function () {
    try {
      var toolbarId = getElementGlobalID();
      var tbVariableDialogId = getElementGlobalID();
      var tbPrintId = getElementGlobalID();
      var tbSaveDataId = getElementGlobalID();
      var tbDeleteId = getElementGlobalID();
      var tbHundredId = getElementGlobalID();
      var tbLoadMoreDataId = getElementGlobalID();
      var tbRealtimeId = (this.tbRealtimeId = getElementGlobalID());
      var tbDataInterpolatedId = (this.tbDataInterpolatedId =
        getElementGlobalID());
      var tbDataPointId = (this.tbDataPointId = getElementGlobalID());
      var tbSaveDiagramId = getElementGlobalID();
      var tbDeleteDiagramId = getElementGlobalID();
      var tbFetchDiagramId = getElementGlobalID();
      var tbNewDiagramId = getElementGlobalID();

      var diagramsID = getElementGlobalID();

      var sToolbar = !this.advanced
        ? ""
        : '<div id="' +
          toolbarId +
          '" class="ui-widget-header ui-corner-all TrendPageRow">\n\
                <button id="' +
          tbVariableDialogId +
          '">Variable dialog</button>\n\
                <button id="' +
          tbSaveDataId +
          '">Save / Export Data</button>\n\
                <button id="' +
          tbDeleteId +
          '">Delete Variables in the Diagram</button>\n\
                <button id="' +
          tbHundredId +
          '">Show all data to a 100 %</button>\n\
                <button id="' +
          tbLoadMoreDataId +
          '">Load more historic data</button>\n\
                <input type="checkbox" id="' +
          tbRealtimeId +
          '"' +
          (this.useLive ? " checked" : "") +
          '><label for="' +
          tbRealtimeId +
          '" title="Real Time Trend">Live</label>\n\
                <input type="checkbox" id="' +
          tbDataInterpolatedId +
          '"' +
          (this.useDataInterpolated ? " checked" : "") +
          '><label for="' +
          tbDataInterpolatedId +
          '" title="Show data interpolated">Interpolated</label>\n\
                <input type="checkbox" id="' +
          tbDataPointId +
          '"' +
          (this.usePoint ? " checked" : "") +
          '><label for="' +
          tbDataPointId +
          '" title="Show data points (Measuring point)">Point</label>\n\
                <button id="' +
          tbSaveDiagramId +
          '">Save Diagram settings</button>\n\
                <button id="' +
          tbDeleteDiagramId +
          '">Delete Diagram settings</button>\n\
                <button id="' +
          tbFetchDiagramId +
          '">Fetch Diagram settings</button>\n\
                <button id="' +
          tbNewDiagramId +
          '">New diagram</button>\n\
            </div>';

      var s =
        '<div class="TrendPageWrapper" id="' +
        this.elementId +
        '">\n\
                        <div class="TrendPageTable">' +
        sToolbar +
        '\n\
                            <div class="TrendPageDiagramsWrapper TrendPageRow">\n\
                                <div class="TrendPageDiagrams">\n\
                                    <div id="' +
        diagramsID +
        '" class="TrendPageTable">\n\
                                    </div>\n\
                                </div>\n\
                            </div>\n\
                        </div>\n\
                    </div>';

      var $guiHTML = $(s);
      this.divJElement.append($guiHTML);
      this.element = document.getElementById(this.elementId);
      this.diagrams = $("#" + diagramsID);
      this.diagramsElement = document.getElementById(diagramsID);
      this.tbVariableDialog = document.getElementById(tbVariableDialogId);
      this.tbPrint = document.getElementById(tbPrintId);
      this.tbSaveData = document.getElementById(tbSaveDataId);
      this.tbDelete = document.getElementById(tbDeleteId);
      this.tbHundred = document.getElementById(tbHundredId);
      this.tbRealtime = document.getElementById(tbRealtimeId);
      this.tbDataInterpolated = document.getElementById(tbDataInterpolatedId);
      this.tbDataPoint = document.getElementById(tbDataPointId);
      this.tbSaveDiagram = document.getElementById(tbSaveDiagramId);
      this.tbDeleteDiagram = document.getElementById(tbDeleteDiagramId);
      this.tbFetchDiagram = document.getElementById(tbFetchDiagramId);
      this.tbNewDiagram = document.getElementById(tbNewDiagramId);

      var self = this;
      if (this.advanced) {
        $("#" + tbVariableDialogId)
          .button({
            text: false,
            icons: {
              primary: "ui-icon-tag",
            },
          })
          .click(function () {
            self.variableDialog.ui.dialog("open");
            self.variableDialog.setPosition(this);
          });

        $("#" + tbSaveDataId)
          .button({
            text: false,
            icons: {
              primary: "ui-icon-clipboard",
            },
          })
          .click(function () {
            self.save();
          });

        $("#" + tbDeleteId)
          .button({
            text: false,
            icons: {
              primary: "ui-icon-trash",
            },
          })
          .click(function () {
            self.reset();
          });

        $("#" + tbLoadMoreDataId)
          .button({
            text: false,
            icons: {
              primary: "ui-icon-transferthick-e-w",
            },
          })
          .click(function () {
            self.loadMoreData();
          });

        $("#" + tbHundredId)
          .button({
            text: false,
            icons: {
              primary: "ui-icon-image",
            },
          })
          .click(function () {
            self.showAllData();
          });

        this.tbRealtime.addEventListener(
          "click",
          function () {
            self.setLive(this.checked);
          },
          false
        );
        $("#" + tbRealtimeId).button();

        this.tbDataInterpolated.addEventListener(
          "click",
          function () {
            self.setDataInterpolated(this.checked);
          },
          false
        );
        $("#" + tbDataInterpolatedId).button();

        this.tbDataPoint.addEventListener(
          "click",
          function () {
            self.setPoint(this.checked);
          },
          false
        );
        $("#" + tbDataPointId).button();

        $("#" + tbSaveDiagramId)
          .button({
            text: false,
            icons: {
              primary: "ui-icon-disk",
            },
          })
          .click(function () {
            self.saveToLocalStorage();
          });

        $("#" + tbDeleteDiagramId)
          .button({
            text: false,
            icons: {
              primary: "ui-icon-close",
            },
          })
          .click(function () {
            self.deleteTrend();
          });

        $("#" + tbFetchDiagramId)
          .button({
            text: false,
            icons: {
              primary: "ui-icon-folder-open",
            },
          })
          .click(function () {
            self.trendListDialog.show(self);
          });

        $("#" + tbNewDiagramId)
          .button({
            text: false,
            icons: {
              primary: "ui-icon-plus",
            },
          })
          .click(function () {
            new Diagram(self);
            self.refreshSize();
          });
      }

      this.createDiagrams();
    } catch (err) {
      console.log("TrendPage createGUI() failed: " + err);
    }
  };

  TrendPage.prototype.showAllData = function () {
    $("#" + this.tbRealtimeId)
      .prop("checked", false)
      .button("refresh");
    this.diagramList.forEach(function (diagram) {
      diagram.showAllData();
    });
  };

  TrendPage.prototype.loadMoreData = function () {
    this.diagramList.forEach(function (diagram) {
      diagram.loadMoreData();
    });
  };

  TrendPage.prototype.setDataInterpolated = function (interpolated) {
    this.useDataInterpolated = interpolated;
    this.diagramList.forEach(function (diagram) {
      diagram.setDataInterpolated(interpolated);
    });
  };

  TrendPage.prototype.setLive = function (live) {
    this.useLive = live;
    this.diagramList.forEach(function (diagram) {
      diagram.setLive(live);
    });
  };

  TrendPage.prototype.setPoint = function (point) {
    this.usePoint = point;
    this.diagramList.forEach(function (diagram) {
      diagram.setPoint(point);
    });
  };

  TrendPage.prototype.createDiagrams = function () {
    if (this.trendData.length === 0) {
      new Diagram(this);
    } else {
      var diagramList = [];
      for (var i = 0, len = this.trendData.length; i < len; i++) {
        diagramList.push(new Diagram(this));
      }
      for (var i = 0, len = this.trendData.length; i < len; i++) {
        setTimeout(
          function (index) {
            var chartList = this.trendData[index];
            for (var j = 0, len = chartList.length; j < len; j++) {
              diagramList[index].initializeChart(chartList[j]);
            }
          }.bind(this, i),
          1
        );
      }
      this.refreshSize();
    }
  };

  TrendPage.prototype.saveToLocalStorage = function () {
    var trendName =
      this.trendName ||
      prompt(
        "Please enter diagram name to save",
        "diagram_" + new Date().toLocaleString()
      );
    if (trendName !== null) {
      this.storeTrend({ name: trendName, setting: this.getSetting() });
      this.trendName = trendName;
    }
  };

  TrendPage.prototype.openTrendFromLocalStorage = function (trendName) {
    var trend = this.retrieveTrends()[trendName];
    if (trend) {
      this.reset(true);
      this.trendData = [];
      trend.diagrams.forEach(
        function (diagramSetting) {
          this.useLive = diagramSetting.useLive;
          this.usePoint = diagramSetting.usePoint;
          this.useDataInterpolated = diagramSetting.usePoint;
          var tagList = [];
          for (var tag in diagramSetting.tagDataIndex) {
            tagList.push(tag);
          }
          this.trendData.push(tagList);
        }.bind(this)
      );
      this.createDiagrams();
      $("#" + this.tbRealtimeId)
        .prop("checked", this.useLive)
        .button("refresh");
      $("#" + this.tbDataInterpolatedId)
        .prop("checked", this.useDataInterpolated)
        .button("refresh");
      $("#" + this.tbDataPointId)
        .prop("checked", this.usPoint)
        .button("refresh");
      this.trendName = trendName;
    }
  };

  TrendPage.prototype.getSetting = function () {
    var trendSetting = { diagrams: [] };
    this.diagramList.forEach(function (diagram) {
      trendSetting.diagrams.push(diagram.getSetting());
    });
    return trendSetting;
  };

  TrendPage.prototype.storeTrend = function (trend) {
    var trends = this.retrieveTrends();

    if (typeof Storage !== "undefined") {
      trends[trend.name] = trend.setting;
    }

    this.storeTrends(trends);
  };

  TrendPage.prototype.storeTrends = function (trends) {
    if (typeof Storage !== "undefined") {
      localStorage.setItem(this.trendListName, JSON.stringify(trends));
    }
  };

  TrendPage.prototype.deleteTrend = function () {
    if (this.trendName) {
      if (
        confirm("Do you want to delete this trend from browser local storage?")
      ) {
        var trends = this.retrieveTrends();
        if (typeof Storage !== "undefined") {
          delete trends[this.trendName];
          this.storeTrends(trends);
        }
        this.reset();
      }
    }
  };

  TrendPage.prototype.retrieveTrends = function () {
    if (typeof Storage !== "undefined") {
      return JSON.parse(localStorage.getItem(this.trendListName)) || {};
    }
  };

  TrendPage.prototype.save = function () {
    var time = new Date().toLocaleString();
    var htmlFilePrefix = "trend_html_";
    var dataFilePrefix = "trend_data_";
    var saveFiles = [
      { name: htmlFilePrefix + time, ext: ".html", text: this.getExportSVG() },
      { name: dataFilePrefix + time, ext: ".txt", text: this.getExportData() },
    ];

    $.when($.get("/lib/css/c3.css")).done(
      function (response) {
        saveFiles.push({ name: "c3", ext: ".css", text: response });
        this.saveNext(saveFiles);
      }.bind(this)
    );
  };

  TrendPage.prototype.saveNext = function (saveFiles) {
    saveFiles.forEach(
      function (item) {
        var blob = this.getBlob(item.text);
        saveAs(blob, item.name + item.ext);
      }.bind(this)
    );
  };

  TrendPage.prototype.getExportSVG = function () {
    var svg =
      '<!DOCTYPE html><html><head><link rel="stylesheet" type="text/css" href="c3.css"></head><body>';
    this.diagramList.forEach(function (diagram) {
      svg += diagram.getExportSVG();
    });
    svg += "</body></html>";
    return svg;
  };

  TrendPage.prototype.getExportData = function () {
    var trend = { time: new Date(), diagrams: [] };
    this.diagramList.forEach(function (diagram) {
      trend.diagrams.push(diagram.getExportData());
    });
    return JSON.stringify(trend);
  };

  TrendPage.prototype.getBlob = function (text) {
    return new Blob([text], { type: "text/plain;charset=utf-8" });
  };

  TrendPage.prototype.reset = function (emptyTrend) {
    this.diagramList.forEach(function (diagram) {
      diagram.reset();
    });
    this.diagramList = [];
    this.diagrams.empty();
    if (!emptyTrend) new Diagram(this);
  };

  TrendPage.prototype.refreshSize = function () {
    var height = parseInt(
      this.diagramsElement.clientHeight / this.diagramList.length
    );
    this.diagramList.forEach(function (diagram) {
      diagram.refreshSize(height);
    });
  };

  /*TrendPage.prototype.download = function (filename, text) {
     var pom = document.createElement('a');
     pom.setAttribute('href', 'data:application/octet-stream;charset=utf-8;base64,' + encodeURIComponent(text));
     pom.setAttribute('download', filename);
     pom.click();
     };*/

  emosWS.TrendPage = TrendPage;

  /**
   * Provide User Right functionalities
   * @class
   * @alias UserRight
   * @memberof ui.Login
   * @param {Object} userright
   */
  function UserRight(userright) {
    this.def = {
      act_ur: 20,
      apt_ur: 150,
      esm_ur: 50,
      ext_ur: 50,
      psa_ur: 20,
      act_gr: 50,
      apt_gr: 50,
      esm_gr: 50,
      ext_gr: 50,
      psa_gr: 50,
      sys_sr: 20,
    };

    this.rights = JSON.parse(userright);
  }

  UserRight.prototype.hasRight = function (groupId, groupIndex) {
    return this.rights[groupId].charAt(groupIndex) === "1";
  };

  UserRight.prototype.hasPaintShopRight = function (groupIndex) {
    return true;
  };
  /* global accessToken */

  /**
   * Provide login dialog functionalities
   * @class
   * @alias LoginDialog
   * @memberof ui.Login
   */
  function LoginDialog() {
    this.userName = null;
    this.userId = null;
    this.status = null;
    this.message = { status: "out" };
    this.usernameHTML = null;
    this.passwordHTML = null;
    this.loginHTML = null;
    this.logoffHTML = null;
    this.statusHTML = null;
    this.iframeHTML = null;
    this.accessToken = null;
    this.userright = null;
    this.profile = null;
    this.loginDate = null;
    this.wscookie = null;
    this.LCTokenKey = "emosLoginKey";
    this.GET_USER_INFO = "GETUSERINFO";
    this.USER_INFO = "USERINFO";
    this.listeners = [];
    this.ui = null;
    this.authWindow = null;
    this.langs = {
      70: "de",
      71: "en",
      72: "es",
      73: "pt_PT",
      74: "fr",
      75: "zh_CN",
      76: "en",
      77: "en",
    };
    this.createGUI();
    this.init();
    window.LoginDialog = this;
  }

  LoginDialog.prototype.getLanguage = function () {
    return this.langs[emosWS.getLanguage()] || "en";
  };
  LoginDialog.prototype.createGUI = function () {
    try {
      var id = new Date().getUTCMilliseconds(),
        iframeId = id + "iframe",
        $newdiv1 = $(
          "<div id='" +
            id +
            "'> <iframe id='" +
            iframeId +
            "' class='emoslogin' src=''></iframe></div>"
        );
      $("body").append($newdiv1);
      this.iframeHTML = document.getElementById(iframeId);
      this.ui = $("#" + id).dialog({
        //modal: true,
        autoOpen: false,
        width: 500,
        height: 500,
        open: function () {
          $(this)
            .siblings(".ui-dialog-titlebar")
            .removeClass("ui-widget-header");
          $(this).css("overflow", "hidden");
        },
        dialogClass: "noTitleStuff",
      });
    } catch (err) {
      console.log("Login createGUI() failed: " + err);
    }
  };
  LoginDialog.prototype.register = function (loginListener) {
    this.listeners.forEach(function (listener) {
      if (listener === loginListener) return;
    });
    this.listeners.push(loginListener);
  };
  LoginDialog.prototype.retrieveAccessToken = function () {
    if (typeof Storage !== "undefined") {
      var lctoken = localStorage.getItem(this.LCTokenKey);
      if (lctoken)
        return new AccessToken(
          JSON.parse(localStorage.getItem(this.LCTokenKey))
        );
    }
    return null;
  };
  LoginDialog.prototype.onLocalStorageChange = function (storageEvent) {
    /*console.log("storage event: key=" + storageEvent.key
         + "/ old=" + storageEvent.oldValue
         + "/ new=" + storageEvent.newValue
         + "/ area=" + storageEvent.storageArea);*/
    if (storageEvent.key === this.LCTokenKey) {
      if (!this.accessToken && storageEvent.newValue) {
        //do login
        //this.loginByKey(this.retrieveAccessToken());
        setTimeout(
          function () {
            this.loginByKey(this.retrieveAccessToken());
          }.bind(this),
          1
        );
      } else if (this.status === "PASSED" && !storageEvent.newValue) {
        //do logoff
        this.logoff();
      }
    }
  };
  LoginDialog.prototype.removeAccessToken = function () {
    if (typeof Storage !== "undefined") {
      delete localStorage[this.LCTokenKey];
    }
    return null;
  };
  LoginDialog.prototype.setAccessToken = function (accessToken) {
    this.accessToken = accessToken || this.accessToken;
    if (typeof Storage !== "undefined") {
      localStorage.setItem(this.LCTokenKey, accessToken.toString());
    }
  };
  LoginDialog.prototype.init = function () {
    emosWS.addEventListener("authentication", this.onMessage.bind(this));
    emosWS.addEventListener("UserRight", function () {});
    emosWS.addEventListener(
      "language",
      function () {
        if (this.ui.dialog("isOpen")) {
          this.ui.dialog("close");
          this.showUI();
        }
      }.bind(this)
    );
    this.loginByKey(this.retrieveAccessToken());
    window.addEventListener(
      "storage",
      this.onLocalStorageChange.bind(this),
      false
    );

    window.addEventListener(
      "message",
      function (event) {
        /*if (event.origin !== window.TRUST_DOMAIN)
             return;*/

        var data = JSON.parse(event.data);
        //console.log("receive postmessage from: " + event.origin + " / data" + event.data);
        switch (data.type) {
          case this.GET_USER_INFO:
            this.iframeHTML.contentWindow.postMessage(
              JSON.stringify({
                type: this.USER_INFO,
                UserName: this.userName,
                UserRight: this.userright,
                LoginDate: this.loginDate,
                Profiles: this.profile,
                WebSocketServer: emosWS.getWSHostname(),
                CasServer: emosWS.Cas.casServerURL,
              }),
              "*"
            );

            break;

          default:
            break;
        }
      }.bind(this),
      false
    );
  };
  LoginDialog.prototype.login = function () {
    var username = this.usernameHTML.value;
    var password = this.passwordHTML.value;
    if (username !== "" && password !== "") {
      emosWS.sendLogin(username, password, this.onMessage.bind(this));
    }
  };
  LoginDialog.prototype.loginByKey = function (accessToken) {
    if (accessToken) {
      emosWS.sendLoginByKey(accessToken.getToken(), this.onMessage.bind(this));
    }
  };
  LoginDialog.prototype.loginByCasKey = function (ticket) {
    if (ticket) {
      emosWS.sendLoginByKey(ticket, this.onMessage.bind(this));
    }
  };
  LoginDialog.prototype.logoff = function () {
    emosWS.sendLogoff();
    //this.ui.dialog('close');
  };
  LoginDialog.prototype.onMessage = function (msg) {
    try {
      this.status = msg.status;
      switch (this.status) {
        case "PASSED":
          this.onPassed(msg);
          break;
        case "FAILED":
          console.log("Authentication failed");
          this.onFailed(msg);
          //this.statusHTML.innerHTML = "Authentication failed! Please try again.";
          //this.usernameHTML.focus();
          break;
        case "LOGOFF":
          this.onLogoff();
          break;
      }
    } catch (e) {
      console.log("LoginDialog onMessage failed: " + e);
    }

    /*this.status = msg.tag;
         switch (this.status) {
         case "PASSED":
         this.onPassed(msg);
         break;
         
         case "FAILED":
         console.log("Access token is not valid");
         //this.statusHTML.innerHTML = "Authentication failed! Please try again.";
         //this.usernameHTML.focus();
         break;
         
         case "LOGOFF":
         this.onLogoff();
         break;
         }*/
  };
  LoginDialog.prototype.onAccesToken = function (data) {
    var accessToken = new AccessToken(data);
    if (this.accessToken) {
      if (accessToken.equals(this.accessToken)) return;
    }
    if (this.ui) this.ui.dialog("close");
    this.setAccessToken(accessToken);
    this.loginByKey(accessToken);
    emosWS.propagateMessage(JSON.stringify(data));
  };
  LoginDialog.prototype.onLogoff = function () {
    //this.userName = this.usernameHTML.value = this.passwordHTML.value = "";
    this.userright = null;
    this.loginDate = null;
    this.userName = "";
    this.removeAccessToken();
    this.accessToken = null;
    emosWS.Cas.onLogoff();
    if (this.ui) this.ui.dialog("close");
    this.listeners.forEach(function (loginListener) {
      loginListener.onLogoff();
    });
    this.message = { status: "out" };
    emosWS.dispatchEvent({ type: "UserRight", message: this.message });
  };
  LoginDialog.prototype.onPassed = function (msg) {
    this.status = "PASSED";
    this.userName = msg.username;
    this.userId = msg.userid;
    /*if (typeof displayName === "undefined") {
        } else if (typeof msg[displayName] === "undefined") {
        } else {
            this.userName = (msg[displayName] === displayName) || (msg[displayName] === "") ?
                    msg.username : msg[displayName];
        }*/

    this.userright = new UserRight(msg.userright);
    this.profile = JSON.parse(msg.profile);
    this.loginDate = msg.logindate;
    emosWS.Cas.onPassed(msg);
    //this.setAccessToken(data.key);
    //console.log("Authentication succesful! username = " + this.userName + " / key = " + this.accessToken);
    if (this.ui) this.ui.dialog("close");
    this.listeners.forEach(
      function (loginListener) {
        loginListener.onPassed(this.userName);
      }.bind(this)
    );
    this.message = {
      status: "in",
      username: this.userName,
      userid: this.userId,
      userright: this.userright,
    };
    emosWS.dispatchEvent({ type: "UserRight", message: this.message });
  };
  LoginDialog.prototype.onFailed = function (msg) {
    this.status = "FAILED";
    emosWS.Cas.onFailed(msg);
  };
  LoginDialog.prototype.show = function () {
    var passed = this.status === "PASSED";
    if (passed) {
      if (confirm("Do you want to sign out?")) {
        this.logoff();
      }
    } else {
      var wopen = function (url, name, w, h) {
        // Fudge factors for window decoration space.
        // In my tests these work well on all platforms & browsers.
        w += 32;
        h += 96;
        var wleft = (screen.width - w) / 2;
        var wtop = (screen.height - h) / 2;
        // IE5 and other old browsers might allow a window that is
        // partially offscreen or wider than the screen. Fix that.
        // (Newer browsers fix this for us, but let's be thorough.)
        if (wleft < 0) {
          w = screen.width;
          wleft = 0;
        }
        if (wtop < 0) {
          h = screen.height;
          wtop = 0;
        }
        var win = window.open(
          url,
          name,
          "width=" +
            w +
            ", height=" +
            h +
            ", " +
            "left=" +
            wleft +
            ", top=" +
            wtop +
            ", " +
            "location=no, menubar=no, " +
            "status=no, toolbar=no, scrollbars=no, resizable=no"
        );
        // Just in case width and height are ignored
        win.resizeTo(w, h);
        // Just in case left and top are ignored
        win.moveTo(wleft, wtop);
        win.focus();
        return win;
      };
      var w = 420,
        h = 750;
      if (this.authWindow) {
        this.authWindow.close();
      }
      //this.authWindow = wopen(this.url, "_blank", w, h);
      this.authWindow = wopen(emosWS.Cas.casLoginURL, "_blank", w, h);
      this.authWindow.focus();
      /*this.ui.dialog("open");
             this.iframeHTML.src = this.url;*/
    }
  };

  LoginDialog.prototype.getStatus = function () {
    return this.message;
  };

  LoginDialog.prototype.showUI = function () {
    if (!this.ui.dialog("isOpen")) {
      this.ui.dialog("open");
    }
    this.iframeHTML.src =
      emosWS.Cas.casLoginURL + "&locale=" + this.getLanguage();
  };

  LoginDialog.prototype.showDialog = function () {
    var passed = this.status === "PASSED";
    if (passed) {
      if (confirm("Do you want to sign out?")) {
        this.logoff();
      }
    } else {
      this.showUI();
    }
  };
  LoginDialog.prototype.checkInit = function () {
    if (emosWS.animationData.stillInit) {
      emosWS.addEventListener(
        "UserRight",
        emosWS.animationData.callback.datachangeListener.bind(
          emosWS.animationData.callback
        ),
        true
      );
    }
  };
  LoginDialog.prototype.hasRight = function (groupId, groupIndex) {
    this.checkInit();
    return this.userright
      ? this.userright.hasRight(groupId.toLowerCase(), groupIndex)
      : false;
  };
  LoginDialog.prototype.hasPaintShopRight = function (groupIndex) {
    this.checkInit();
    return this.userright
      ? this.userright.hasPaintShopRight(groupIndex)
      : groupIndex === 0;
  };
  emosWS.LoginDialog = LoginDialog;
  /**
   * Provides login functionalities
   * @module emosWS/ui/Login
   */

  /**
   * Provide login functionalities
   * @class
   * @alias Login
   * @memberof ui
   * @extends ui.ForeignObject
   * @param {Object} configuration - login configuration
   */
  function Login(configuration) {
    ForeignObject.call(this, configuration);
    this.loginDialog = window.LoginDialog;
    this.loginDialog.register(this);
  }
  Login.prototype = Object.create(ForeignObject.prototype);
  Login.prototype.constructor = Login;

  /**
   * Render more
   * @override
   */
  Login.prototype.renderMore = function () {
    try {
      var $element = $(
        '<div class="ForeignObject LoginText" id="' +
          this.elementId +
          '"></div>'
      );
      this.divJElement.append($element);
      this.element = document.getElementById(this.elementId);

      this.element.addEventListener(
        "click",
        function () {
          this.loginDialog.show(this);
        }.bind(this),
        false
      );
    } catch (e) {
      console.log("Login renderMore() failed: " + e);
    }
  };

  /**
   * Handler on log off event
   */
  Login.prototype.onLogoff = function () {
    this.loggedIn = false;
    this.element.innerHTML = "";
  };

  /**
   * Handler on log in successfull event
   * @param {type} username
   */
  Login.prototype.onPassed = function (username) {
    this.loggedIn = true;
    this.element.innerHTML = username;
  };

  emosWS.Login = Login;

  function HTMLElements(configuration) {
    this.useHTMLElement = configuration.domType === "1" ? false : true;
    this.html = configuration.html || "";
    this.js = JSON.parse(configuration.js) || [];
    this.css = JSON.parse(configuration.css) || [];
    this.onready = configuration.onready;

    ForeignObject.call(this, configuration);
  }
  HTMLElements.prototype = Object.create(ForeignObject.prototype);
  HTMLElements.prototype.constructor = HTMLElements;

  HTMLElements.prototype.renderMore = function () {
    try {
      if (this.html !== "") {
        $(this.divElement).append(
          $('<div id="' + this.elementId + '"> ' + this.html + "</div>")
        );
        this.element = this.getElement();
      }
      var onready = function () {
        if (this.onready) this.onready();
      }.bind(this);

      if (this.js.length === 0 && this.css.length === 0) {
        onready();
      } else {
        emosWS.require(
          {
            js: this.js,
          },
          onready
        );
        this.css.forEach(
          function (cssLink) {
            var linkElm = emosWS.attr.svg.createElementNS(
              "http://www.w3.org/1999/xhtml",
              "link"
            );
            linkElm.setAttribute("href", cssLink);
            linkElm.setAttribute("type", "text/css");
            linkElm.setAttribute("rel", "stylesheet");
            this.divElement.appendChild(linkElm);
          }.bind(this)
        );
      }
    } catch (e) {
      console.error(e);
    }
  };

  emosWS.HTMLElements = HTMLElements;
  /**
   * provides UI elements
   * @module emosWS/ui
   */

  /**
   * emosWS provides all APIs to communicate with WebSocket server
   * @module emosWS
   *
   * @license
   * Copyright (c) 2016 DÃ¼rr System AG
   * @author Khanh Do <NguyenDongKhanh.Do@durr.com>
   */
});
